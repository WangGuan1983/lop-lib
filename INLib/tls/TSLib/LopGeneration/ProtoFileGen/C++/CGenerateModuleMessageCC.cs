using System.Collections.Generic;
using System.IO;

namespace Proto2Code
{
    public class CGenerateModuleMessageCC
    {
        private CNameUnit m_nameUnit;
        private string m_writePath_cpp;

        //因需求变更，使用字典会显得多余，但为减少修改，暂不处理
        private Dictionary<string, List<string>> serverDic = new Dictionary<string, List<string>>();

        private FileStream m_file;
        private StreamWriter m_sbServiceStr;

        public CGenerateModuleMessageCC(CNameUnit nameUnit, string writeRoot)
        {
            m_nameUnit = nameUnit;
            m_writePath_cpp = writeRoot + m_nameUnit.MoudleSysName + "Msg" + ".cc";
        }

        public void StartWrite(List<SMsgID> systemList)
        {
            m_file = new FileStream(m_writePath_cpp, FileMode.OpenOrCreate);
            m_sbServiceStr = new StreamWriter(m_file);
            initServerDic(systemList);

            WriteHead();
            WriteNamespaceBegin();

            WriteMsg2Str(systemList);

            _WriteFuncDefine();

            WriteNamespaceEnd();

            m_sbServiceStr.Close();
        }

        private void WriteHead()
        {
            m_sbServiceStr.WriteLine("// ------------------------------------------------------------------------------");
            m_sbServiceStr.WriteLine("//  <autogenerated>");
            m_sbServiceStr.WriteLine("//      This code was generated by a tool.");
            m_sbServiceStr.WriteLine("//      Changes to this file may cause incorrect behavior and will be lost if ");
            m_sbServiceStr.WriteLine("//      the code is regenerated.");
            m_sbServiceStr.WriteLine("//  </autogenerated>");
            m_sbServiceStr.WriteLine("// ------------------------------------------------------------------------------");
            m_sbServiceStr.WriteLine("");

            m_sbServiceStr.WriteLine("#include <SHLib/message/{0}>", m_nameUnit.MoudleSysName + "Msg" + ".h");
            m_sbServiceStr.WriteLine("");
        }

        private void WriteNamespaceBegin()
        {
            m_sbServiceStr.WriteLine("namespace SHLib");
            m_sbServiceStr.WriteLine("{");
            m_sbServiceStr.WriteLine("");
        }

        private void WriteMsg2Str(List<SMsgID> list)
        {
            m_sbServiceStr.WriteLine("std::string {0}(BCLib::int32 msgID)", m_nameUnit.MoudleSysName + "Msg2Str");
            m_sbServiceStr.WriteLine("{");
            m_sbServiceStr.WriteLine("    #define _CASE_MSG_2_STR_(_MSG_CODE_)  case _MSG_CODE_: return #_MSG_CODE_");
            m_sbServiceStr.WriteLine("    switch(msgID)");
            m_sbServiceStr.WriteLine("    {");

            foreach (SMsgID item in list)
            {
                m_sbServiceStr.WriteLine("        " + CConst.MSG_2_STR + "({0});", item.enumName);
            }

            m_sbServiceStr.WriteLine("    default:");
            m_sbServiceStr.WriteLine("        " + @"return """";");
            m_sbServiceStr.WriteLine("        break;");
            m_sbServiceStr.WriteLine("    }");
            m_sbServiceStr.WriteLine("    #undef _CASE_MSG_2_STR_");

            m_sbServiceStr.WriteLine("}");
            m_sbServiceStr.WriteLine("");

        }

        private void _WriteFuncDefine()
        {
            m_sbServiceStr.WriteLine("namespace Message");
            m_sbServiceStr.WriteLine("{");
            Dictionary<string, List<string>>.KeyCollection keyColl = serverDic.Keys;
            int i = 0;
            int length = 0;
            //处理间隔空行用计数期 i ，length为会打印的区域块数 --2018.12.6 亚古留
            foreach (var s in keyColl)
            {
                string type = s.Split('_')[1];
                if ((type == "DATABASE") || (type == "GAMECLIENT"))
                {
                    continue;
                }
                length++;
            }

            foreach (string server in keyColl)
            {
                string type = server.Split('_')[1];
                if ((type == "DATABASE") || (type == "GAMECLIENT"))
                {
                    continue;
                }

                #region message

                foreach (string item in serverDic[server])
                {
                    m_sbServiceStr.WriteLine(
                        "    void C{1}::{2}(BCLib::Framework::SThdMsgLabel* msgLabel, BCLib::Framework::SMessage* msg)"
                        , CHelper.ToHump(type), CHelper.ToCaptilize(m_nameUnit.MoudleSysName), CHelper.ChangeEnum(item, "_on"));
                    m_sbServiceStr.WriteLine("    {");
                    m_sbServiceStr.WriteLine(
                        "        BCLIB_LOG_ERROR(SHLib::ELOGMODULE_SHLIB_{0}, \"Unhandled Message:dawDW {1}\");"
                        , m_nameUnit.MoudleSysName.ToUpper(), item);
                    m_sbServiceStr.WriteLine("    }");
                    m_sbServiceStr.WriteLine("");
                }
                #endregion
                if (i < length - 1)
                {
                    i++;
                    m_sbServiceStr.WriteLine("");
                }
            }
            //_createMsgExecPtr

            m_sbServiceStr.WriteLine("    bool C{0}::_createMsgExecPtr(BCLib::uint16 type, BCLib::Framework::CMsgExecPtr& msgExecPtr)", CHelper.ToCaptilize(m_nameUnit.MoudleSysName));
            m_sbServiceStr.WriteLine("    {");
            m_sbServiceStr.WriteLine("        return false;");
            m_sbServiceStr.WriteLine("    }");
            m_sbServiceStr.WriteLine("");
            m_sbServiceStr.WriteLine("    bool C{0}::_createMsgExecPtr(BCLib::uint16 type, BCLib::uint16 id, BCLib::Framework::CMsgExecPtr& msgExecPtr)", CHelper.ToCaptilize(m_nameUnit.MoudleSysName));
            m_sbServiceStr.WriteLine("    {");
            foreach (var server in keyColl)
            {
                string type = server.Split('_')[1];
                if ((type == "DATABASE") || (type == "GAMECLIENT"))
                {
                    continue;
                }
                //ANYXS_BATTLESYSTEM_CREATEMSGEXECPTR_01
                //    CENTER_BATTLESYSTEM_CREATEMSGEXECPTR_01;
                m_sbServiceStr.WriteLine("        {0}_{1}_CREATEMSGEXECPTR_01;", type.ToUpper(), m_nameUnit.MoudleSysName.ToUpper());
            }
            m_sbServiceStr.WriteLine("        return false;");
            m_sbServiceStr.WriteLine("    }");

            //这是namespace message 的}
            m_sbServiceStr.WriteLine("} // Message");
        }

        private void WriteNamespaceEnd()
        {
            //这是全局最后一个 ‘}’ 如有后续修改需在注意
            m_sbServiceStr.WriteLine("} // SHLib");
        }

        private void initServerDic(List<SMsgID> systemList)
        {
            foreach (SMsgID item in systemList)
            {
                string msgEnumName = item.enumName;
                string type = CHelper.FindELGCServerType(msgEnumName.Split('_')[1].Split('2')[1]);

                if (!serverDic.ContainsKey(type))
                {
                    List<string> serverList = new List<string>();
                    serverDic.Add(type, serverList);
                }
                serverDic[type].Add(msgEnumName);
            }
        }
    }
}
