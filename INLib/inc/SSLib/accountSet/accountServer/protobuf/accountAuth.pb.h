// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: accountAuth.proto

#ifndef PROTOBUF_accountAuth_2eproto__INCLUDED
#define PROTOBUF_accountAuth_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "baseDef.pb.h"
// @@protoc_insertion_point(includes)

namespace PTBuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_accountAuth_2eproto();
void protobuf_AssignDesc_accountAuth_2eproto();
void protobuf_ShutdownFile_accountAuth_2eproto();

class CAccountAuth;
class CAccountAuth_AccountPwd;
class CAccountAuth_AccountState;
class CAccountAuth_Permission;
class CAccountAuth_Nickname;
class CAccountAuth_Email;
class CAccountAuth_EmailAuth;
class CAccountAuth_MobilePhone;
class CAccountAuth_MobilePhoneAuth;
class CAccountAuth_IDCard;
class CAccountAuth_IDCardAuth;
class CAccountAuth_Birthday;
class CAccountAuth_LoginIP;
class CAccountAuth_LoginTime;
class CAccountAuth_LimitIP;
class CAccountAuthList;

// ===================================================================

class CAccountAuth : public ::google::protobuf::Message {
 public:
  CAccountAuth();
  virtual ~CAccountAuth();

  CAccountAuth(const CAccountAuth& from);

  inline CAccountAuth& operator=(const CAccountAuth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountAuth& default_instance();

  void Swap(CAccountAuth* other);

  // implements Message ----------------------------------------------

  CAccountAuth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountAuth& from);
  void MergeFrom(const CAccountAuth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 AccountID = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIDFieldNumber = 1;
  inline ::google::protobuf::uint64 accountid() const;
  inline void set_accountid(::google::protobuf::uint64 value);

  // optional string AccountName = 2;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 2;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional string AccountPwd = 3;
  inline bool has_accountpwd() const;
  inline void clear_accountpwd();
  static const int kAccountPwdFieldNumber = 3;
  inline const ::std::string& accountpwd() const;
  inline void set_accountpwd(const ::std::string& value);
  inline void set_accountpwd(const char* value);
  inline void set_accountpwd(const char* value, size_t size);
  inline ::std::string* mutable_accountpwd();
  inline ::std::string* release_accountpwd();
  inline void set_allocated_accountpwd(::std::string* accountpwd);

  // optional uint32 AccountOrigin = 4;
  inline bool has_accountorigin() const;
  inline void clear_accountorigin();
  static const int kAccountOriginFieldNumber = 4;
  inline ::google::protobuf::uint32 accountorigin() const;
  inline void set_accountorigin(::google::protobuf::uint32 value);

  // optional uint32 AccountState = 5;
  inline bool has_accountstate() const;
  inline void clear_accountstate();
  static const int kAccountStateFieldNumber = 5;
  inline ::google::protobuf::uint32 accountstate() const;
  inline void set_accountstate(::google::protobuf::uint32 value);

  // optional uint64 Permission = 6;
  inline bool has_permission() const;
  inline void clear_permission();
  static const int kPermissionFieldNumber = 6;
  inline ::google::protobuf::uint64 permission() const;
  inline void set_permission(::google::protobuf::uint64 value);

  // optional string Nickname = 7;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 7;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string Email = 8;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 8;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional uint32 EmailAuth = 9;
  inline bool has_emailauth() const;
  inline void clear_emailauth();
  static const int kEmailAuthFieldNumber = 9;
  inline ::google::protobuf::uint32 emailauth() const;
  inline void set_emailauth(::google::protobuf::uint32 value);

  // optional string MobilePhone = 10;
  inline bool has_mobilephone() const;
  inline void clear_mobilephone();
  static const int kMobilePhoneFieldNumber = 10;
  inline const ::std::string& mobilephone() const;
  inline void set_mobilephone(const ::std::string& value);
  inline void set_mobilephone(const char* value);
  inline void set_mobilephone(const char* value, size_t size);
  inline ::std::string* mutable_mobilephone();
  inline ::std::string* release_mobilephone();
  inline void set_allocated_mobilephone(::std::string* mobilephone);

  // optional uint32 MobilePhoneAuth = 11;
  inline bool has_mobilephoneauth() const;
  inline void clear_mobilephoneauth();
  static const int kMobilePhoneAuthFieldNumber = 11;
  inline ::google::protobuf::uint32 mobilephoneauth() const;
  inline void set_mobilephoneauth(::google::protobuf::uint32 value);

  // optional string IDCard = 12;
  inline bool has_idcard() const;
  inline void clear_idcard();
  static const int kIDCardFieldNumber = 12;
  inline const ::std::string& idcard() const;
  inline void set_idcard(const ::std::string& value);
  inline void set_idcard(const char* value);
  inline void set_idcard(const char* value, size_t size);
  inline ::std::string* mutable_idcard();
  inline ::std::string* release_idcard();
  inline void set_allocated_idcard(::std::string* idcard);

  // optional uint32 IDCardAuth = 13;
  inline bool has_idcardauth() const;
  inline void clear_idcardauth();
  static const int kIDCardAuthFieldNumber = 13;
  inline ::google::protobuf::uint32 idcardauth() const;
  inline void set_idcardauth(::google::protobuf::uint32 value);

  // optional string Birthday = 14;
  inline bool has_birthday() const;
  inline void clear_birthday();
  static const int kBirthdayFieldNumber = 14;
  inline const ::std::string& birthday() const;
  inline void set_birthday(const ::std::string& value);
  inline void set_birthday(const char* value);
  inline void set_birthday(const char* value, size_t size);
  inline ::std::string* mutable_birthday();
  inline ::std::string* release_birthday();
  inline void set_allocated_birthday(::std::string* birthday);

  // optional string RegisterIP = 15;
  inline bool has_registerip() const;
  inline void clear_registerip();
  static const int kRegisterIPFieldNumber = 15;
  inline const ::std::string& registerip() const;
  inline void set_registerip(const ::std::string& value);
  inline void set_registerip(const char* value);
  inline void set_registerip(const char* value, size_t size);
  inline ::std::string* mutable_registerip();
  inline ::std::string* release_registerip();
  inline void set_allocated_registerip(::std::string* registerip);

  // optional string RegisterTime = 16;
  inline bool has_registertime() const;
  inline void clear_registertime();
  static const int kRegisterTimeFieldNumber = 16;
  inline const ::std::string& registertime() const;
  inline void set_registertime(const ::std::string& value);
  inline void set_registertime(const char* value);
  inline void set_registertime(const char* value, size_t size);
  inline ::std::string* mutable_registertime();
  inline ::std::string* release_registertime();
  inline void set_allocated_registertime(::std::string* registertime);

  // optional string LoginIP = 17;
  inline bool has_loginip() const;
  inline void clear_loginip();
  static const int kLoginIPFieldNumber = 17;
  inline const ::std::string& loginip() const;
  inline void set_loginip(const ::std::string& value);
  inline void set_loginip(const char* value);
  inline void set_loginip(const char* value, size_t size);
  inline ::std::string* mutable_loginip();
  inline ::std::string* release_loginip();
  inline void set_allocated_loginip(::std::string* loginip);

  // optional string LoginTime = 18;
  inline bool has_logintime() const;
  inline void clear_logintime();
  static const int kLoginTimeFieldNumber = 18;
  inline const ::std::string& logintime() const;
  inline void set_logintime(const ::std::string& value);
  inline void set_logintime(const char* value);
  inline void set_logintime(const char* value, size_t size);
  inline ::std::string* mutable_logintime();
  inline ::std::string* release_logintime();
  inline void set_allocated_logintime(::std::string* logintime);

  // optional string LimitIP = 19;
  inline bool has_limitip() const;
  inline void clear_limitip();
  static const int kLimitIPFieldNumber = 19;
  inline const ::std::string& limitip() const;
  inline void set_limitip(const ::std::string& value);
  inline void set_limitip(const char* value);
  inline void set_limitip(const char* value, size_t size);
  inline ::std::string* mutable_limitip();
  inline ::std::string* release_limitip();
  inline void set_allocated_limitip(::std::string* limitip);

  // optional string ModifyTime = 20;
  inline bool has_modifytime() const;
  inline void clear_modifytime();
  static const int kModifyTimeFieldNumber = 20;
  inline const ::std::string& modifytime() const;
  inline void set_modifytime(const ::std::string& value);
  inline void set_modifytime(const char* value);
  inline void set_modifytime(const char* value, size_t size);
  inline ::std::string* mutable_modifytime();
  inline ::std::string* release_modifytime();
  inline void set_allocated_modifytime(::std::string* modifytime);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountAuth)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_accountpwd();
  inline void clear_has_accountpwd();
  inline void set_has_accountorigin();
  inline void clear_has_accountorigin();
  inline void set_has_accountstate();
  inline void clear_has_accountstate();
  inline void set_has_permission();
  inline void clear_has_permission();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_emailauth();
  inline void clear_has_emailauth();
  inline void set_has_mobilephone();
  inline void clear_has_mobilephone();
  inline void set_has_mobilephoneauth();
  inline void clear_has_mobilephoneauth();
  inline void set_has_idcard();
  inline void clear_has_idcard();
  inline void set_has_idcardauth();
  inline void clear_has_idcardauth();
  inline void set_has_birthday();
  inline void clear_has_birthday();
  inline void set_has_registerip();
  inline void clear_has_registerip();
  inline void set_has_registertime();
  inline void clear_has_registertime();
  inline void set_has_loginip();
  inline void clear_has_loginip();
  inline void set_has_logintime();
  inline void clear_has_logintime();
  inline void set_has_limitip();
  inline void clear_has_limitip();
  inline void set_has_modifytime();
  inline void clear_has_modifytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 accountid_;
  ::std::string* accountname_;
  ::std::string* accountpwd_;
  ::google::protobuf::uint32 accountorigin_;
  ::google::protobuf::uint32 accountstate_;
  ::google::protobuf::uint64 permission_;
  ::std::string* nickname_;
  ::std::string* email_;
  ::std::string* mobilephone_;
  ::google::protobuf::uint32 emailauth_;
  ::google::protobuf::uint32 mobilephoneauth_;
  ::std::string* idcard_;
  ::std::string* birthday_;
  ::std::string* registerip_;
  ::std::string* registertime_;
  ::std::string* loginip_;
  ::std::string* logintime_;
  ::std::string* limitip_;
  ::std::string* modifytime_;
  ::google::protobuf::uint32 idcardauth_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_accountAuth_2eproto();
  friend void protobuf_AssignDesc_accountAuth_2eproto();
  friend void protobuf_ShutdownFile_accountAuth_2eproto();

  void InitAsDefaultInstance();
  static CAccountAuth* default_instance_;
};
// -------------------------------------------------------------------

class CAccountAuth_AccountPwd : public ::google::protobuf::Message {
 public:
  CAccountAuth_AccountPwd();
  virtual ~CAccountAuth_AccountPwd();

  CAccountAuth_AccountPwd(const CAccountAuth_AccountPwd& from);

  inline CAccountAuth_AccountPwd& operator=(const CAccountAuth_AccountPwd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountAuth_AccountPwd& default_instance();

  void Swap(CAccountAuth_AccountPwd* other);

  // implements Message ----------------------------------------------

  CAccountAuth_AccountPwd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountAuth_AccountPwd& from);
  void MergeFrom(const CAccountAuth_AccountPwd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AccountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional string AccountPwd = 2;
  inline bool has_accountpwd() const;
  inline void clear_accountpwd();
  static const int kAccountPwdFieldNumber = 2;
  inline const ::std::string& accountpwd() const;
  inline void set_accountpwd(const ::std::string& value);
  inline void set_accountpwd(const char* value);
  inline void set_accountpwd(const char* value, size_t size);
  inline ::std::string* mutable_accountpwd();
  inline ::std::string* release_accountpwd();
  inline void set_allocated_accountpwd(::std::string* accountpwd);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountAuth_AccountPwd)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_accountpwd();
  inline void clear_has_accountpwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountname_;
  ::std::string* accountpwd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_accountAuth_2eproto();
  friend void protobuf_AssignDesc_accountAuth_2eproto();
  friend void protobuf_ShutdownFile_accountAuth_2eproto();

  void InitAsDefaultInstance();
  static CAccountAuth_AccountPwd* default_instance_;
};
// -------------------------------------------------------------------

class CAccountAuth_AccountState : public ::google::protobuf::Message {
 public:
  CAccountAuth_AccountState();
  virtual ~CAccountAuth_AccountState();

  CAccountAuth_AccountState(const CAccountAuth_AccountState& from);

  inline CAccountAuth_AccountState& operator=(const CAccountAuth_AccountState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountAuth_AccountState& default_instance();

  void Swap(CAccountAuth_AccountState* other);

  // implements Message ----------------------------------------------

  CAccountAuth_AccountState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountAuth_AccountState& from);
  void MergeFrom(const CAccountAuth_AccountState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AccountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional uint32 AccountState = 2;
  inline bool has_accountstate() const;
  inline void clear_accountstate();
  static const int kAccountStateFieldNumber = 2;
  inline ::google::protobuf::uint32 accountstate() const;
  inline void set_accountstate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountAuth_AccountState)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_accountstate();
  inline void clear_has_accountstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountname_;
  ::google::protobuf::uint32 accountstate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_accountAuth_2eproto();
  friend void protobuf_AssignDesc_accountAuth_2eproto();
  friend void protobuf_ShutdownFile_accountAuth_2eproto();

  void InitAsDefaultInstance();
  static CAccountAuth_AccountState* default_instance_;
};
// -------------------------------------------------------------------

class CAccountAuth_Permission : public ::google::protobuf::Message {
 public:
  CAccountAuth_Permission();
  virtual ~CAccountAuth_Permission();

  CAccountAuth_Permission(const CAccountAuth_Permission& from);

  inline CAccountAuth_Permission& operator=(const CAccountAuth_Permission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountAuth_Permission& default_instance();

  void Swap(CAccountAuth_Permission* other);

  // implements Message ----------------------------------------------

  CAccountAuth_Permission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountAuth_Permission& from);
  void MergeFrom(const CAccountAuth_Permission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AccountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional uint64 Permission = 2;
  inline bool has_permission() const;
  inline void clear_permission();
  static const int kPermissionFieldNumber = 2;
  inline ::google::protobuf::uint64 permission() const;
  inline void set_permission(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountAuth_Permission)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_permission();
  inline void clear_has_permission();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountname_;
  ::google::protobuf::uint64 permission_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_accountAuth_2eproto();
  friend void protobuf_AssignDesc_accountAuth_2eproto();
  friend void protobuf_ShutdownFile_accountAuth_2eproto();

  void InitAsDefaultInstance();
  static CAccountAuth_Permission* default_instance_;
};
// -------------------------------------------------------------------

class CAccountAuth_Nickname : public ::google::protobuf::Message {
 public:
  CAccountAuth_Nickname();
  virtual ~CAccountAuth_Nickname();

  CAccountAuth_Nickname(const CAccountAuth_Nickname& from);

  inline CAccountAuth_Nickname& operator=(const CAccountAuth_Nickname& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountAuth_Nickname& default_instance();

  void Swap(CAccountAuth_Nickname* other);

  // implements Message ----------------------------------------------

  CAccountAuth_Nickname* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountAuth_Nickname& from);
  void MergeFrom(const CAccountAuth_Nickname& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AccountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional string Nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountAuth_Nickname)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountname_;
  ::std::string* nickname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_accountAuth_2eproto();
  friend void protobuf_AssignDesc_accountAuth_2eproto();
  friend void protobuf_ShutdownFile_accountAuth_2eproto();

  void InitAsDefaultInstance();
  static CAccountAuth_Nickname* default_instance_;
};
// -------------------------------------------------------------------

class CAccountAuth_Email : public ::google::protobuf::Message {
 public:
  CAccountAuth_Email();
  virtual ~CAccountAuth_Email();

  CAccountAuth_Email(const CAccountAuth_Email& from);

  inline CAccountAuth_Email& operator=(const CAccountAuth_Email& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountAuth_Email& default_instance();

  void Swap(CAccountAuth_Email* other);

  // implements Message ----------------------------------------------

  CAccountAuth_Email* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountAuth_Email& from);
  void MergeFrom(const CAccountAuth_Email& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AccountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional string Email = 2;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 2;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountAuth_Email)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_email();
  inline void clear_has_email();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountname_;
  ::std::string* email_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_accountAuth_2eproto();
  friend void protobuf_AssignDesc_accountAuth_2eproto();
  friend void protobuf_ShutdownFile_accountAuth_2eproto();

  void InitAsDefaultInstance();
  static CAccountAuth_Email* default_instance_;
};
// -------------------------------------------------------------------

class CAccountAuth_EmailAuth : public ::google::protobuf::Message {
 public:
  CAccountAuth_EmailAuth();
  virtual ~CAccountAuth_EmailAuth();

  CAccountAuth_EmailAuth(const CAccountAuth_EmailAuth& from);

  inline CAccountAuth_EmailAuth& operator=(const CAccountAuth_EmailAuth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountAuth_EmailAuth& default_instance();

  void Swap(CAccountAuth_EmailAuth* other);

  // implements Message ----------------------------------------------

  CAccountAuth_EmailAuth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountAuth_EmailAuth& from);
  void MergeFrom(const CAccountAuth_EmailAuth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AccountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional uint32 EmailAuth = 2;
  inline bool has_emailauth() const;
  inline void clear_emailauth();
  static const int kEmailAuthFieldNumber = 2;
  inline ::google::protobuf::uint32 emailauth() const;
  inline void set_emailauth(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountAuth_EmailAuth)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_emailauth();
  inline void clear_has_emailauth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountname_;
  ::google::protobuf::uint32 emailauth_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_accountAuth_2eproto();
  friend void protobuf_AssignDesc_accountAuth_2eproto();
  friend void protobuf_ShutdownFile_accountAuth_2eproto();

  void InitAsDefaultInstance();
  static CAccountAuth_EmailAuth* default_instance_;
};
// -------------------------------------------------------------------

class CAccountAuth_MobilePhone : public ::google::protobuf::Message {
 public:
  CAccountAuth_MobilePhone();
  virtual ~CAccountAuth_MobilePhone();

  CAccountAuth_MobilePhone(const CAccountAuth_MobilePhone& from);

  inline CAccountAuth_MobilePhone& operator=(const CAccountAuth_MobilePhone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountAuth_MobilePhone& default_instance();

  void Swap(CAccountAuth_MobilePhone* other);

  // implements Message ----------------------------------------------

  CAccountAuth_MobilePhone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountAuth_MobilePhone& from);
  void MergeFrom(const CAccountAuth_MobilePhone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AccountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional string MobilePhone = 2;
  inline bool has_mobilephone() const;
  inline void clear_mobilephone();
  static const int kMobilePhoneFieldNumber = 2;
  inline const ::std::string& mobilephone() const;
  inline void set_mobilephone(const ::std::string& value);
  inline void set_mobilephone(const char* value);
  inline void set_mobilephone(const char* value, size_t size);
  inline ::std::string* mutable_mobilephone();
  inline ::std::string* release_mobilephone();
  inline void set_allocated_mobilephone(::std::string* mobilephone);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountAuth_MobilePhone)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_mobilephone();
  inline void clear_has_mobilephone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountname_;
  ::std::string* mobilephone_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_accountAuth_2eproto();
  friend void protobuf_AssignDesc_accountAuth_2eproto();
  friend void protobuf_ShutdownFile_accountAuth_2eproto();

  void InitAsDefaultInstance();
  static CAccountAuth_MobilePhone* default_instance_;
};
// -------------------------------------------------------------------

class CAccountAuth_MobilePhoneAuth : public ::google::protobuf::Message {
 public:
  CAccountAuth_MobilePhoneAuth();
  virtual ~CAccountAuth_MobilePhoneAuth();

  CAccountAuth_MobilePhoneAuth(const CAccountAuth_MobilePhoneAuth& from);

  inline CAccountAuth_MobilePhoneAuth& operator=(const CAccountAuth_MobilePhoneAuth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountAuth_MobilePhoneAuth& default_instance();

  void Swap(CAccountAuth_MobilePhoneAuth* other);

  // implements Message ----------------------------------------------

  CAccountAuth_MobilePhoneAuth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountAuth_MobilePhoneAuth& from);
  void MergeFrom(const CAccountAuth_MobilePhoneAuth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AccountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional uint32 MobilePhoneAuth = 2;
  inline bool has_mobilephoneauth() const;
  inline void clear_mobilephoneauth();
  static const int kMobilePhoneAuthFieldNumber = 2;
  inline ::google::protobuf::uint32 mobilephoneauth() const;
  inline void set_mobilephoneauth(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountAuth_MobilePhoneAuth)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_mobilephoneauth();
  inline void clear_has_mobilephoneauth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountname_;
  ::google::protobuf::uint32 mobilephoneauth_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_accountAuth_2eproto();
  friend void protobuf_AssignDesc_accountAuth_2eproto();
  friend void protobuf_ShutdownFile_accountAuth_2eproto();

  void InitAsDefaultInstance();
  static CAccountAuth_MobilePhoneAuth* default_instance_;
};
// -------------------------------------------------------------------

class CAccountAuth_IDCard : public ::google::protobuf::Message {
 public:
  CAccountAuth_IDCard();
  virtual ~CAccountAuth_IDCard();

  CAccountAuth_IDCard(const CAccountAuth_IDCard& from);

  inline CAccountAuth_IDCard& operator=(const CAccountAuth_IDCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountAuth_IDCard& default_instance();

  void Swap(CAccountAuth_IDCard* other);

  // implements Message ----------------------------------------------

  CAccountAuth_IDCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountAuth_IDCard& from);
  void MergeFrom(const CAccountAuth_IDCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AccountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional string IDCard = 2;
  inline bool has_idcard() const;
  inline void clear_idcard();
  static const int kIDCardFieldNumber = 2;
  inline const ::std::string& idcard() const;
  inline void set_idcard(const ::std::string& value);
  inline void set_idcard(const char* value);
  inline void set_idcard(const char* value, size_t size);
  inline ::std::string* mutable_idcard();
  inline ::std::string* release_idcard();
  inline void set_allocated_idcard(::std::string* idcard);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountAuth_IDCard)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_idcard();
  inline void clear_has_idcard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountname_;
  ::std::string* idcard_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_accountAuth_2eproto();
  friend void protobuf_AssignDesc_accountAuth_2eproto();
  friend void protobuf_ShutdownFile_accountAuth_2eproto();

  void InitAsDefaultInstance();
  static CAccountAuth_IDCard* default_instance_;
};
// -------------------------------------------------------------------

class CAccountAuth_IDCardAuth : public ::google::protobuf::Message {
 public:
  CAccountAuth_IDCardAuth();
  virtual ~CAccountAuth_IDCardAuth();

  CAccountAuth_IDCardAuth(const CAccountAuth_IDCardAuth& from);

  inline CAccountAuth_IDCardAuth& operator=(const CAccountAuth_IDCardAuth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountAuth_IDCardAuth& default_instance();

  void Swap(CAccountAuth_IDCardAuth* other);

  // implements Message ----------------------------------------------

  CAccountAuth_IDCardAuth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountAuth_IDCardAuth& from);
  void MergeFrom(const CAccountAuth_IDCardAuth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AccountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional uint32 IDCardAuth = 2;
  inline bool has_idcardauth() const;
  inline void clear_idcardauth();
  static const int kIDCardAuthFieldNumber = 2;
  inline ::google::protobuf::uint32 idcardauth() const;
  inline void set_idcardauth(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountAuth_IDCardAuth)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_idcardauth();
  inline void clear_has_idcardauth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountname_;
  ::google::protobuf::uint32 idcardauth_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_accountAuth_2eproto();
  friend void protobuf_AssignDesc_accountAuth_2eproto();
  friend void protobuf_ShutdownFile_accountAuth_2eproto();

  void InitAsDefaultInstance();
  static CAccountAuth_IDCardAuth* default_instance_;
};
// -------------------------------------------------------------------

class CAccountAuth_Birthday : public ::google::protobuf::Message {
 public:
  CAccountAuth_Birthday();
  virtual ~CAccountAuth_Birthday();

  CAccountAuth_Birthday(const CAccountAuth_Birthday& from);

  inline CAccountAuth_Birthday& operator=(const CAccountAuth_Birthday& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountAuth_Birthday& default_instance();

  void Swap(CAccountAuth_Birthday* other);

  // implements Message ----------------------------------------------

  CAccountAuth_Birthday* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountAuth_Birthday& from);
  void MergeFrom(const CAccountAuth_Birthday& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AccountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional string Birthday = 2;
  inline bool has_birthday() const;
  inline void clear_birthday();
  static const int kBirthdayFieldNumber = 2;
  inline const ::std::string& birthday() const;
  inline void set_birthday(const ::std::string& value);
  inline void set_birthday(const char* value);
  inline void set_birthday(const char* value, size_t size);
  inline ::std::string* mutable_birthday();
  inline ::std::string* release_birthday();
  inline void set_allocated_birthday(::std::string* birthday);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountAuth_Birthday)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_birthday();
  inline void clear_has_birthday();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountname_;
  ::std::string* birthday_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_accountAuth_2eproto();
  friend void protobuf_AssignDesc_accountAuth_2eproto();
  friend void protobuf_ShutdownFile_accountAuth_2eproto();

  void InitAsDefaultInstance();
  static CAccountAuth_Birthday* default_instance_;
};
// -------------------------------------------------------------------

class CAccountAuth_LoginIP : public ::google::protobuf::Message {
 public:
  CAccountAuth_LoginIP();
  virtual ~CAccountAuth_LoginIP();

  CAccountAuth_LoginIP(const CAccountAuth_LoginIP& from);

  inline CAccountAuth_LoginIP& operator=(const CAccountAuth_LoginIP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountAuth_LoginIP& default_instance();

  void Swap(CAccountAuth_LoginIP* other);

  // implements Message ----------------------------------------------

  CAccountAuth_LoginIP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountAuth_LoginIP& from);
  void MergeFrom(const CAccountAuth_LoginIP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AccountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional string LoginIP = 2;
  inline bool has_loginip() const;
  inline void clear_loginip();
  static const int kLoginIPFieldNumber = 2;
  inline const ::std::string& loginip() const;
  inline void set_loginip(const ::std::string& value);
  inline void set_loginip(const char* value);
  inline void set_loginip(const char* value, size_t size);
  inline ::std::string* mutable_loginip();
  inline ::std::string* release_loginip();
  inline void set_allocated_loginip(::std::string* loginip);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountAuth_LoginIP)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_loginip();
  inline void clear_has_loginip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountname_;
  ::std::string* loginip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_accountAuth_2eproto();
  friend void protobuf_AssignDesc_accountAuth_2eproto();
  friend void protobuf_ShutdownFile_accountAuth_2eproto();

  void InitAsDefaultInstance();
  static CAccountAuth_LoginIP* default_instance_;
};
// -------------------------------------------------------------------

class CAccountAuth_LoginTime : public ::google::protobuf::Message {
 public:
  CAccountAuth_LoginTime();
  virtual ~CAccountAuth_LoginTime();

  CAccountAuth_LoginTime(const CAccountAuth_LoginTime& from);

  inline CAccountAuth_LoginTime& operator=(const CAccountAuth_LoginTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountAuth_LoginTime& default_instance();

  void Swap(CAccountAuth_LoginTime* other);

  // implements Message ----------------------------------------------

  CAccountAuth_LoginTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountAuth_LoginTime& from);
  void MergeFrom(const CAccountAuth_LoginTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AccountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional string LoginTime = 2;
  inline bool has_logintime() const;
  inline void clear_logintime();
  static const int kLoginTimeFieldNumber = 2;
  inline const ::std::string& logintime() const;
  inline void set_logintime(const ::std::string& value);
  inline void set_logintime(const char* value);
  inline void set_logintime(const char* value, size_t size);
  inline ::std::string* mutable_logintime();
  inline ::std::string* release_logintime();
  inline void set_allocated_logintime(::std::string* logintime);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountAuth_LoginTime)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_logintime();
  inline void clear_has_logintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountname_;
  ::std::string* logintime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_accountAuth_2eproto();
  friend void protobuf_AssignDesc_accountAuth_2eproto();
  friend void protobuf_ShutdownFile_accountAuth_2eproto();

  void InitAsDefaultInstance();
  static CAccountAuth_LoginTime* default_instance_;
};
// -------------------------------------------------------------------

class CAccountAuth_LimitIP : public ::google::protobuf::Message {
 public:
  CAccountAuth_LimitIP();
  virtual ~CAccountAuth_LimitIP();

  CAccountAuth_LimitIP(const CAccountAuth_LimitIP& from);

  inline CAccountAuth_LimitIP& operator=(const CAccountAuth_LimitIP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountAuth_LimitIP& default_instance();

  void Swap(CAccountAuth_LimitIP* other);

  // implements Message ----------------------------------------------

  CAccountAuth_LimitIP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountAuth_LimitIP& from);
  void MergeFrom(const CAccountAuth_LimitIP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AccountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional string LimitIP = 2;
  inline bool has_limitip() const;
  inline void clear_limitip();
  static const int kLimitIPFieldNumber = 2;
  inline const ::std::string& limitip() const;
  inline void set_limitip(const ::std::string& value);
  inline void set_limitip(const char* value);
  inline void set_limitip(const char* value, size_t size);
  inline ::std::string* mutable_limitip();
  inline ::std::string* release_limitip();
  inline void set_allocated_limitip(::std::string* limitip);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountAuth_LimitIP)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_limitip();
  inline void clear_has_limitip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountname_;
  ::std::string* limitip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_accountAuth_2eproto();
  friend void protobuf_AssignDesc_accountAuth_2eproto();
  friend void protobuf_ShutdownFile_accountAuth_2eproto();

  void InitAsDefaultInstance();
  static CAccountAuth_LimitIP* default_instance_;
};
// -------------------------------------------------------------------

class CAccountAuthList : public ::google::protobuf::Message {
 public:
  CAccountAuthList();
  virtual ~CAccountAuthList();

  CAccountAuthList(const CAccountAuthList& from);

  inline CAccountAuthList& operator=(const CAccountAuthList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountAuthList& default_instance();

  void Swap(CAccountAuthList* other);

  // implements Message ----------------------------------------------

  CAccountAuthList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountAuthList& from);
  void MergeFrom(const CAccountAuthList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PTBuf.CAccountAuth Objects = 1;
  inline int objects_size() const;
  inline void clear_objects();
  static const int kObjectsFieldNumber = 1;
  inline const ::PTBuf::CAccountAuth& objects(int index) const;
  inline ::PTBuf::CAccountAuth* mutable_objects(int index);
  inline ::PTBuf::CAccountAuth* add_objects();
  inline const ::google::protobuf::RepeatedPtrField< ::PTBuf::CAccountAuth >&
      objects() const;
  inline ::google::protobuf::RepeatedPtrField< ::PTBuf::CAccountAuth >*
      mutable_objects();

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountAuthList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PTBuf::CAccountAuth > objects_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_accountAuth_2eproto();
  friend void protobuf_AssignDesc_accountAuth_2eproto();
  friend void protobuf_ShutdownFile_accountAuth_2eproto();

  void InitAsDefaultInstance();
  static CAccountAuthList* default_instance_;
};
// ===================================================================


// ===================================================================

// CAccountAuth

// optional uint64 AccountID = 1;
inline bool CAccountAuth::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountAuth::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountAuth::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountAuth::clear_accountid() {
  accountid_ = GOOGLE_ULONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::uint64 CAccountAuth::accountid() const {
  return accountid_;
}
inline void CAccountAuth::set_accountid(::google::protobuf::uint64 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional string AccountName = 2;
inline bool CAccountAuth::has_accountname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountAuth::set_has_accountname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountAuth::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountAuth::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& CAccountAuth::accountname() const {
  return *accountname_;
}
inline void CAccountAuth::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* CAccountAuth::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string AccountPwd = 3;
inline bool CAccountAuth::has_accountpwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CAccountAuth::set_has_accountpwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CAccountAuth::clear_has_accountpwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CAccountAuth::clear_accountpwd() {
  if (accountpwd_ != &::google::protobuf::internal::kEmptyString) {
    accountpwd_->clear();
  }
  clear_has_accountpwd();
}
inline const ::std::string& CAccountAuth::accountpwd() const {
  return *accountpwd_;
}
inline void CAccountAuth::set_accountpwd(const ::std::string& value) {
  set_has_accountpwd();
  if (accountpwd_ == &::google::protobuf::internal::kEmptyString) {
    accountpwd_ = new ::std::string;
  }
  accountpwd_->assign(value);
}
inline void CAccountAuth::set_accountpwd(const char* value) {
  set_has_accountpwd();
  if (accountpwd_ == &::google::protobuf::internal::kEmptyString) {
    accountpwd_ = new ::std::string;
  }
  accountpwd_->assign(value);
}
inline void CAccountAuth::set_accountpwd(const char* value, size_t size) {
  set_has_accountpwd();
  if (accountpwd_ == &::google::protobuf::internal::kEmptyString) {
    accountpwd_ = new ::std::string;
  }
  accountpwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth::mutable_accountpwd() {
  set_has_accountpwd();
  if (accountpwd_ == &::google::protobuf::internal::kEmptyString) {
    accountpwd_ = new ::std::string;
  }
  return accountpwd_;
}
inline ::std::string* CAccountAuth::release_accountpwd() {
  clear_has_accountpwd();
  if (accountpwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountpwd_;
    accountpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth::set_allocated_accountpwd(::std::string* accountpwd) {
  if (accountpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete accountpwd_;
  }
  if (accountpwd) {
    set_has_accountpwd();
    accountpwd_ = accountpwd;
  } else {
    clear_has_accountpwd();
    accountpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 AccountOrigin = 4;
inline bool CAccountAuth::has_accountorigin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CAccountAuth::set_has_accountorigin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CAccountAuth::clear_has_accountorigin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CAccountAuth::clear_accountorigin() {
  accountorigin_ = 0u;
  clear_has_accountorigin();
}
inline ::google::protobuf::uint32 CAccountAuth::accountorigin() const {
  return accountorigin_;
}
inline void CAccountAuth::set_accountorigin(::google::protobuf::uint32 value) {
  set_has_accountorigin();
  accountorigin_ = value;
}

// optional uint32 AccountState = 5;
inline bool CAccountAuth::has_accountstate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CAccountAuth::set_has_accountstate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CAccountAuth::clear_has_accountstate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CAccountAuth::clear_accountstate() {
  accountstate_ = 0u;
  clear_has_accountstate();
}
inline ::google::protobuf::uint32 CAccountAuth::accountstate() const {
  return accountstate_;
}
inline void CAccountAuth::set_accountstate(::google::protobuf::uint32 value) {
  set_has_accountstate();
  accountstate_ = value;
}

// optional uint64 Permission = 6;
inline bool CAccountAuth::has_permission() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CAccountAuth::set_has_permission() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CAccountAuth::clear_has_permission() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CAccountAuth::clear_permission() {
  permission_ = GOOGLE_ULONGLONG(0);
  clear_has_permission();
}
inline ::google::protobuf::uint64 CAccountAuth::permission() const {
  return permission_;
}
inline void CAccountAuth::set_permission(::google::protobuf::uint64 value) {
  set_has_permission();
  permission_ = value;
}

// optional string Nickname = 7;
inline bool CAccountAuth::has_nickname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CAccountAuth::set_has_nickname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CAccountAuth::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CAccountAuth::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& CAccountAuth::nickname() const {
  return *nickname_;
}
inline void CAccountAuth::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void CAccountAuth::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void CAccountAuth::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* CAccountAuth::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Email = 8;
inline bool CAccountAuth::has_email() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CAccountAuth::set_has_email() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CAccountAuth::clear_has_email() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CAccountAuth::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& CAccountAuth::email() const {
  return *email_;
}
inline void CAccountAuth::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void CAccountAuth::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void CAccountAuth::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* CAccountAuth::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 EmailAuth = 9;
inline bool CAccountAuth::has_emailauth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CAccountAuth::set_has_emailauth() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CAccountAuth::clear_has_emailauth() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CAccountAuth::clear_emailauth() {
  emailauth_ = 0u;
  clear_has_emailauth();
}
inline ::google::protobuf::uint32 CAccountAuth::emailauth() const {
  return emailauth_;
}
inline void CAccountAuth::set_emailauth(::google::protobuf::uint32 value) {
  set_has_emailauth();
  emailauth_ = value;
}

// optional string MobilePhone = 10;
inline bool CAccountAuth::has_mobilephone() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CAccountAuth::set_has_mobilephone() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CAccountAuth::clear_has_mobilephone() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CAccountAuth::clear_mobilephone() {
  if (mobilephone_ != &::google::protobuf::internal::kEmptyString) {
    mobilephone_->clear();
  }
  clear_has_mobilephone();
}
inline const ::std::string& CAccountAuth::mobilephone() const {
  return *mobilephone_;
}
inline void CAccountAuth::set_mobilephone(const ::std::string& value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::kEmptyString) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
}
inline void CAccountAuth::set_mobilephone(const char* value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::kEmptyString) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
}
inline void CAccountAuth::set_mobilephone(const char* value, size_t size) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::kEmptyString) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth::mutable_mobilephone() {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::kEmptyString) {
    mobilephone_ = new ::std::string;
  }
  return mobilephone_;
}
inline ::std::string* CAccountAuth::release_mobilephone() {
  clear_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mobilephone_;
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth::set_allocated_mobilephone(::std::string* mobilephone) {
  if (mobilephone_ != &::google::protobuf::internal::kEmptyString) {
    delete mobilephone_;
  }
  if (mobilephone) {
    set_has_mobilephone();
    mobilephone_ = mobilephone;
  } else {
    clear_has_mobilephone();
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 MobilePhoneAuth = 11;
inline bool CAccountAuth::has_mobilephoneauth() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CAccountAuth::set_has_mobilephoneauth() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CAccountAuth::clear_has_mobilephoneauth() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CAccountAuth::clear_mobilephoneauth() {
  mobilephoneauth_ = 0u;
  clear_has_mobilephoneauth();
}
inline ::google::protobuf::uint32 CAccountAuth::mobilephoneauth() const {
  return mobilephoneauth_;
}
inline void CAccountAuth::set_mobilephoneauth(::google::protobuf::uint32 value) {
  set_has_mobilephoneauth();
  mobilephoneauth_ = value;
}

// optional string IDCard = 12;
inline bool CAccountAuth::has_idcard() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CAccountAuth::set_has_idcard() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CAccountAuth::clear_has_idcard() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CAccountAuth::clear_idcard() {
  if (idcard_ != &::google::protobuf::internal::kEmptyString) {
    idcard_->clear();
  }
  clear_has_idcard();
}
inline const ::std::string& CAccountAuth::idcard() const {
  return *idcard_;
}
inline void CAccountAuth::set_idcard(const ::std::string& value) {
  set_has_idcard();
  if (idcard_ == &::google::protobuf::internal::kEmptyString) {
    idcard_ = new ::std::string;
  }
  idcard_->assign(value);
}
inline void CAccountAuth::set_idcard(const char* value) {
  set_has_idcard();
  if (idcard_ == &::google::protobuf::internal::kEmptyString) {
    idcard_ = new ::std::string;
  }
  idcard_->assign(value);
}
inline void CAccountAuth::set_idcard(const char* value, size_t size) {
  set_has_idcard();
  if (idcard_ == &::google::protobuf::internal::kEmptyString) {
    idcard_ = new ::std::string;
  }
  idcard_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth::mutable_idcard() {
  set_has_idcard();
  if (idcard_ == &::google::protobuf::internal::kEmptyString) {
    idcard_ = new ::std::string;
  }
  return idcard_;
}
inline ::std::string* CAccountAuth::release_idcard() {
  clear_has_idcard();
  if (idcard_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = idcard_;
    idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth::set_allocated_idcard(::std::string* idcard) {
  if (idcard_ != &::google::protobuf::internal::kEmptyString) {
    delete idcard_;
  }
  if (idcard) {
    set_has_idcard();
    idcard_ = idcard;
  } else {
    clear_has_idcard();
    idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 IDCardAuth = 13;
inline bool CAccountAuth::has_idcardauth() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CAccountAuth::set_has_idcardauth() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CAccountAuth::clear_has_idcardauth() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CAccountAuth::clear_idcardauth() {
  idcardauth_ = 0u;
  clear_has_idcardauth();
}
inline ::google::protobuf::uint32 CAccountAuth::idcardauth() const {
  return idcardauth_;
}
inline void CAccountAuth::set_idcardauth(::google::protobuf::uint32 value) {
  set_has_idcardauth();
  idcardauth_ = value;
}

// optional string Birthday = 14;
inline bool CAccountAuth::has_birthday() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CAccountAuth::set_has_birthday() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CAccountAuth::clear_has_birthday() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CAccountAuth::clear_birthday() {
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    birthday_->clear();
  }
  clear_has_birthday();
}
inline const ::std::string& CAccountAuth::birthday() const {
  return *birthday_;
}
inline void CAccountAuth::set_birthday(const ::std::string& value) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(value);
}
inline void CAccountAuth::set_birthday(const char* value) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(value);
}
inline void CAccountAuth::set_birthday(const char* value, size_t size) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth::mutable_birthday() {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  return birthday_;
}
inline ::std::string* CAccountAuth::release_birthday() {
  clear_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = birthday_;
    birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth::set_allocated_birthday(::std::string* birthday) {
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    delete birthday_;
  }
  if (birthday) {
    set_has_birthday();
    birthday_ = birthday;
  } else {
    clear_has_birthday();
    birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string RegisterIP = 15;
inline bool CAccountAuth::has_registerip() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CAccountAuth::set_has_registerip() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CAccountAuth::clear_has_registerip() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CAccountAuth::clear_registerip() {
  if (registerip_ != &::google::protobuf::internal::kEmptyString) {
    registerip_->clear();
  }
  clear_has_registerip();
}
inline const ::std::string& CAccountAuth::registerip() const {
  return *registerip_;
}
inline void CAccountAuth::set_registerip(const ::std::string& value) {
  set_has_registerip();
  if (registerip_ == &::google::protobuf::internal::kEmptyString) {
    registerip_ = new ::std::string;
  }
  registerip_->assign(value);
}
inline void CAccountAuth::set_registerip(const char* value) {
  set_has_registerip();
  if (registerip_ == &::google::protobuf::internal::kEmptyString) {
    registerip_ = new ::std::string;
  }
  registerip_->assign(value);
}
inline void CAccountAuth::set_registerip(const char* value, size_t size) {
  set_has_registerip();
  if (registerip_ == &::google::protobuf::internal::kEmptyString) {
    registerip_ = new ::std::string;
  }
  registerip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth::mutable_registerip() {
  set_has_registerip();
  if (registerip_ == &::google::protobuf::internal::kEmptyString) {
    registerip_ = new ::std::string;
  }
  return registerip_;
}
inline ::std::string* CAccountAuth::release_registerip() {
  clear_has_registerip();
  if (registerip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = registerip_;
    registerip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth::set_allocated_registerip(::std::string* registerip) {
  if (registerip_ != &::google::protobuf::internal::kEmptyString) {
    delete registerip_;
  }
  if (registerip) {
    set_has_registerip();
    registerip_ = registerip;
  } else {
    clear_has_registerip();
    registerip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string RegisterTime = 16;
inline bool CAccountAuth::has_registertime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CAccountAuth::set_has_registertime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CAccountAuth::clear_has_registertime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CAccountAuth::clear_registertime() {
  if (registertime_ != &::google::protobuf::internal::kEmptyString) {
    registertime_->clear();
  }
  clear_has_registertime();
}
inline const ::std::string& CAccountAuth::registertime() const {
  return *registertime_;
}
inline void CAccountAuth::set_registertime(const ::std::string& value) {
  set_has_registertime();
  if (registertime_ == &::google::protobuf::internal::kEmptyString) {
    registertime_ = new ::std::string;
  }
  registertime_->assign(value);
}
inline void CAccountAuth::set_registertime(const char* value) {
  set_has_registertime();
  if (registertime_ == &::google::protobuf::internal::kEmptyString) {
    registertime_ = new ::std::string;
  }
  registertime_->assign(value);
}
inline void CAccountAuth::set_registertime(const char* value, size_t size) {
  set_has_registertime();
  if (registertime_ == &::google::protobuf::internal::kEmptyString) {
    registertime_ = new ::std::string;
  }
  registertime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth::mutable_registertime() {
  set_has_registertime();
  if (registertime_ == &::google::protobuf::internal::kEmptyString) {
    registertime_ = new ::std::string;
  }
  return registertime_;
}
inline ::std::string* CAccountAuth::release_registertime() {
  clear_has_registertime();
  if (registertime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = registertime_;
    registertime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth::set_allocated_registertime(::std::string* registertime) {
  if (registertime_ != &::google::protobuf::internal::kEmptyString) {
    delete registertime_;
  }
  if (registertime) {
    set_has_registertime();
    registertime_ = registertime;
  } else {
    clear_has_registertime();
    registertime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string LoginIP = 17;
inline bool CAccountAuth::has_loginip() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CAccountAuth::set_has_loginip() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CAccountAuth::clear_has_loginip() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CAccountAuth::clear_loginip() {
  if (loginip_ != &::google::protobuf::internal::kEmptyString) {
    loginip_->clear();
  }
  clear_has_loginip();
}
inline const ::std::string& CAccountAuth::loginip() const {
  return *loginip_;
}
inline void CAccountAuth::set_loginip(const ::std::string& value) {
  set_has_loginip();
  if (loginip_ == &::google::protobuf::internal::kEmptyString) {
    loginip_ = new ::std::string;
  }
  loginip_->assign(value);
}
inline void CAccountAuth::set_loginip(const char* value) {
  set_has_loginip();
  if (loginip_ == &::google::protobuf::internal::kEmptyString) {
    loginip_ = new ::std::string;
  }
  loginip_->assign(value);
}
inline void CAccountAuth::set_loginip(const char* value, size_t size) {
  set_has_loginip();
  if (loginip_ == &::google::protobuf::internal::kEmptyString) {
    loginip_ = new ::std::string;
  }
  loginip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth::mutable_loginip() {
  set_has_loginip();
  if (loginip_ == &::google::protobuf::internal::kEmptyString) {
    loginip_ = new ::std::string;
  }
  return loginip_;
}
inline ::std::string* CAccountAuth::release_loginip() {
  clear_has_loginip();
  if (loginip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = loginip_;
    loginip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth::set_allocated_loginip(::std::string* loginip) {
  if (loginip_ != &::google::protobuf::internal::kEmptyString) {
    delete loginip_;
  }
  if (loginip) {
    set_has_loginip();
    loginip_ = loginip;
  } else {
    clear_has_loginip();
    loginip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string LoginTime = 18;
inline bool CAccountAuth::has_logintime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CAccountAuth::set_has_logintime() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CAccountAuth::clear_has_logintime() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CAccountAuth::clear_logintime() {
  if (logintime_ != &::google::protobuf::internal::kEmptyString) {
    logintime_->clear();
  }
  clear_has_logintime();
}
inline const ::std::string& CAccountAuth::logintime() const {
  return *logintime_;
}
inline void CAccountAuth::set_logintime(const ::std::string& value) {
  set_has_logintime();
  if (logintime_ == &::google::protobuf::internal::kEmptyString) {
    logintime_ = new ::std::string;
  }
  logintime_->assign(value);
}
inline void CAccountAuth::set_logintime(const char* value) {
  set_has_logintime();
  if (logintime_ == &::google::protobuf::internal::kEmptyString) {
    logintime_ = new ::std::string;
  }
  logintime_->assign(value);
}
inline void CAccountAuth::set_logintime(const char* value, size_t size) {
  set_has_logintime();
  if (logintime_ == &::google::protobuf::internal::kEmptyString) {
    logintime_ = new ::std::string;
  }
  logintime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth::mutable_logintime() {
  set_has_logintime();
  if (logintime_ == &::google::protobuf::internal::kEmptyString) {
    logintime_ = new ::std::string;
  }
  return logintime_;
}
inline ::std::string* CAccountAuth::release_logintime() {
  clear_has_logintime();
  if (logintime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = logintime_;
    logintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth::set_allocated_logintime(::std::string* logintime) {
  if (logintime_ != &::google::protobuf::internal::kEmptyString) {
    delete logintime_;
  }
  if (logintime) {
    set_has_logintime();
    logintime_ = logintime;
  } else {
    clear_has_logintime();
    logintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string LimitIP = 19;
inline bool CAccountAuth::has_limitip() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CAccountAuth::set_has_limitip() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CAccountAuth::clear_has_limitip() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CAccountAuth::clear_limitip() {
  if (limitip_ != &::google::protobuf::internal::kEmptyString) {
    limitip_->clear();
  }
  clear_has_limitip();
}
inline const ::std::string& CAccountAuth::limitip() const {
  return *limitip_;
}
inline void CAccountAuth::set_limitip(const ::std::string& value) {
  set_has_limitip();
  if (limitip_ == &::google::protobuf::internal::kEmptyString) {
    limitip_ = new ::std::string;
  }
  limitip_->assign(value);
}
inline void CAccountAuth::set_limitip(const char* value) {
  set_has_limitip();
  if (limitip_ == &::google::protobuf::internal::kEmptyString) {
    limitip_ = new ::std::string;
  }
  limitip_->assign(value);
}
inline void CAccountAuth::set_limitip(const char* value, size_t size) {
  set_has_limitip();
  if (limitip_ == &::google::protobuf::internal::kEmptyString) {
    limitip_ = new ::std::string;
  }
  limitip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth::mutable_limitip() {
  set_has_limitip();
  if (limitip_ == &::google::protobuf::internal::kEmptyString) {
    limitip_ = new ::std::string;
  }
  return limitip_;
}
inline ::std::string* CAccountAuth::release_limitip() {
  clear_has_limitip();
  if (limitip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = limitip_;
    limitip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth::set_allocated_limitip(::std::string* limitip) {
  if (limitip_ != &::google::protobuf::internal::kEmptyString) {
    delete limitip_;
  }
  if (limitip) {
    set_has_limitip();
    limitip_ = limitip;
  } else {
    clear_has_limitip();
    limitip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ModifyTime = 20;
inline bool CAccountAuth::has_modifytime() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CAccountAuth::set_has_modifytime() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CAccountAuth::clear_has_modifytime() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CAccountAuth::clear_modifytime() {
  if (modifytime_ != &::google::protobuf::internal::kEmptyString) {
    modifytime_->clear();
  }
  clear_has_modifytime();
}
inline const ::std::string& CAccountAuth::modifytime() const {
  return *modifytime_;
}
inline void CAccountAuth::set_modifytime(const ::std::string& value) {
  set_has_modifytime();
  if (modifytime_ == &::google::protobuf::internal::kEmptyString) {
    modifytime_ = new ::std::string;
  }
  modifytime_->assign(value);
}
inline void CAccountAuth::set_modifytime(const char* value) {
  set_has_modifytime();
  if (modifytime_ == &::google::protobuf::internal::kEmptyString) {
    modifytime_ = new ::std::string;
  }
  modifytime_->assign(value);
}
inline void CAccountAuth::set_modifytime(const char* value, size_t size) {
  set_has_modifytime();
  if (modifytime_ == &::google::protobuf::internal::kEmptyString) {
    modifytime_ = new ::std::string;
  }
  modifytime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth::mutable_modifytime() {
  set_has_modifytime();
  if (modifytime_ == &::google::protobuf::internal::kEmptyString) {
    modifytime_ = new ::std::string;
  }
  return modifytime_;
}
inline ::std::string* CAccountAuth::release_modifytime() {
  clear_has_modifytime();
  if (modifytime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = modifytime_;
    modifytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth::set_allocated_modifytime(::std::string* modifytime) {
  if (modifytime_ != &::google::protobuf::internal::kEmptyString) {
    delete modifytime_;
  }
  if (modifytime) {
    set_has_modifytime();
    modifytime_ = modifytime;
  } else {
    clear_has_modifytime();
    modifytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CAccountAuth_AccountPwd

// optional string AccountName = 1;
inline bool CAccountAuth_AccountPwd::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountAuth_AccountPwd::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountAuth_AccountPwd::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountAuth_AccountPwd::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& CAccountAuth_AccountPwd::accountname() const {
  return *accountname_;
}
inline void CAccountAuth_AccountPwd::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_AccountPwd::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_AccountPwd::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_AccountPwd::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* CAccountAuth_AccountPwd::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_AccountPwd::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string AccountPwd = 2;
inline bool CAccountAuth_AccountPwd::has_accountpwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountAuth_AccountPwd::set_has_accountpwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountAuth_AccountPwd::clear_has_accountpwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountAuth_AccountPwd::clear_accountpwd() {
  if (accountpwd_ != &::google::protobuf::internal::kEmptyString) {
    accountpwd_->clear();
  }
  clear_has_accountpwd();
}
inline const ::std::string& CAccountAuth_AccountPwd::accountpwd() const {
  return *accountpwd_;
}
inline void CAccountAuth_AccountPwd::set_accountpwd(const ::std::string& value) {
  set_has_accountpwd();
  if (accountpwd_ == &::google::protobuf::internal::kEmptyString) {
    accountpwd_ = new ::std::string;
  }
  accountpwd_->assign(value);
}
inline void CAccountAuth_AccountPwd::set_accountpwd(const char* value) {
  set_has_accountpwd();
  if (accountpwd_ == &::google::protobuf::internal::kEmptyString) {
    accountpwd_ = new ::std::string;
  }
  accountpwd_->assign(value);
}
inline void CAccountAuth_AccountPwd::set_accountpwd(const char* value, size_t size) {
  set_has_accountpwd();
  if (accountpwd_ == &::google::protobuf::internal::kEmptyString) {
    accountpwd_ = new ::std::string;
  }
  accountpwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_AccountPwd::mutable_accountpwd() {
  set_has_accountpwd();
  if (accountpwd_ == &::google::protobuf::internal::kEmptyString) {
    accountpwd_ = new ::std::string;
  }
  return accountpwd_;
}
inline ::std::string* CAccountAuth_AccountPwd::release_accountpwd() {
  clear_has_accountpwd();
  if (accountpwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountpwd_;
    accountpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_AccountPwd::set_allocated_accountpwd(::std::string* accountpwd) {
  if (accountpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete accountpwd_;
  }
  if (accountpwd) {
    set_has_accountpwd();
    accountpwd_ = accountpwd;
  } else {
    clear_has_accountpwd();
    accountpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CAccountAuth_AccountState

// optional string AccountName = 1;
inline bool CAccountAuth_AccountState::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountAuth_AccountState::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountAuth_AccountState::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountAuth_AccountState::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& CAccountAuth_AccountState::accountname() const {
  return *accountname_;
}
inline void CAccountAuth_AccountState::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_AccountState::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_AccountState::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_AccountState::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* CAccountAuth_AccountState::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_AccountState::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 AccountState = 2;
inline bool CAccountAuth_AccountState::has_accountstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountAuth_AccountState::set_has_accountstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountAuth_AccountState::clear_has_accountstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountAuth_AccountState::clear_accountstate() {
  accountstate_ = 0u;
  clear_has_accountstate();
}
inline ::google::protobuf::uint32 CAccountAuth_AccountState::accountstate() const {
  return accountstate_;
}
inline void CAccountAuth_AccountState::set_accountstate(::google::protobuf::uint32 value) {
  set_has_accountstate();
  accountstate_ = value;
}

// -------------------------------------------------------------------

// CAccountAuth_Permission

// optional string AccountName = 1;
inline bool CAccountAuth_Permission::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountAuth_Permission::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountAuth_Permission::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountAuth_Permission::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& CAccountAuth_Permission::accountname() const {
  return *accountname_;
}
inline void CAccountAuth_Permission::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_Permission::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_Permission::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_Permission::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* CAccountAuth_Permission::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_Permission::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 Permission = 2;
inline bool CAccountAuth_Permission::has_permission() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountAuth_Permission::set_has_permission() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountAuth_Permission::clear_has_permission() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountAuth_Permission::clear_permission() {
  permission_ = GOOGLE_ULONGLONG(0);
  clear_has_permission();
}
inline ::google::protobuf::uint64 CAccountAuth_Permission::permission() const {
  return permission_;
}
inline void CAccountAuth_Permission::set_permission(::google::protobuf::uint64 value) {
  set_has_permission();
  permission_ = value;
}

// -------------------------------------------------------------------

// CAccountAuth_Nickname

// optional string AccountName = 1;
inline bool CAccountAuth_Nickname::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountAuth_Nickname::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountAuth_Nickname::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountAuth_Nickname::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& CAccountAuth_Nickname::accountname() const {
  return *accountname_;
}
inline void CAccountAuth_Nickname::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_Nickname::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_Nickname::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_Nickname::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* CAccountAuth_Nickname::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_Nickname::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Nickname = 2;
inline bool CAccountAuth_Nickname::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountAuth_Nickname::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountAuth_Nickname::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountAuth_Nickname::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& CAccountAuth_Nickname::nickname() const {
  return *nickname_;
}
inline void CAccountAuth_Nickname::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void CAccountAuth_Nickname::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void CAccountAuth_Nickname::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_Nickname::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* CAccountAuth_Nickname::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_Nickname::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CAccountAuth_Email

// optional string AccountName = 1;
inline bool CAccountAuth_Email::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountAuth_Email::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountAuth_Email::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountAuth_Email::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& CAccountAuth_Email::accountname() const {
  return *accountname_;
}
inline void CAccountAuth_Email::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_Email::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_Email::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_Email::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* CAccountAuth_Email::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_Email::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Email = 2;
inline bool CAccountAuth_Email::has_email() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountAuth_Email::set_has_email() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountAuth_Email::clear_has_email() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountAuth_Email::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& CAccountAuth_Email::email() const {
  return *email_;
}
inline void CAccountAuth_Email::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void CAccountAuth_Email::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void CAccountAuth_Email::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_Email::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* CAccountAuth_Email::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_Email::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CAccountAuth_EmailAuth

// optional string AccountName = 1;
inline bool CAccountAuth_EmailAuth::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountAuth_EmailAuth::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountAuth_EmailAuth::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountAuth_EmailAuth::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& CAccountAuth_EmailAuth::accountname() const {
  return *accountname_;
}
inline void CAccountAuth_EmailAuth::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_EmailAuth::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_EmailAuth::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_EmailAuth::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* CAccountAuth_EmailAuth::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_EmailAuth::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 EmailAuth = 2;
inline bool CAccountAuth_EmailAuth::has_emailauth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountAuth_EmailAuth::set_has_emailauth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountAuth_EmailAuth::clear_has_emailauth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountAuth_EmailAuth::clear_emailauth() {
  emailauth_ = 0u;
  clear_has_emailauth();
}
inline ::google::protobuf::uint32 CAccountAuth_EmailAuth::emailauth() const {
  return emailauth_;
}
inline void CAccountAuth_EmailAuth::set_emailauth(::google::protobuf::uint32 value) {
  set_has_emailauth();
  emailauth_ = value;
}

// -------------------------------------------------------------------

// CAccountAuth_MobilePhone

// optional string AccountName = 1;
inline bool CAccountAuth_MobilePhone::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountAuth_MobilePhone::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountAuth_MobilePhone::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountAuth_MobilePhone::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& CAccountAuth_MobilePhone::accountname() const {
  return *accountname_;
}
inline void CAccountAuth_MobilePhone::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_MobilePhone::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_MobilePhone::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_MobilePhone::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* CAccountAuth_MobilePhone::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_MobilePhone::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string MobilePhone = 2;
inline bool CAccountAuth_MobilePhone::has_mobilephone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountAuth_MobilePhone::set_has_mobilephone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountAuth_MobilePhone::clear_has_mobilephone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountAuth_MobilePhone::clear_mobilephone() {
  if (mobilephone_ != &::google::protobuf::internal::kEmptyString) {
    mobilephone_->clear();
  }
  clear_has_mobilephone();
}
inline const ::std::string& CAccountAuth_MobilePhone::mobilephone() const {
  return *mobilephone_;
}
inline void CAccountAuth_MobilePhone::set_mobilephone(const ::std::string& value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::kEmptyString) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
}
inline void CAccountAuth_MobilePhone::set_mobilephone(const char* value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::kEmptyString) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
}
inline void CAccountAuth_MobilePhone::set_mobilephone(const char* value, size_t size) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::kEmptyString) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_MobilePhone::mutable_mobilephone() {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::kEmptyString) {
    mobilephone_ = new ::std::string;
  }
  return mobilephone_;
}
inline ::std::string* CAccountAuth_MobilePhone::release_mobilephone() {
  clear_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mobilephone_;
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_MobilePhone::set_allocated_mobilephone(::std::string* mobilephone) {
  if (mobilephone_ != &::google::protobuf::internal::kEmptyString) {
    delete mobilephone_;
  }
  if (mobilephone) {
    set_has_mobilephone();
    mobilephone_ = mobilephone;
  } else {
    clear_has_mobilephone();
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CAccountAuth_MobilePhoneAuth

// optional string AccountName = 1;
inline bool CAccountAuth_MobilePhoneAuth::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountAuth_MobilePhoneAuth::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountAuth_MobilePhoneAuth::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountAuth_MobilePhoneAuth::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& CAccountAuth_MobilePhoneAuth::accountname() const {
  return *accountname_;
}
inline void CAccountAuth_MobilePhoneAuth::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_MobilePhoneAuth::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_MobilePhoneAuth::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_MobilePhoneAuth::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* CAccountAuth_MobilePhoneAuth::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_MobilePhoneAuth::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 MobilePhoneAuth = 2;
inline bool CAccountAuth_MobilePhoneAuth::has_mobilephoneauth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountAuth_MobilePhoneAuth::set_has_mobilephoneauth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountAuth_MobilePhoneAuth::clear_has_mobilephoneauth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountAuth_MobilePhoneAuth::clear_mobilephoneauth() {
  mobilephoneauth_ = 0u;
  clear_has_mobilephoneauth();
}
inline ::google::protobuf::uint32 CAccountAuth_MobilePhoneAuth::mobilephoneauth() const {
  return mobilephoneauth_;
}
inline void CAccountAuth_MobilePhoneAuth::set_mobilephoneauth(::google::protobuf::uint32 value) {
  set_has_mobilephoneauth();
  mobilephoneauth_ = value;
}

// -------------------------------------------------------------------

// CAccountAuth_IDCard

// optional string AccountName = 1;
inline bool CAccountAuth_IDCard::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountAuth_IDCard::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountAuth_IDCard::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountAuth_IDCard::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& CAccountAuth_IDCard::accountname() const {
  return *accountname_;
}
inline void CAccountAuth_IDCard::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_IDCard::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_IDCard::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_IDCard::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* CAccountAuth_IDCard::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_IDCard::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string IDCard = 2;
inline bool CAccountAuth_IDCard::has_idcard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountAuth_IDCard::set_has_idcard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountAuth_IDCard::clear_has_idcard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountAuth_IDCard::clear_idcard() {
  if (idcard_ != &::google::protobuf::internal::kEmptyString) {
    idcard_->clear();
  }
  clear_has_idcard();
}
inline const ::std::string& CAccountAuth_IDCard::idcard() const {
  return *idcard_;
}
inline void CAccountAuth_IDCard::set_idcard(const ::std::string& value) {
  set_has_idcard();
  if (idcard_ == &::google::protobuf::internal::kEmptyString) {
    idcard_ = new ::std::string;
  }
  idcard_->assign(value);
}
inline void CAccountAuth_IDCard::set_idcard(const char* value) {
  set_has_idcard();
  if (idcard_ == &::google::protobuf::internal::kEmptyString) {
    idcard_ = new ::std::string;
  }
  idcard_->assign(value);
}
inline void CAccountAuth_IDCard::set_idcard(const char* value, size_t size) {
  set_has_idcard();
  if (idcard_ == &::google::protobuf::internal::kEmptyString) {
    idcard_ = new ::std::string;
  }
  idcard_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_IDCard::mutable_idcard() {
  set_has_idcard();
  if (idcard_ == &::google::protobuf::internal::kEmptyString) {
    idcard_ = new ::std::string;
  }
  return idcard_;
}
inline ::std::string* CAccountAuth_IDCard::release_idcard() {
  clear_has_idcard();
  if (idcard_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = idcard_;
    idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_IDCard::set_allocated_idcard(::std::string* idcard) {
  if (idcard_ != &::google::protobuf::internal::kEmptyString) {
    delete idcard_;
  }
  if (idcard) {
    set_has_idcard();
    idcard_ = idcard;
  } else {
    clear_has_idcard();
    idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CAccountAuth_IDCardAuth

// optional string AccountName = 1;
inline bool CAccountAuth_IDCardAuth::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountAuth_IDCardAuth::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountAuth_IDCardAuth::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountAuth_IDCardAuth::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& CAccountAuth_IDCardAuth::accountname() const {
  return *accountname_;
}
inline void CAccountAuth_IDCardAuth::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_IDCardAuth::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_IDCardAuth::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_IDCardAuth::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* CAccountAuth_IDCardAuth::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_IDCardAuth::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 IDCardAuth = 2;
inline bool CAccountAuth_IDCardAuth::has_idcardauth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountAuth_IDCardAuth::set_has_idcardauth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountAuth_IDCardAuth::clear_has_idcardauth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountAuth_IDCardAuth::clear_idcardauth() {
  idcardauth_ = 0u;
  clear_has_idcardauth();
}
inline ::google::protobuf::uint32 CAccountAuth_IDCardAuth::idcardauth() const {
  return idcardauth_;
}
inline void CAccountAuth_IDCardAuth::set_idcardauth(::google::protobuf::uint32 value) {
  set_has_idcardauth();
  idcardauth_ = value;
}

// -------------------------------------------------------------------

// CAccountAuth_Birthday

// optional string AccountName = 1;
inline bool CAccountAuth_Birthday::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountAuth_Birthday::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountAuth_Birthday::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountAuth_Birthday::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& CAccountAuth_Birthday::accountname() const {
  return *accountname_;
}
inline void CAccountAuth_Birthday::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_Birthday::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_Birthday::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_Birthday::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* CAccountAuth_Birthday::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_Birthday::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Birthday = 2;
inline bool CAccountAuth_Birthday::has_birthday() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountAuth_Birthday::set_has_birthday() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountAuth_Birthday::clear_has_birthday() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountAuth_Birthday::clear_birthday() {
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    birthday_->clear();
  }
  clear_has_birthday();
}
inline const ::std::string& CAccountAuth_Birthday::birthday() const {
  return *birthday_;
}
inline void CAccountAuth_Birthday::set_birthday(const ::std::string& value) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(value);
}
inline void CAccountAuth_Birthday::set_birthday(const char* value) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(value);
}
inline void CAccountAuth_Birthday::set_birthday(const char* value, size_t size) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_Birthday::mutable_birthday() {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  return birthday_;
}
inline ::std::string* CAccountAuth_Birthday::release_birthday() {
  clear_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = birthday_;
    birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_Birthday::set_allocated_birthday(::std::string* birthday) {
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    delete birthday_;
  }
  if (birthday) {
    set_has_birthday();
    birthday_ = birthday;
  } else {
    clear_has_birthday();
    birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CAccountAuth_LoginIP

// optional string AccountName = 1;
inline bool CAccountAuth_LoginIP::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountAuth_LoginIP::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountAuth_LoginIP::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountAuth_LoginIP::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& CAccountAuth_LoginIP::accountname() const {
  return *accountname_;
}
inline void CAccountAuth_LoginIP::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_LoginIP::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_LoginIP::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_LoginIP::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* CAccountAuth_LoginIP::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_LoginIP::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string LoginIP = 2;
inline bool CAccountAuth_LoginIP::has_loginip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountAuth_LoginIP::set_has_loginip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountAuth_LoginIP::clear_has_loginip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountAuth_LoginIP::clear_loginip() {
  if (loginip_ != &::google::protobuf::internal::kEmptyString) {
    loginip_->clear();
  }
  clear_has_loginip();
}
inline const ::std::string& CAccountAuth_LoginIP::loginip() const {
  return *loginip_;
}
inline void CAccountAuth_LoginIP::set_loginip(const ::std::string& value) {
  set_has_loginip();
  if (loginip_ == &::google::protobuf::internal::kEmptyString) {
    loginip_ = new ::std::string;
  }
  loginip_->assign(value);
}
inline void CAccountAuth_LoginIP::set_loginip(const char* value) {
  set_has_loginip();
  if (loginip_ == &::google::protobuf::internal::kEmptyString) {
    loginip_ = new ::std::string;
  }
  loginip_->assign(value);
}
inline void CAccountAuth_LoginIP::set_loginip(const char* value, size_t size) {
  set_has_loginip();
  if (loginip_ == &::google::protobuf::internal::kEmptyString) {
    loginip_ = new ::std::string;
  }
  loginip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_LoginIP::mutable_loginip() {
  set_has_loginip();
  if (loginip_ == &::google::protobuf::internal::kEmptyString) {
    loginip_ = new ::std::string;
  }
  return loginip_;
}
inline ::std::string* CAccountAuth_LoginIP::release_loginip() {
  clear_has_loginip();
  if (loginip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = loginip_;
    loginip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_LoginIP::set_allocated_loginip(::std::string* loginip) {
  if (loginip_ != &::google::protobuf::internal::kEmptyString) {
    delete loginip_;
  }
  if (loginip) {
    set_has_loginip();
    loginip_ = loginip;
  } else {
    clear_has_loginip();
    loginip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CAccountAuth_LoginTime

// optional string AccountName = 1;
inline bool CAccountAuth_LoginTime::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountAuth_LoginTime::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountAuth_LoginTime::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountAuth_LoginTime::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& CAccountAuth_LoginTime::accountname() const {
  return *accountname_;
}
inline void CAccountAuth_LoginTime::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_LoginTime::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_LoginTime::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_LoginTime::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* CAccountAuth_LoginTime::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_LoginTime::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string LoginTime = 2;
inline bool CAccountAuth_LoginTime::has_logintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountAuth_LoginTime::set_has_logintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountAuth_LoginTime::clear_has_logintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountAuth_LoginTime::clear_logintime() {
  if (logintime_ != &::google::protobuf::internal::kEmptyString) {
    logintime_->clear();
  }
  clear_has_logintime();
}
inline const ::std::string& CAccountAuth_LoginTime::logintime() const {
  return *logintime_;
}
inline void CAccountAuth_LoginTime::set_logintime(const ::std::string& value) {
  set_has_logintime();
  if (logintime_ == &::google::protobuf::internal::kEmptyString) {
    logintime_ = new ::std::string;
  }
  logintime_->assign(value);
}
inline void CAccountAuth_LoginTime::set_logintime(const char* value) {
  set_has_logintime();
  if (logintime_ == &::google::protobuf::internal::kEmptyString) {
    logintime_ = new ::std::string;
  }
  logintime_->assign(value);
}
inline void CAccountAuth_LoginTime::set_logintime(const char* value, size_t size) {
  set_has_logintime();
  if (logintime_ == &::google::protobuf::internal::kEmptyString) {
    logintime_ = new ::std::string;
  }
  logintime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_LoginTime::mutable_logintime() {
  set_has_logintime();
  if (logintime_ == &::google::protobuf::internal::kEmptyString) {
    logintime_ = new ::std::string;
  }
  return logintime_;
}
inline ::std::string* CAccountAuth_LoginTime::release_logintime() {
  clear_has_logintime();
  if (logintime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = logintime_;
    logintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_LoginTime::set_allocated_logintime(::std::string* logintime) {
  if (logintime_ != &::google::protobuf::internal::kEmptyString) {
    delete logintime_;
  }
  if (logintime) {
    set_has_logintime();
    logintime_ = logintime;
  } else {
    clear_has_logintime();
    logintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CAccountAuth_LimitIP

// optional string AccountName = 1;
inline bool CAccountAuth_LimitIP::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountAuth_LimitIP::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountAuth_LimitIP::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountAuth_LimitIP::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& CAccountAuth_LimitIP::accountname() const {
  return *accountname_;
}
inline void CAccountAuth_LimitIP::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_LimitIP::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountAuth_LimitIP::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_LimitIP::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* CAccountAuth_LimitIP::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_LimitIP::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string LimitIP = 2;
inline bool CAccountAuth_LimitIP::has_limitip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountAuth_LimitIP::set_has_limitip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountAuth_LimitIP::clear_has_limitip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountAuth_LimitIP::clear_limitip() {
  if (limitip_ != &::google::protobuf::internal::kEmptyString) {
    limitip_->clear();
  }
  clear_has_limitip();
}
inline const ::std::string& CAccountAuth_LimitIP::limitip() const {
  return *limitip_;
}
inline void CAccountAuth_LimitIP::set_limitip(const ::std::string& value) {
  set_has_limitip();
  if (limitip_ == &::google::protobuf::internal::kEmptyString) {
    limitip_ = new ::std::string;
  }
  limitip_->assign(value);
}
inline void CAccountAuth_LimitIP::set_limitip(const char* value) {
  set_has_limitip();
  if (limitip_ == &::google::protobuf::internal::kEmptyString) {
    limitip_ = new ::std::string;
  }
  limitip_->assign(value);
}
inline void CAccountAuth_LimitIP::set_limitip(const char* value, size_t size) {
  set_has_limitip();
  if (limitip_ == &::google::protobuf::internal::kEmptyString) {
    limitip_ = new ::std::string;
  }
  limitip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountAuth_LimitIP::mutable_limitip() {
  set_has_limitip();
  if (limitip_ == &::google::protobuf::internal::kEmptyString) {
    limitip_ = new ::std::string;
  }
  return limitip_;
}
inline ::std::string* CAccountAuth_LimitIP::release_limitip() {
  clear_has_limitip();
  if (limitip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = limitip_;
    limitip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountAuth_LimitIP::set_allocated_limitip(::std::string* limitip) {
  if (limitip_ != &::google::protobuf::internal::kEmptyString) {
    delete limitip_;
  }
  if (limitip) {
    set_has_limitip();
    limitip_ = limitip;
  } else {
    clear_has_limitip();
    limitip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CAccountAuthList

// repeated .PTBuf.CAccountAuth Objects = 1;
inline int CAccountAuthList::objects_size() const {
  return objects_.size();
}
inline void CAccountAuthList::clear_objects() {
  objects_.Clear();
}
inline const ::PTBuf::CAccountAuth& CAccountAuthList::objects(int index) const {
  return objects_.Get(index);
}
inline ::PTBuf::CAccountAuth* CAccountAuthList::mutable_objects(int index) {
  return objects_.Mutable(index);
}
inline ::PTBuf::CAccountAuth* CAccountAuthList::add_objects() {
  return objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PTBuf::CAccountAuth >&
CAccountAuthList::objects() const {
  return objects_;
}
inline ::google::protobuf::RepeatedPtrField< ::PTBuf::CAccountAuth >*
CAccountAuthList::mutable_objects() {
  return &objects_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PTBuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_accountAuth_2eproto__INCLUDED
