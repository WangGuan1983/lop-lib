// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: accountInfo.proto

#ifndef PROTOBUF_accountInfo_2eproto__INCLUDED
#define PROTOBUF_accountInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "baseDef.pb.h"
// @@protoc_insertion_point(includes)

namespace PTBuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_accountInfo_2eproto();
void protobuf_AssignDesc_accountInfo_2eproto();
void protobuf_ShutdownFile_accountInfo_2eproto();

class CAccountInfo;
class CAccountInfo_GroupList;
class CAccountInfo_ProjectList;
class CAccountInfoList;

// ===================================================================

class CAccountInfo : public ::google::protobuf::Message {
 public:
  CAccountInfo();
  virtual ~CAccountInfo();

  CAccountInfo(const CAccountInfo& from);

  inline CAccountInfo& operator=(const CAccountInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountInfo& default_instance();

  void Swap(CAccountInfo* other);

  // implements Message ----------------------------------------------

  CAccountInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountInfo& from);
  void MergeFrom(const CAccountInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 AccountID = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIDFieldNumber = 1;
  inline ::google::protobuf::uint64 accountid() const;
  inline void set_accountid(::google::protobuf::uint64 value);

  // optional string GroupList = 2;
  inline bool has_grouplist() const;
  inline void clear_grouplist();
  static const int kGroupListFieldNumber = 2;
  inline const ::std::string& grouplist() const;
  inline void set_grouplist(const ::std::string& value);
  inline void set_grouplist(const char* value);
  inline void set_grouplist(const char* value, size_t size);
  inline ::std::string* mutable_grouplist();
  inline ::std::string* release_grouplist();
  inline void set_allocated_grouplist(::std::string* grouplist);

  // optional string ProjectList = 3;
  inline bool has_projectlist() const;
  inline void clear_projectlist();
  static const int kProjectListFieldNumber = 3;
  inline const ::std::string& projectlist() const;
  inline void set_projectlist(const ::std::string& value);
  inline void set_projectlist(const char* value);
  inline void set_projectlist(const char* value, size_t size);
  inline ::std::string* mutable_projectlist();
  inline ::std::string* release_projectlist();
  inline void set_allocated_projectlist(::std::string* projectlist);

  // optional string ModifyTime = 4;
  inline bool has_modifytime() const;
  inline void clear_modifytime();
  static const int kModifyTimeFieldNumber = 4;
  inline const ::std::string& modifytime() const;
  inline void set_modifytime(const ::std::string& value);
  inline void set_modifytime(const char* value);
  inline void set_modifytime(const char* value, size_t size);
  inline ::std::string* mutable_modifytime();
  inline ::std::string* release_modifytime();
  inline void set_allocated_modifytime(::std::string* modifytime);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountInfo)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_grouplist();
  inline void clear_has_grouplist();
  inline void set_has_projectlist();
  inline void clear_has_projectlist();
  inline void set_has_modifytime();
  inline void clear_has_modifytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 accountid_;
  ::std::string* grouplist_;
  ::std::string* projectlist_;
  ::std::string* modifytime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_accountInfo_2eproto();
  friend void protobuf_AssignDesc_accountInfo_2eproto();
  friend void protobuf_ShutdownFile_accountInfo_2eproto();

  void InitAsDefaultInstance();
  static CAccountInfo* default_instance_;
};
// -------------------------------------------------------------------

class CAccountInfo_GroupList : public ::google::protobuf::Message {
 public:
  CAccountInfo_GroupList();
  virtual ~CAccountInfo_GroupList();

  CAccountInfo_GroupList(const CAccountInfo_GroupList& from);

  inline CAccountInfo_GroupList& operator=(const CAccountInfo_GroupList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountInfo_GroupList& default_instance();

  void Swap(CAccountInfo_GroupList* other);

  // implements Message ----------------------------------------------

  CAccountInfo_GroupList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountInfo_GroupList& from);
  void MergeFrom(const CAccountInfo_GroupList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 AccountID = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIDFieldNumber = 1;
  inline ::google::protobuf::uint64 accountid() const;
  inline void set_accountid(::google::protobuf::uint64 value);

  // optional string GroupList = 2;
  inline bool has_grouplist() const;
  inline void clear_grouplist();
  static const int kGroupListFieldNumber = 2;
  inline const ::std::string& grouplist() const;
  inline void set_grouplist(const ::std::string& value);
  inline void set_grouplist(const char* value);
  inline void set_grouplist(const char* value, size_t size);
  inline ::std::string* mutable_grouplist();
  inline ::std::string* release_grouplist();
  inline void set_allocated_grouplist(::std::string* grouplist);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountInfo_GroupList)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_grouplist();
  inline void clear_has_grouplist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 accountid_;
  ::std::string* grouplist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_accountInfo_2eproto();
  friend void protobuf_AssignDesc_accountInfo_2eproto();
  friend void protobuf_ShutdownFile_accountInfo_2eproto();

  void InitAsDefaultInstance();
  static CAccountInfo_GroupList* default_instance_;
};
// -------------------------------------------------------------------

class CAccountInfo_ProjectList : public ::google::protobuf::Message {
 public:
  CAccountInfo_ProjectList();
  virtual ~CAccountInfo_ProjectList();

  CAccountInfo_ProjectList(const CAccountInfo_ProjectList& from);

  inline CAccountInfo_ProjectList& operator=(const CAccountInfo_ProjectList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountInfo_ProjectList& default_instance();

  void Swap(CAccountInfo_ProjectList* other);

  // implements Message ----------------------------------------------

  CAccountInfo_ProjectList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountInfo_ProjectList& from);
  void MergeFrom(const CAccountInfo_ProjectList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 AccountID = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIDFieldNumber = 1;
  inline ::google::protobuf::uint64 accountid() const;
  inline void set_accountid(::google::protobuf::uint64 value);

  // optional string ProjectList = 2;
  inline bool has_projectlist() const;
  inline void clear_projectlist();
  static const int kProjectListFieldNumber = 2;
  inline const ::std::string& projectlist() const;
  inline void set_projectlist(const ::std::string& value);
  inline void set_projectlist(const char* value);
  inline void set_projectlist(const char* value, size_t size);
  inline ::std::string* mutable_projectlist();
  inline ::std::string* release_projectlist();
  inline void set_allocated_projectlist(::std::string* projectlist);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountInfo_ProjectList)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_projectlist();
  inline void clear_has_projectlist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 accountid_;
  ::std::string* projectlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_accountInfo_2eproto();
  friend void protobuf_AssignDesc_accountInfo_2eproto();
  friend void protobuf_ShutdownFile_accountInfo_2eproto();

  void InitAsDefaultInstance();
  static CAccountInfo_ProjectList* default_instance_;
};
// -------------------------------------------------------------------

class CAccountInfoList : public ::google::protobuf::Message {
 public:
  CAccountInfoList();
  virtual ~CAccountInfoList();

  CAccountInfoList(const CAccountInfoList& from);

  inline CAccountInfoList& operator=(const CAccountInfoList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountInfoList& default_instance();

  void Swap(CAccountInfoList* other);

  // implements Message ----------------------------------------------

  CAccountInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountInfoList& from);
  void MergeFrom(const CAccountInfoList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PTBuf.CAccountInfo Objects = 1;
  inline int objects_size() const;
  inline void clear_objects();
  static const int kObjectsFieldNumber = 1;
  inline const ::PTBuf::CAccountInfo& objects(int index) const;
  inline ::PTBuf::CAccountInfo* mutable_objects(int index);
  inline ::PTBuf::CAccountInfo* add_objects();
  inline const ::google::protobuf::RepeatedPtrField< ::PTBuf::CAccountInfo >&
      objects() const;
  inline ::google::protobuf::RepeatedPtrField< ::PTBuf::CAccountInfo >*
      mutable_objects();

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountInfoList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PTBuf::CAccountInfo > objects_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_accountInfo_2eproto();
  friend void protobuf_AssignDesc_accountInfo_2eproto();
  friend void protobuf_ShutdownFile_accountInfo_2eproto();

  void InitAsDefaultInstance();
  static CAccountInfoList* default_instance_;
};
// ===================================================================


// ===================================================================

// CAccountInfo

// optional uint64 AccountID = 1;
inline bool CAccountInfo::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountInfo::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountInfo::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountInfo::clear_accountid() {
  accountid_ = GOOGLE_ULONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::uint64 CAccountInfo::accountid() const {
  return accountid_;
}
inline void CAccountInfo::set_accountid(::google::protobuf::uint64 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional string GroupList = 2;
inline bool CAccountInfo::has_grouplist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountInfo::set_has_grouplist() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountInfo::clear_has_grouplist() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountInfo::clear_grouplist() {
  if (grouplist_ != &::google::protobuf::internal::kEmptyString) {
    grouplist_->clear();
  }
  clear_has_grouplist();
}
inline const ::std::string& CAccountInfo::grouplist() const {
  return *grouplist_;
}
inline void CAccountInfo::set_grouplist(const ::std::string& value) {
  set_has_grouplist();
  if (grouplist_ == &::google::protobuf::internal::kEmptyString) {
    grouplist_ = new ::std::string;
  }
  grouplist_->assign(value);
}
inline void CAccountInfo::set_grouplist(const char* value) {
  set_has_grouplist();
  if (grouplist_ == &::google::protobuf::internal::kEmptyString) {
    grouplist_ = new ::std::string;
  }
  grouplist_->assign(value);
}
inline void CAccountInfo::set_grouplist(const char* value, size_t size) {
  set_has_grouplist();
  if (grouplist_ == &::google::protobuf::internal::kEmptyString) {
    grouplist_ = new ::std::string;
  }
  grouplist_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountInfo::mutable_grouplist() {
  set_has_grouplist();
  if (grouplist_ == &::google::protobuf::internal::kEmptyString) {
    grouplist_ = new ::std::string;
  }
  return grouplist_;
}
inline ::std::string* CAccountInfo::release_grouplist() {
  clear_has_grouplist();
  if (grouplist_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = grouplist_;
    grouplist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountInfo::set_allocated_grouplist(::std::string* grouplist) {
  if (grouplist_ != &::google::protobuf::internal::kEmptyString) {
    delete grouplist_;
  }
  if (grouplist) {
    set_has_grouplist();
    grouplist_ = grouplist;
  } else {
    clear_has_grouplist();
    grouplist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ProjectList = 3;
inline bool CAccountInfo::has_projectlist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CAccountInfo::set_has_projectlist() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CAccountInfo::clear_has_projectlist() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CAccountInfo::clear_projectlist() {
  if (projectlist_ != &::google::protobuf::internal::kEmptyString) {
    projectlist_->clear();
  }
  clear_has_projectlist();
}
inline const ::std::string& CAccountInfo::projectlist() const {
  return *projectlist_;
}
inline void CAccountInfo::set_projectlist(const ::std::string& value) {
  set_has_projectlist();
  if (projectlist_ == &::google::protobuf::internal::kEmptyString) {
    projectlist_ = new ::std::string;
  }
  projectlist_->assign(value);
}
inline void CAccountInfo::set_projectlist(const char* value) {
  set_has_projectlist();
  if (projectlist_ == &::google::protobuf::internal::kEmptyString) {
    projectlist_ = new ::std::string;
  }
  projectlist_->assign(value);
}
inline void CAccountInfo::set_projectlist(const char* value, size_t size) {
  set_has_projectlist();
  if (projectlist_ == &::google::protobuf::internal::kEmptyString) {
    projectlist_ = new ::std::string;
  }
  projectlist_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountInfo::mutable_projectlist() {
  set_has_projectlist();
  if (projectlist_ == &::google::protobuf::internal::kEmptyString) {
    projectlist_ = new ::std::string;
  }
  return projectlist_;
}
inline ::std::string* CAccountInfo::release_projectlist() {
  clear_has_projectlist();
  if (projectlist_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = projectlist_;
    projectlist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountInfo::set_allocated_projectlist(::std::string* projectlist) {
  if (projectlist_ != &::google::protobuf::internal::kEmptyString) {
    delete projectlist_;
  }
  if (projectlist) {
    set_has_projectlist();
    projectlist_ = projectlist;
  } else {
    clear_has_projectlist();
    projectlist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ModifyTime = 4;
inline bool CAccountInfo::has_modifytime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CAccountInfo::set_has_modifytime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CAccountInfo::clear_has_modifytime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CAccountInfo::clear_modifytime() {
  if (modifytime_ != &::google::protobuf::internal::kEmptyString) {
    modifytime_->clear();
  }
  clear_has_modifytime();
}
inline const ::std::string& CAccountInfo::modifytime() const {
  return *modifytime_;
}
inline void CAccountInfo::set_modifytime(const ::std::string& value) {
  set_has_modifytime();
  if (modifytime_ == &::google::protobuf::internal::kEmptyString) {
    modifytime_ = new ::std::string;
  }
  modifytime_->assign(value);
}
inline void CAccountInfo::set_modifytime(const char* value) {
  set_has_modifytime();
  if (modifytime_ == &::google::protobuf::internal::kEmptyString) {
    modifytime_ = new ::std::string;
  }
  modifytime_->assign(value);
}
inline void CAccountInfo::set_modifytime(const char* value, size_t size) {
  set_has_modifytime();
  if (modifytime_ == &::google::protobuf::internal::kEmptyString) {
    modifytime_ = new ::std::string;
  }
  modifytime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountInfo::mutable_modifytime() {
  set_has_modifytime();
  if (modifytime_ == &::google::protobuf::internal::kEmptyString) {
    modifytime_ = new ::std::string;
  }
  return modifytime_;
}
inline ::std::string* CAccountInfo::release_modifytime() {
  clear_has_modifytime();
  if (modifytime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = modifytime_;
    modifytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountInfo::set_allocated_modifytime(::std::string* modifytime) {
  if (modifytime_ != &::google::protobuf::internal::kEmptyString) {
    delete modifytime_;
  }
  if (modifytime) {
    set_has_modifytime();
    modifytime_ = modifytime;
  } else {
    clear_has_modifytime();
    modifytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CAccountInfo_GroupList

// optional uint64 AccountID = 1;
inline bool CAccountInfo_GroupList::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountInfo_GroupList::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountInfo_GroupList::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountInfo_GroupList::clear_accountid() {
  accountid_ = GOOGLE_ULONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::uint64 CAccountInfo_GroupList::accountid() const {
  return accountid_;
}
inline void CAccountInfo_GroupList::set_accountid(::google::protobuf::uint64 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional string GroupList = 2;
inline bool CAccountInfo_GroupList::has_grouplist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountInfo_GroupList::set_has_grouplist() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountInfo_GroupList::clear_has_grouplist() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountInfo_GroupList::clear_grouplist() {
  if (grouplist_ != &::google::protobuf::internal::kEmptyString) {
    grouplist_->clear();
  }
  clear_has_grouplist();
}
inline const ::std::string& CAccountInfo_GroupList::grouplist() const {
  return *grouplist_;
}
inline void CAccountInfo_GroupList::set_grouplist(const ::std::string& value) {
  set_has_grouplist();
  if (grouplist_ == &::google::protobuf::internal::kEmptyString) {
    grouplist_ = new ::std::string;
  }
  grouplist_->assign(value);
}
inline void CAccountInfo_GroupList::set_grouplist(const char* value) {
  set_has_grouplist();
  if (grouplist_ == &::google::protobuf::internal::kEmptyString) {
    grouplist_ = new ::std::string;
  }
  grouplist_->assign(value);
}
inline void CAccountInfo_GroupList::set_grouplist(const char* value, size_t size) {
  set_has_grouplist();
  if (grouplist_ == &::google::protobuf::internal::kEmptyString) {
    grouplist_ = new ::std::string;
  }
  grouplist_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountInfo_GroupList::mutable_grouplist() {
  set_has_grouplist();
  if (grouplist_ == &::google::protobuf::internal::kEmptyString) {
    grouplist_ = new ::std::string;
  }
  return grouplist_;
}
inline ::std::string* CAccountInfo_GroupList::release_grouplist() {
  clear_has_grouplist();
  if (grouplist_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = grouplist_;
    grouplist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountInfo_GroupList::set_allocated_grouplist(::std::string* grouplist) {
  if (grouplist_ != &::google::protobuf::internal::kEmptyString) {
    delete grouplist_;
  }
  if (grouplist) {
    set_has_grouplist();
    grouplist_ = grouplist;
  } else {
    clear_has_grouplist();
    grouplist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CAccountInfo_ProjectList

// optional uint64 AccountID = 1;
inline bool CAccountInfo_ProjectList::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountInfo_ProjectList::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountInfo_ProjectList::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountInfo_ProjectList::clear_accountid() {
  accountid_ = GOOGLE_ULONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::uint64 CAccountInfo_ProjectList::accountid() const {
  return accountid_;
}
inline void CAccountInfo_ProjectList::set_accountid(::google::protobuf::uint64 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional string ProjectList = 2;
inline bool CAccountInfo_ProjectList::has_projectlist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountInfo_ProjectList::set_has_projectlist() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountInfo_ProjectList::clear_has_projectlist() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountInfo_ProjectList::clear_projectlist() {
  if (projectlist_ != &::google::protobuf::internal::kEmptyString) {
    projectlist_->clear();
  }
  clear_has_projectlist();
}
inline const ::std::string& CAccountInfo_ProjectList::projectlist() const {
  return *projectlist_;
}
inline void CAccountInfo_ProjectList::set_projectlist(const ::std::string& value) {
  set_has_projectlist();
  if (projectlist_ == &::google::protobuf::internal::kEmptyString) {
    projectlist_ = new ::std::string;
  }
  projectlist_->assign(value);
}
inline void CAccountInfo_ProjectList::set_projectlist(const char* value) {
  set_has_projectlist();
  if (projectlist_ == &::google::protobuf::internal::kEmptyString) {
    projectlist_ = new ::std::string;
  }
  projectlist_->assign(value);
}
inline void CAccountInfo_ProjectList::set_projectlist(const char* value, size_t size) {
  set_has_projectlist();
  if (projectlist_ == &::google::protobuf::internal::kEmptyString) {
    projectlist_ = new ::std::string;
  }
  projectlist_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountInfo_ProjectList::mutable_projectlist() {
  set_has_projectlist();
  if (projectlist_ == &::google::protobuf::internal::kEmptyString) {
    projectlist_ = new ::std::string;
  }
  return projectlist_;
}
inline ::std::string* CAccountInfo_ProjectList::release_projectlist() {
  clear_has_projectlist();
  if (projectlist_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = projectlist_;
    projectlist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountInfo_ProjectList::set_allocated_projectlist(::std::string* projectlist) {
  if (projectlist_ != &::google::protobuf::internal::kEmptyString) {
    delete projectlist_;
  }
  if (projectlist) {
    set_has_projectlist();
    projectlist_ = projectlist;
  } else {
    clear_has_projectlist();
    projectlist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CAccountInfoList

// repeated .PTBuf.CAccountInfo Objects = 1;
inline int CAccountInfoList::objects_size() const {
  return objects_.size();
}
inline void CAccountInfoList::clear_objects() {
  objects_.Clear();
}
inline const ::PTBuf::CAccountInfo& CAccountInfoList::objects(int index) const {
  return objects_.Get(index);
}
inline ::PTBuf::CAccountInfo* CAccountInfoList::mutable_objects(int index) {
  return objects_.Mutable(index);
}
inline ::PTBuf::CAccountInfo* CAccountInfoList::add_objects() {
  return objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PTBuf::CAccountInfo >&
CAccountInfoList::objects() const {
  return objects_;
}
inline ::google::protobuf::RepeatedPtrField< ::PTBuf::CAccountInfo >*
CAccountInfoList::mutable_objects() {
  return &objects_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PTBuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_accountInfo_2eproto__INCLUDED
