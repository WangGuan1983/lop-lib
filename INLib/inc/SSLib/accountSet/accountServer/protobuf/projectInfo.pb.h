// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: projectInfo.proto

#ifndef PROTOBUF_projectInfo_2eproto__INCLUDED
#define PROTOBUF_projectInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "baseDef.pb.h"
// @@protoc_insertion_point(includes)

namespace PTBuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_projectInfo_2eproto();
void protobuf_AssignDesc_projectInfo_2eproto();
void protobuf_ShutdownFile_projectInfo_2eproto();

class CProjectInfo;
class CProjectInfo_AccountID;
class CProjectInfo_ProjectType;
class CProjectInfo_ProjectState;
class CProjectInfo_Members;
class CProjectInfoList;

// ===================================================================

class CProjectInfo : public ::google::protobuf::Message {
 public:
  CProjectInfo();
  virtual ~CProjectInfo();

  CProjectInfo(const CProjectInfo& from);

  inline CProjectInfo& operator=(const CProjectInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProjectInfo& default_instance();

  void Swap(CProjectInfo* other);

  // implements Message ----------------------------------------------

  CProjectInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProjectInfo& from);
  void MergeFrom(const CProjectInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ProjectID = 1;
  inline bool has_projectid() const;
  inline void clear_projectid();
  static const int kProjectIDFieldNumber = 1;
  inline ::google::protobuf::uint64 projectid() const;
  inline void set_projectid(::google::protobuf::uint64 value);

  // optional string ProjectName = 2;
  inline bool has_projectname() const;
  inline void clear_projectname();
  static const int kProjectNameFieldNumber = 2;
  inline const ::std::string& projectname() const;
  inline void set_projectname(const ::std::string& value);
  inline void set_projectname(const char* value);
  inline void set_projectname(const char* value, size_t size);
  inline ::std::string* mutable_projectname();
  inline ::std::string* release_projectname();
  inline void set_allocated_projectname(::std::string* projectname);

  // optional uint64 AccountID = 3;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIDFieldNumber = 3;
  inline ::google::protobuf::uint64 accountid() const;
  inline void set_accountid(::google::protobuf::uint64 value);

  // optional uint32 ProjectType = 4;
  inline bool has_projecttype() const;
  inline void clear_projecttype();
  static const int kProjectTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 projecttype() const;
  inline void set_projecttype(::google::protobuf::uint32 value);

  // optional uint32 ProjectState = 5;
  inline bool has_projectstate() const;
  inline void clear_projectstate();
  static const int kProjectStateFieldNumber = 5;
  inline ::google::protobuf::uint32 projectstate() const;
  inline void set_projectstate(::google::protobuf::uint32 value);

  // optional string Members = 6;
  inline bool has_members() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 6;
  inline const ::std::string& members() const;
  inline void set_members(const ::std::string& value);
  inline void set_members(const char* value);
  inline void set_members(const char* value, size_t size);
  inline ::std::string* mutable_members();
  inline ::std::string* release_members();
  inline void set_allocated_members(::std::string* members);

  // optional string ModifyTime = 7;
  inline bool has_modifytime() const;
  inline void clear_modifytime();
  static const int kModifyTimeFieldNumber = 7;
  inline const ::std::string& modifytime() const;
  inline void set_modifytime(const ::std::string& value);
  inline void set_modifytime(const char* value);
  inline void set_modifytime(const char* value, size_t size);
  inline ::std::string* mutable_modifytime();
  inline ::std::string* release_modifytime();
  inline void set_allocated_modifytime(::std::string* modifytime);

  // @@protoc_insertion_point(class_scope:PTBuf.CProjectInfo)
 private:
  inline void set_has_projectid();
  inline void clear_has_projectid();
  inline void set_has_projectname();
  inline void clear_has_projectname();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_projecttype();
  inline void clear_has_projecttype();
  inline void set_has_projectstate();
  inline void clear_has_projectstate();
  inline void set_has_members();
  inline void clear_has_members();
  inline void set_has_modifytime();
  inline void clear_has_modifytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 projectid_;
  ::std::string* projectname_;
  ::google::protobuf::uint64 accountid_;
  ::google::protobuf::uint32 projecttype_;
  ::google::protobuf::uint32 projectstate_;
  ::std::string* members_;
  ::std::string* modifytime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_projectInfo_2eproto();
  friend void protobuf_AssignDesc_projectInfo_2eproto();
  friend void protobuf_ShutdownFile_projectInfo_2eproto();

  void InitAsDefaultInstance();
  static CProjectInfo* default_instance_;
};
// -------------------------------------------------------------------

class CProjectInfo_AccountID : public ::google::protobuf::Message {
 public:
  CProjectInfo_AccountID();
  virtual ~CProjectInfo_AccountID();

  CProjectInfo_AccountID(const CProjectInfo_AccountID& from);

  inline CProjectInfo_AccountID& operator=(const CProjectInfo_AccountID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProjectInfo_AccountID& default_instance();

  void Swap(CProjectInfo_AccountID* other);

  // implements Message ----------------------------------------------

  CProjectInfo_AccountID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProjectInfo_AccountID& from);
  void MergeFrom(const CProjectInfo_AccountID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ProjectName = 1;
  inline bool has_projectname() const;
  inline void clear_projectname();
  static const int kProjectNameFieldNumber = 1;
  inline const ::std::string& projectname() const;
  inline void set_projectname(const ::std::string& value);
  inline void set_projectname(const char* value);
  inline void set_projectname(const char* value, size_t size);
  inline ::std::string* mutable_projectname();
  inline ::std::string* release_projectname();
  inline void set_allocated_projectname(::std::string* projectname);

  // optional uint64 AccountID = 2;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIDFieldNumber = 2;
  inline ::google::protobuf::uint64 accountid() const;
  inline void set_accountid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:PTBuf.CProjectInfo_AccountID)
 private:
  inline void set_has_projectname();
  inline void clear_has_projectname();
  inline void set_has_accountid();
  inline void clear_has_accountid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* projectname_;
  ::google::protobuf::uint64 accountid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_projectInfo_2eproto();
  friend void protobuf_AssignDesc_projectInfo_2eproto();
  friend void protobuf_ShutdownFile_projectInfo_2eproto();

  void InitAsDefaultInstance();
  static CProjectInfo_AccountID* default_instance_;
};
// -------------------------------------------------------------------

class CProjectInfo_ProjectType : public ::google::protobuf::Message {
 public:
  CProjectInfo_ProjectType();
  virtual ~CProjectInfo_ProjectType();

  CProjectInfo_ProjectType(const CProjectInfo_ProjectType& from);

  inline CProjectInfo_ProjectType& operator=(const CProjectInfo_ProjectType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProjectInfo_ProjectType& default_instance();

  void Swap(CProjectInfo_ProjectType* other);

  // implements Message ----------------------------------------------

  CProjectInfo_ProjectType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProjectInfo_ProjectType& from);
  void MergeFrom(const CProjectInfo_ProjectType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ProjectName = 1;
  inline bool has_projectname() const;
  inline void clear_projectname();
  static const int kProjectNameFieldNumber = 1;
  inline const ::std::string& projectname() const;
  inline void set_projectname(const ::std::string& value);
  inline void set_projectname(const char* value);
  inline void set_projectname(const char* value, size_t size);
  inline ::std::string* mutable_projectname();
  inline ::std::string* release_projectname();
  inline void set_allocated_projectname(::std::string* projectname);

  // optional uint32 ProjectType = 2;
  inline bool has_projecttype() const;
  inline void clear_projecttype();
  static const int kProjectTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 projecttype() const;
  inline void set_projecttype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PTBuf.CProjectInfo_ProjectType)
 private:
  inline void set_has_projectname();
  inline void clear_has_projectname();
  inline void set_has_projecttype();
  inline void clear_has_projecttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* projectname_;
  ::google::protobuf::uint32 projecttype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_projectInfo_2eproto();
  friend void protobuf_AssignDesc_projectInfo_2eproto();
  friend void protobuf_ShutdownFile_projectInfo_2eproto();

  void InitAsDefaultInstance();
  static CProjectInfo_ProjectType* default_instance_;
};
// -------------------------------------------------------------------

class CProjectInfo_ProjectState : public ::google::protobuf::Message {
 public:
  CProjectInfo_ProjectState();
  virtual ~CProjectInfo_ProjectState();

  CProjectInfo_ProjectState(const CProjectInfo_ProjectState& from);

  inline CProjectInfo_ProjectState& operator=(const CProjectInfo_ProjectState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProjectInfo_ProjectState& default_instance();

  void Swap(CProjectInfo_ProjectState* other);

  // implements Message ----------------------------------------------

  CProjectInfo_ProjectState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProjectInfo_ProjectState& from);
  void MergeFrom(const CProjectInfo_ProjectState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ProjectName = 1;
  inline bool has_projectname() const;
  inline void clear_projectname();
  static const int kProjectNameFieldNumber = 1;
  inline const ::std::string& projectname() const;
  inline void set_projectname(const ::std::string& value);
  inline void set_projectname(const char* value);
  inline void set_projectname(const char* value, size_t size);
  inline ::std::string* mutable_projectname();
  inline ::std::string* release_projectname();
  inline void set_allocated_projectname(::std::string* projectname);

  // optional uint32 ProjectState = 2;
  inline bool has_projectstate() const;
  inline void clear_projectstate();
  static const int kProjectStateFieldNumber = 2;
  inline ::google::protobuf::uint32 projectstate() const;
  inline void set_projectstate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PTBuf.CProjectInfo_ProjectState)
 private:
  inline void set_has_projectname();
  inline void clear_has_projectname();
  inline void set_has_projectstate();
  inline void clear_has_projectstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* projectname_;
  ::google::protobuf::uint32 projectstate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_projectInfo_2eproto();
  friend void protobuf_AssignDesc_projectInfo_2eproto();
  friend void protobuf_ShutdownFile_projectInfo_2eproto();

  void InitAsDefaultInstance();
  static CProjectInfo_ProjectState* default_instance_;
};
// -------------------------------------------------------------------

class CProjectInfo_Members : public ::google::protobuf::Message {
 public:
  CProjectInfo_Members();
  virtual ~CProjectInfo_Members();

  CProjectInfo_Members(const CProjectInfo_Members& from);

  inline CProjectInfo_Members& operator=(const CProjectInfo_Members& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProjectInfo_Members& default_instance();

  void Swap(CProjectInfo_Members* other);

  // implements Message ----------------------------------------------

  CProjectInfo_Members* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProjectInfo_Members& from);
  void MergeFrom(const CProjectInfo_Members& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ProjectName = 1;
  inline bool has_projectname() const;
  inline void clear_projectname();
  static const int kProjectNameFieldNumber = 1;
  inline const ::std::string& projectname() const;
  inline void set_projectname(const ::std::string& value);
  inline void set_projectname(const char* value);
  inline void set_projectname(const char* value, size_t size);
  inline ::std::string* mutable_projectname();
  inline ::std::string* release_projectname();
  inline void set_allocated_projectname(::std::string* projectname);

  // optional string Members = 2;
  inline bool has_members() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 2;
  inline const ::std::string& members() const;
  inline void set_members(const ::std::string& value);
  inline void set_members(const char* value);
  inline void set_members(const char* value, size_t size);
  inline ::std::string* mutable_members();
  inline ::std::string* release_members();
  inline void set_allocated_members(::std::string* members);

  // @@protoc_insertion_point(class_scope:PTBuf.CProjectInfo_Members)
 private:
  inline void set_has_projectname();
  inline void clear_has_projectname();
  inline void set_has_members();
  inline void clear_has_members();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* projectname_;
  ::std::string* members_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_projectInfo_2eproto();
  friend void protobuf_AssignDesc_projectInfo_2eproto();
  friend void protobuf_ShutdownFile_projectInfo_2eproto();

  void InitAsDefaultInstance();
  static CProjectInfo_Members* default_instance_;
};
// -------------------------------------------------------------------

class CProjectInfoList : public ::google::protobuf::Message {
 public:
  CProjectInfoList();
  virtual ~CProjectInfoList();

  CProjectInfoList(const CProjectInfoList& from);

  inline CProjectInfoList& operator=(const CProjectInfoList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProjectInfoList& default_instance();

  void Swap(CProjectInfoList* other);

  // implements Message ----------------------------------------------

  CProjectInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProjectInfoList& from);
  void MergeFrom(const CProjectInfoList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PTBuf.CProjectInfo Objects = 1;
  inline int objects_size() const;
  inline void clear_objects();
  static const int kObjectsFieldNumber = 1;
  inline const ::PTBuf::CProjectInfo& objects(int index) const;
  inline ::PTBuf::CProjectInfo* mutable_objects(int index);
  inline ::PTBuf::CProjectInfo* add_objects();
  inline const ::google::protobuf::RepeatedPtrField< ::PTBuf::CProjectInfo >&
      objects() const;
  inline ::google::protobuf::RepeatedPtrField< ::PTBuf::CProjectInfo >*
      mutable_objects();

  // @@protoc_insertion_point(class_scope:PTBuf.CProjectInfoList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PTBuf::CProjectInfo > objects_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_projectInfo_2eproto();
  friend void protobuf_AssignDesc_projectInfo_2eproto();
  friend void protobuf_ShutdownFile_projectInfo_2eproto();

  void InitAsDefaultInstance();
  static CProjectInfoList* default_instance_;
};
// ===================================================================


// ===================================================================

// CProjectInfo

// optional uint64 ProjectID = 1;
inline bool CProjectInfo::has_projectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProjectInfo::set_has_projectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProjectInfo::clear_has_projectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProjectInfo::clear_projectid() {
  projectid_ = GOOGLE_ULONGLONG(0);
  clear_has_projectid();
}
inline ::google::protobuf::uint64 CProjectInfo::projectid() const {
  return projectid_;
}
inline void CProjectInfo::set_projectid(::google::protobuf::uint64 value) {
  set_has_projectid();
  projectid_ = value;
}

// optional string ProjectName = 2;
inline bool CProjectInfo::has_projectname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProjectInfo::set_has_projectname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProjectInfo::clear_has_projectname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProjectInfo::clear_projectname() {
  if (projectname_ != &::google::protobuf::internal::kEmptyString) {
    projectname_->clear();
  }
  clear_has_projectname();
}
inline const ::std::string& CProjectInfo::projectname() const {
  return *projectname_;
}
inline void CProjectInfo::set_projectname(const ::std::string& value) {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  projectname_->assign(value);
}
inline void CProjectInfo::set_projectname(const char* value) {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  projectname_->assign(value);
}
inline void CProjectInfo::set_projectname(const char* value, size_t size) {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  projectname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectInfo::mutable_projectname() {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  return projectname_;
}
inline ::std::string* CProjectInfo::release_projectname() {
  clear_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = projectname_;
    projectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectInfo::set_allocated_projectname(::std::string* projectname) {
  if (projectname_ != &::google::protobuf::internal::kEmptyString) {
    delete projectname_;
  }
  if (projectname) {
    set_has_projectname();
    projectname_ = projectname;
  } else {
    clear_has_projectname();
    projectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 AccountID = 3;
inline bool CProjectInfo::has_accountid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CProjectInfo::set_has_accountid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CProjectInfo::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CProjectInfo::clear_accountid() {
  accountid_ = GOOGLE_ULONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::uint64 CProjectInfo::accountid() const {
  return accountid_;
}
inline void CProjectInfo::set_accountid(::google::protobuf::uint64 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional uint32 ProjectType = 4;
inline bool CProjectInfo::has_projecttype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CProjectInfo::set_has_projecttype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CProjectInfo::clear_has_projecttype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CProjectInfo::clear_projecttype() {
  projecttype_ = 0u;
  clear_has_projecttype();
}
inline ::google::protobuf::uint32 CProjectInfo::projecttype() const {
  return projecttype_;
}
inline void CProjectInfo::set_projecttype(::google::protobuf::uint32 value) {
  set_has_projecttype();
  projecttype_ = value;
}

// optional uint32 ProjectState = 5;
inline bool CProjectInfo::has_projectstate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CProjectInfo::set_has_projectstate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CProjectInfo::clear_has_projectstate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CProjectInfo::clear_projectstate() {
  projectstate_ = 0u;
  clear_has_projectstate();
}
inline ::google::protobuf::uint32 CProjectInfo::projectstate() const {
  return projectstate_;
}
inline void CProjectInfo::set_projectstate(::google::protobuf::uint32 value) {
  set_has_projectstate();
  projectstate_ = value;
}

// optional string Members = 6;
inline bool CProjectInfo::has_members() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CProjectInfo::set_has_members() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CProjectInfo::clear_has_members() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CProjectInfo::clear_members() {
  if (members_ != &::google::protobuf::internal::kEmptyString) {
    members_->clear();
  }
  clear_has_members();
}
inline const ::std::string& CProjectInfo::members() const {
  return *members_;
}
inline void CProjectInfo::set_members(const ::std::string& value) {
  set_has_members();
  if (members_ == &::google::protobuf::internal::kEmptyString) {
    members_ = new ::std::string;
  }
  members_->assign(value);
}
inline void CProjectInfo::set_members(const char* value) {
  set_has_members();
  if (members_ == &::google::protobuf::internal::kEmptyString) {
    members_ = new ::std::string;
  }
  members_->assign(value);
}
inline void CProjectInfo::set_members(const char* value, size_t size) {
  set_has_members();
  if (members_ == &::google::protobuf::internal::kEmptyString) {
    members_ = new ::std::string;
  }
  members_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectInfo::mutable_members() {
  set_has_members();
  if (members_ == &::google::protobuf::internal::kEmptyString) {
    members_ = new ::std::string;
  }
  return members_;
}
inline ::std::string* CProjectInfo::release_members() {
  clear_has_members();
  if (members_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = members_;
    members_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectInfo::set_allocated_members(::std::string* members) {
  if (members_ != &::google::protobuf::internal::kEmptyString) {
    delete members_;
  }
  if (members) {
    set_has_members();
    members_ = members;
  } else {
    clear_has_members();
    members_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ModifyTime = 7;
inline bool CProjectInfo::has_modifytime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CProjectInfo::set_has_modifytime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CProjectInfo::clear_has_modifytime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CProjectInfo::clear_modifytime() {
  if (modifytime_ != &::google::protobuf::internal::kEmptyString) {
    modifytime_->clear();
  }
  clear_has_modifytime();
}
inline const ::std::string& CProjectInfo::modifytime() const {
  return *modifytime_;
}
inline void CProjectInfo::set_modifytime(const ::std::string& value) {
  set_has_modifytime();
  if (modifytime_ == &::google::protobuf::internal::kEmptyString) {
    modifytime_ = new ::std::string;
  }
  modifytime_->assign(value);
}
inline void CProjectInfo::set_modifytime(const char* value) {
  set_has_modifytime();
  if (modifytime_ == &::google::protobuf::internal::kEmptyString) {
    modifytime_ = new ::std::string;
  }
  modifytime_->assign(value);
}
inline void CProjectInfo::set_modifytime(const char* value, size_t size) {
  set_has_modifytime();
  if (modifytime_ == &::google::protobuf::internal::kEmptyString) {
    modifytime_ = new ::std::string;
  }
  modifytime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectInfo::mutable_modifytime() {
  set_has_modifytime();
  if (modifytime_ == &::google::protobuf::internal::kEmptyString) {
    modifytime_ = new ::std::string;
  }
  return modifytime_;
}
inline ::std::string* CProjectInfo::release_modifytime() {
  clear_has_modifytime();
  if (modifytime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = modifytime_;
    modifytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectInfo::set_allocated_modifytime(::std::string* modifytime) {
  if (modifytime_ != &::google::protobuf::internal::kEmptyString) {
    delete modifytime_;
  }
  if (modifytime) {
    set_has_modifytime();
    modifytime_ = modifytime;
  } else {
    clear_has_modifytime();
    modifytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CProjectInfo_AccountID

// optional string ProjectName = 1;
inline bool CProjectInfo_AccountID::has_projectname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProjectInfo_AccountID::set_has_projectname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProjectInfo_AccountID::clear_has_projectname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProjectInfo_AccountID::clear_projectname() {
  if (projectname_ != &::google::protobuf::internal::kEmptyString) {
    projectname_->clear();
  }
  clear_has_projectname();
}
inline const ::std::string& CProjectInfo_AccountID::projectname() const {
  return *projectname_;
}
inline void CProjectInfo_AccountID::set_projectname(const ::std::string& value) {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  projectname_->assign(value);
}
inline void CProjectInfo_AccountID::set_projectname(const char* value) {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  projectname_->assign(value);
}
inline void CProjectInfo_AccountID::set_projectname(const char* value, size_t size) {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  projectname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectInfo_AccountID::mutable_projectname() {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  return projectname_;
}
inline ::std::string* CProjectInfo_AccountID::release_projectname() {
  clear_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = projectname_;
    projectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectInfo_AccountID::set_allocated_projectname(::std::string* projectname) {
  if (projectname_ != &::google::protobuf::internal::kEmptyString) {
    delete projectname_;
  }
  if (projectname) {
    set_has_projectname();
    projectname_ = projectname;
  } else {
    clear_has_projectname();
    projectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 AccountID = 2;
inline bool CProjectInfo_AccountID::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProjectInfo_AccountID::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProjectInfo_AccountID::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProjectInfo_AccountID::clear_accountid() {
  accountid_ = GOOGLE_ULONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::uint64 CProjectInfo_AccountID::accountid() const {
  return accountid_;
}
inline void CProjectInfo_AccountID::set_accountid(::google::protobuf::uint64 value) {
  set_has_accountid();
  accountid_ = value;
}

// -------------------------------------------------------------------

// CProjectInfo_ProjectType

// optional string ProjectName = 1;
inline bool CProjectInfo_ProjectType::has_projectname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProjectInfo_ProjectType::set_has_projectname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProjectInfo_ProjectType::clear_has_projectname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProjectInfo_ProjectType::clear_projectname() {
  if (projectname_ != &::google::protobuf::internal::kEmptyString) {
    projectname_->clear();
  }
  clear_has_projectname();
}
inline const ::std::string& CProjectInfo_ProjectType::projectname() const {
  return *projectname_;
}
inline void CProjectInfo_ProjectType::set_projectname(const ::std::string& value) {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  projectname_->assign(value);
}
inline void CProjectInfo_ProjectType::set_projectname(const char* value) {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  projectname_->assign(value);
}
inline void CProjectInfo_ProjectType::set_projectname(const char* value, size_t size) {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  projectname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectInfo_ProjectType::mutable_projectname() {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  return projectname_;
}
inline ::std::string* CProjectInfo_ProjectType::release_projectname() {
  clear_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = projectname_;
    projectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectInfo_ProjectType::set_allocated_projectname(::std::string* projectname) {
  if (projectname_ != &::google::protobuf::internal::kEmptyString) {
    delete projectname_;
  }
  if (projectname) {
    set_has_projectname();
    projectname_ = projectname;
  } else {
    clear_has_projectname();
    projectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ProjectType = 2;
inline bool CProjectInfo_ProjectType::has_projecttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProjectInfo_ProjectType::set_has_projecttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProjectInfo_ProjectType::clear_has_projecttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProjectInfo_ProjectType::clear_projecttype() {
  projecttype_ = 0u;
  clear_has_projecttype();
}
inline ::google::protobuf::uint32 CProjectInfo_ProjectType::projecttype() const {
  return projecttype_;
}
inline void CProjectInfo_ProjectType::set_projecttype(::google::protobuf::uint32 value) {
  set_has_projecttype();
  projecttype_ = value;
}

// -------------------------------------------------------------------

// CProjectInfo_ProjectState

// optional string ProjectName = 1;
inline bool CProjectInfo_ProjectState::has_projectname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProjectInfo_ProjectState::set_has_projectname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProjectInfo_ProjectState::clear_has_projectname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProjectInfo_ProjectState::clear_projectname() {
  if (projectname_ != &::google::protobuf::internal::kEmptyString) {
    projectname_->clear();
  }
  clear_has_projectname();
}
inline const ::std::string& CProjectInfo_ProjectState::projectname() const {
  return *projectname_;
}
inline void CProjectInfo_ProjectState::set_projectname(const ::std::string& value) {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  projectname_->assign(value);
}
inline void CProjectInfo_ProjectState::set_projectname(const char* value) {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  projectname_->assign(value);
}
inline void CProjectInfo_ProjectState::set_projectname(const char* value, size_t size) {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  projectname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectInfo_ProjectState::mutable_projectname() {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  return projectname_;
}
inline ::std::string* CProjectInfo_ProjectState::release_projectname() {
  clear_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = projectname_;
    projectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectInfo_ProjectState::set_allocated_projectname(::std::string* projectname) {
  if (projectname_ != &::google::protobuf::internal::kEmptyString) {
    delete projectname_;
  }
  if (projectname) {
    set_has_projectname();
    projectname_ = projectname;
  } else {
    clear_has_projectname();
    projectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ProjectState = 2;
inline bool CProjectInfo_ProjectState::has_projectstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProjectInfo_ProjectState::set_has_projectstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProjectInfo_ProjectState::clear_has_projectstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProjectInfo_ProjectState::clear_projectstate() {
  projectstate_ = 0u;
  clear_has_projectstate();
}
inline ::google::protobuf::uint32 CProjectInfo_ProjectState::projectstate() const {
  return projectstate_;
}
inline void CProjectInfo_ProjectState::set_projectstate(::google::protobuf::uint32 value) {
  set_has_projectstate();
  projectstate_ = value;
}

// -------------------------------------------------------------------

// CProjectInfo_Members

// optional string ProjectName = 1;
inline bool CProjectInfo_Members::has_projectname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProjectInfo_Members::set_has_projectname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProjectInfo_Members::clear_has_projectname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProjectInfo_Members::clear_projectname() {
  if (projectname_ != &::google::protobuf::internal::kEmptyString) {
    projectname_->clear();
  }
  clear_has_projectname();
}
inline const ::std::string& CProjectInfo_Members::projectname() const {
  return *projectname_;
}
inline void CProjectInfo_Members::set_projectname(const ::std::string& value) {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  projectname_->assign(value);
}
inline void CProjectInfo_Members::set_projectname(const char* value) {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  projectname_->assign(value);
}
inline void CProjectInfo_Members::set_projectname(const char* value, size_t size) {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  projectname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectInfo_Members::mutable_projectname() {
  set_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    projectname_ = new ::std::string;
  }
  return projectname_;
}
inline ::std::string* CProjectInfo_Members::release_projectname() {
  clear_has_projectname();
  if (projectname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = projectname_;
    projectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectInfo_Members::set_allocated_projectname(::std::string* projectname) {
  if (projectname_ != &::google::protobuf::internal::kEmptyString) {
    delete projectname_;
  }
  if (projectname) {
    set_has_projectname();
    projectname_ = projectname;
  } else {
    clear_has_projectname();
    projectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Members = 2;
inline bool CProjectInfo_Members::has_members() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProjectInfo_Members::set_has_members() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProjectInfo_Members::clear_has_members() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProjectInfo_Members::clear_members() {
  if (members_ != &::google::protobuf::internal::kEmptyString) {
    members_->clear();
  }
  clear_has_members();
}
inline const ::std::string& CProjectInfo_Members::members() const {
  return *members_;
}
inline void CProjectInfo_Members::set_members(const ::std::string& value) {
  set_has_members();
  if (members_ == &::google::protobuf::internal::kEmptyString) {
    members_ = new ::std::string;
  }
  members_->assign(value);
}
inline void CProjectInfo_Members::set_members(const char* value) {
  set_has_members();
  if (members_ == &::google::protobuf::internal::kEmptyString) {
    members_ = new ::std::string;
  }
  members_->assign(value);
}
inline void CProjectInfo_Members::set_members(const char* value, size_t size) {
  set_has_members();
  if (members_ == &::google::protobuf::internal::kEmptyString) {
    members_ = new ::std::string;
  }
  members_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectInfo_Members::mutable_members() {
  set_has_members();
  if (members_ == &::google::protobuf::internal::kEmptyString) {
    members_ = new ::std::string;
  }
  return members_;
}
inline ::std::string* CProjectInfo_Members::release_members() {
  clear_has_members();
  if (members_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = members_;
    members_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectInfo_Members::set_allocated_members(::std::string* members) {
  if (members_ != &::google::protobuf::internal::kEmptyString) {
    delete members_;
  }
  if (members) {
    set_has_members();
    members_ = members;
  } else {
    clear_has_members();
    members_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CProjectInfoList

// repeated .PTBuf.CProjectInfo Objects = 1;
inline int CProjectInfoList::objects_size() const {
  return objects_.size();
}
inline void CProjectInfoList::clear_objects() {
  objects_.Clear();
}
inline const ::PTBuf::CProjectInfo& CProjectInfoList::objects(int index) const {
  return objects_.Get(index);
}
inline ::PTBuf::CProjectInfo* CProjectInfoList::mutable_objects(int index) {
  return objects_.Mutable(index);
}
inline ::PTBuf::CProjectInfo* CProjectInfoList::add_objects() {
  return objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PTBuf::CProjectInfo >&
CProjectInfoList::objects() const {
  return objects_;
}
inline ::google::protobuf::RepeatedPtrField< ::PTBuf::CProjectInfo >*
CProjectInfoList::mutable_objects() {
  return &objects_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PTBuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_projectInfo_2eproto__INCLUDED
