// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: projectServer.proto

#ifndef PROTOBUF_projectServer_2eproto__INCLUDED
#define PROTOBUF_projectServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "baseDef.pb.h"
// @@protoc_insertion_point(includes)

namespace PTBuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_projectServer_2eproto();
void protobuf_AssignDesc_projectServer_2eproto();
void protobuf_ShutdownFile_projectServer_2eproto();

class CProjectServer;
class CProjectServer_PlatformName;
class CProjectServer_ChannelName;
class CProjectServer_DeviceType;
class CProjectServer_Version;
class CProjectServer_ServerID;
class CProjectServer_ServerName;
class CProjectServer_ServerAddr;
class CProjectServer_ServerType;
class CProjectServer_ServerState;
class CProjectServer_ServerIndex;
class CProjectServer_WhiteAddr;
class CProjectServer_OpenState;
class CProjectServer_Members;
class CProjectServerList;

// ===================================================================

class CProjectServer : public ::google::protobuf::Message {
 public:
  CProjectServer();
  virtual ~CProjectServer();

  CProjectServer(const CProjectServer& from);

  inline CProjectServer& operator=(const CProjectServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProjectServer& default_instance();

  void Swap(CProjectServer* other);

  // implements Message ----------------------------------------------

  CProjectServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProjectServer& from);
  void MergeFrom(const CProjectServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ProjectID = 1;
  inline bool has_projectid() const;
  inline void clear_projectid();
  static const int kProjectIDFieldNumber = 1;
  inline ::google::protobuf::uint64 projectid() const;
  inline void set_projectid(::google::protobuf::uint64 value);

  // optional string PlatformName = 2;
  inline bool has_platformname() const;
  inline void clear_platformname();
  static const int kPlatformNameFieldNumber = 2;
  inline const ::std::string& platformname() const;
  inline void set_platformname(const ::std::string& value);
  inline void set_platformname(const char* value);
  inline void set_platformname(const char* value, size_t size);
  inline ::std::string* mutable_platformname();
  inline ::std::string* release_platformname();
  inline void set_allocated_platformname(::std::string* platformname);

  // optional string ChannelName = 3;
  inline bool has_channelname() const;
  inline void clear_channelname();
  static const int kChannelNameFieldNumber = 3;
  inline const ::std::string& channelname() const;
  inline void set_channelname(const ::std::string& value);
  inline void set_channelname(const char* value);
  inline void set_channelname(const char* value, size_t size);
  inline ::std::string* mutable_channelname();
  inline ::std::string* release_channelname();
  inline void set_allocated_channelname(::std::string* channelname);

  // optional uint32 DeviceType = 4;
  inline bool has_devicetype() const;
  inline void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 devicetype() const;
  inline void set_devicetype(::google::protobuf::uint32 value);

  // optional string Version = 5;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 5;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional uint32 ServerID = 6;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIDFieldNumber = 6;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // optional string ServerName = 7;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServerNameFieldNumber = 7;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const char* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  inline void set_allocated_servername(::std::string* servername);

  // optional string ServerAddr = 8;
  inline bool has_serveraddr() const;
  inline void clear_serveraddr();
  static const int kServerAddrFieldNumber = 8;
  inline const ::std::string& serveraddr() const;
  inline void set_serveraddr(const ::std::string& value);
  inline void set_serveraddr(const char* value);
  inline void set_serveraddr(const char* value, size_t size);
  inline ::std::string* mutable_serveraddr();
  inline ::std::string* release_serveraddr();
  inline void set_allocated_serveraddr(::std::string* serveraddr);

  // optional uint32 ServerType = 9;
  inline bool has_servertype() const;
  inline void clear_servertype();
  static const int kServerTypeFieldNumber = 9;
  inline ::google::protobuf::uint32 servertype() const;
  inline void set_servertype(::google::protobuf::uint32 value);

  // optional uint32 ServerState = 10;
  inline bool has_serverstate() const;
  inline void clear_serverstate();
  static const int kServerStateFieldNumber = 10;
  inline ::google::protobuf::uint32 serverstate() const;
  inline void set_serverstate(::google::protobuf::uint32 value);

  // optional uint32 ServerIndex = 11;
  inline bool has_serverindex() const;
  inline void clear_serverindex();
  static const int kServerIndexFieldNumber = 11;
  inline ::google::protobuf::uint32 serverindex() const;
  inline void set_serverindex(::google::protobuf::uint32 value);

  // optional string WhiteAddr = 12;
  inline bool has_whiteaddr() const;
  inline void clear_whiteaddr();
  static const int kWhiteAddrFieldNumber = 12;
  inline const ::std::string& whiteaddr() const;
  inline void set_whiteaddr(const ::std::string& value);
  inline void set_whiteaddr(const char* value);
  inline void set_whiteaddr(const char* value, size_t size);
  inline ::std::string* mutable_whiteaddr();
  inline ::std::string* release_whiteaddr();
  inline void set_allocated_whiteaddr(::std::string* whiteaddr);

  // optional uint32 OpenState = 13;
  inline bool has_openstate() const;
  inline void clear_openstate();
  static const int kOpenStateFieldNumber = 13;
  inline ::google::protobuf::uint32 openstate() const;
  inline void set_openstate(::google::protobuf::uint32 value);

  // optional string Members = 14;
  inline bool has_members() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 14;
  inline const ::std::string& members() const;
  inline void set_members(const ::std::string& value);
  inline void set_members(const char* value);
  inline void set_members(const char* value, size_t size);
  inline ::std::string* mutable_members();
  inline ::std::string* release_members();
  inline void set_allocated_members(::std::string* members);

  // optional string ModifyTime = 15;
  inline bool has_modifytime() const;
  inline void clear_modifytime();
  static const int kModifyTimeFieldNumber = 15;
  inline const ::std::string& modifytime() const;
  inline void set_modifytime(const ::std::string& value);
  inline void set_modifytime(const char* value);
  inline void set_modifytime(const char* value, size_t size);
  inline ::std::string* mutable_modifytime();
  inline ::std::string* release_modifytime();
  inline void set_allocated_modifytime(::std::string* modifytime);

  // @@protoc_insertion_point(class_scope:PTBuf.CProjectServer)
 private:
  inline void set_has_projectid();
  inline void clear_has_projectid();
  inline void set_has_platformname();
  inline void clear_has_platformname();
  inline void set_has_channelname();
  inline void clear_has_channelname();
  inline void set_has_devicetype();
  inline void clear_has_devicetype();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_serveraddr();
  inline void clear_has_serveraddr();
  inline void set_has_servertype();
  inline void clear_has_servertype();
  inline void set_has_serverstate();
  inline void clear_has_serverstate();
  inline void set_has_serverindex();
  inline void clear_has_serverindex();
  inline void set_has_whiteaddr();
  inline void clear_has_whiteaddr();
  inline void set_has_openstate();
  inline void clear_has_openstate();
  inline void set_has_members();
  inline void clear_has_members();
  inline void set_has_modifytime();
  inline void clear_has_modifytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 projectid_;
  ::std::string* platformname_;
  ::std::string* channelname_;
  ::std::string* version_;
  ::google::protobuf::uint32 devicetype_;
  ::google::protobuf::uint32 serverid_;
  ::std::string* servername_;
  ::std::string* serveraddr_;
  ::google::protobuf::uint32 servertype_;
  ::google::protobuf::uint32 serverstate_;
  ::std::string* whiteaddr_;
  ::google::protobuf::uint32 serverindex_;
  ::google::protobuf::uint32 openstate_;
  ::std::string* members_;
  ::std::string* modifytime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_projectServer_2eproto();
  friend void protobuf_AssignDesc_projectServer_2eproto();
  friend void protobuf_ShutdownFile_projectServer_2eproto();

  void InitAsDefaultInstance();
  static CProjectServer* default_instance_;
};
// -------------------------------------------------------------------

class CProjectServer_PlatformName : public ::google::protobuf::Message {
 public:
  CProjectServer_PlatformName();
  virtual ~CProjectServer_PlatformName();

  CProjectServer_PlatformName(const CProjectServer_PlatformName& from);

  inline CProjectServer_PlatformName& operator=(const CProjectServer_PlatformName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProjectServer_PlatformName& default_instance();

  void Swap(CProjectServer_PlatformName* other);

  // implements Message ----------------------------------------------

  CProjectServer_PlatformName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProjectServer_PlatformName& from);
  void MergeFrom(const CProjectServer_PlatformName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ProjectID = 1;
  inline bool has_projectid() const;
  inline void clear_projectid();
  static const int kProjectIDFieldNumber = 1;
  inline ::google::protobuf::uint64 projectid() const;
  inline void set_projectid(::google::protobuf::uint64 value);

  // optional string PlatformName = 2;
  inline bool has_platformname() const;
  inline void clear_platformname();
  static const int kPlatformNameFieldNumber = 2;
  inline const ::std::string& platformname() const;
  inline void set_platformname(const ::std::string& value);
  inline void set_platformname(const char* value);
  inline void set_platformname(const char* value, size_t size);
  inline ::std::string* mutable_platformname();
  inline ::std::string* release_platformname();
  inline void set_allocated_platformname(::std::string* platformname);

  // @@protoc_insertion_point(class_scope:PTBuf.CProjectServer_PlatformName)
 private:
  inline void set_has_projectid();
  inline void clear_has_projectid();
  inline void set_has_platformname();
  inline void clear_has_platformname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 projectid_;
  ::std::string* platformname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_projectServer_2eproto();
  friend void protobuf_AssignDesc_projectServer_2eproto();
  friend void protobuf_ShutdownFile_projectServer_2eproto();

  void InitAsDefaultInstance();
  static CProjectServer_PlatformName* default_instance_;
};
// -------------------------------------------------------------------

class CProjectServer_ChannelName : public ::google::protobuf::Message {
 public:
  CProjectServer_ChannelName();
  virtual ~CProjectServer_ChannelName();

  CProjectServer_ChannelName(const CProjectServer_ChannelName& from);

  inline CProjectServer_ChannelName& operator=(const CProjectServer_ChannelName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProjectServer_ChannelName& default_instance();

  void Swap(CProjectServer_ChannelName* other);

  // implements Message ----------------------------------------------

  CProjectServer_ChannelName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProjectServer_ChannelName& from);
  void MergeFrom(const CProjectServer_ChannelName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ProjectID = 1;
  inline bool has_projectid() const;
  inline void clear_projectid();
  static const int kProjectIDFieldNumber = 1;
  inline ::google::protobuf::uint64 projectid() const;
  inline void set_projectid(::google::protobuf::uint64 value);

  // optional string ChannelName = 2;
  inline bool has_channelname() const;
  inline void clear_channelname();
  static const int kChannelNameFieldNumber = 2;
  inline const ::std::string& channelname() const;
  inline void set_channelname(const ::std::string& value);
  inline void set_channelname(const char* value);
  inline void set_channelname(const char* value, size_t size);
  inline ::std::string* mutable_channelname();
  inline ::std::string* release_channelname();
  inline void set_allocated_channelname(::std::string* channelname);

  // @@protoc_insertion_point(class_scope:PTBuf.CProjectServer_ChannelName)
 private:
  inline void set_has_projectid();
  inline void clear_has_projectid();
  inline void set_has_channelname();
  inline void clear_has_channelname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 projectid_;
  ::std::string* channelname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_projectServer_2eproto();
  friend void protobuf_AssignDesc_projectServer_2eproto();
  friend void protobuf_ShutdownFile_projectServer_2eproto();

  void InitAsDefaultInstance();
  static CProjectServer_ChannelName* default_instance_;
};
// -------------------------------------------------------------------

class CProjectServer_DeviceType : public ::google::protobuf::Message {
 public:
  CProjectServer_DeviceType();
  virtual ~CProjectServer_DeviceType();

  CProjectServer_DeviceType(const CProjectServer_DeviceType& from);

  inline CProjectServer_DeviceType& operator=(const CProjectServer_DeviceType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProjectServer_DeviceType& default_instance();

  void Swap(CProjectServer_DeviceType* other);

  // implements Message ----------------------------------------------

  CProjectServer_DeviceType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProjectServer_DeviceType& from);
  void MergeFrom(const CProjectServer_DeviceType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ProjectID = 1;
  inline bool has_projectid() const;
  inline void clear_projectid();
  static const int kProjectIDFieldNumber = 1;
  inline ::google::protobuf::uint64 projectid() const;
  inline void set_projectid(::google::protobuf::uint64 value);

  // optional uint32 DeviceType = 2;
  inline bool has_devicetype() const;
  inline void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 devicetype() const;
  inline void set_devicetype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PTBuf.CProjectServer_DeviceType)
 private:
  inline void set_has_projectid();
  inline void clear_has_projectid();
  inline void set_has_devicetype();
  inline void clear_has_devicetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 projectid_;
  ::google::protobuf::uint32 devicetype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_projectServer_2eproto();
  friend void protobuf_AssignDesc_projectServer_2eproto();
  friend void protobuf_ShutdownFile_projectServer_2eproto();

  void InitAsDefaultInstance();
  static CProjectServer_DeviceType* default_instance_;
};
// -------------------------------------------------------------------

class CProjectServer_Version : public ::google::protobuf::Message {
 public:
  CProjectServer_Version();
  virtual ~CProjectServer_Version();

  CProjectServer_Version(const CProjectServer_Version& from);

  inline CProjectServer_Version& operator=(const CProjectServer_Version& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProjectServer_Version& default_instance();

  void Swap(CProjectServer_Version* other);

  // implements Message ----------------------------------------------

  CProjectServer_Version* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProjectServer_Version& from);
  void MergeFrom(const CProjectServer_Version& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ProjectID = 1;
  inline bool has_projectid() const;
  inline void clear_projectid();
  static const int kProjectIDFieldNumber = 1;
  inline ::google::protobuf::uint64 projectid() const;
  inline void set_projectid(::google::protobuf::uint64 value);

  // optional string Version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:PTBuf.CProjectServer_Version)
 private:
  inline void set_has_projectid();
  inline void clear_has_projectid();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 projectid_;
  ::std::string* version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_projectServer_2eproto();
  friend void protobuf_AssignDesc_projectServer_2eproto();
  friend void protobuf_ShutdownFile_projectServer_2eproto();

  void InitAsDefaultInstance();
  static CProjectServer_Version* default_instance_;
};
// -------------------------------------------------------------------

class CProjectServer_ServerID : public ::google::protobuf::Message {
 public:
  CProjectServer_ServerID();
  virtual ~CProjectServer_ServerID();

  CProjectServer_ServerID(const CProjectServer_ServerID& from);

  inline CProjectServer_ServerID& operator=(const CProjectServer_ServerID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProjectServer_ServerID& default_instance();

  void Swap(CProjectServer_ServerID* other);

  // implements Message ----------------------------------------------

  CProjectServer_ServerID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProjectServer_ServerID& from);
  void MergeFrom(const CProjectServer_ServerID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ProjectID = 1;
  inline bool has_projectid() const;
  inline void clear_projectid();
  static const int kProjectIDFieldNumber = 1;
  inline ::google::protobuf::uint64 projectid() const;
  inline void set_projectid(::google::protobuf::uint64 value);

  // optional uint32 ServerID = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIDFieldNumber = 2;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PTBuf.CProjectServer_ServerID)
 private:
  inline void set_has_projectid();
  inline void clear_has_projectid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 projectid_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_projectServer_2eproto();
  friend void protobuf_AssignDesc_projectServer_2eproto();
  friend void protobuf_ShutdownFile_projectServer_2eproto();

  void InitAsDefaultInstance();
  static CProjectServer_ServerID* default_instance_;
};
// -------------------------------------------------------------------

class CProjectServer_ServerName : public ::google::protobuf::Message {
 public:
  CProjectServer_ServerName();
  virtual ~CProjectServer_ServerName();

  CProjectServer_ServerName(const CProjectServer_ServerName& from);

  inline CProjectServer_ServerName& operator=(const CProjectServer_ServerName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProjectServer_ServerName& default_instance();

  void Swap(CProjectServer_ServerName* other);

  // implements Message ----------------------------------------------

  CProjectServer_ServerName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProjectServer_ServerName& from);
  void MergeFrom(const CProjectServer_ServerName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ProjectID = 1;
  inline bool has_projectid() const;
  inline void clear_projectid();
  static const int kProjectIDFieldNumber = 1;
  inline ::google::protobuf::uint64 projectid() const;
  inline void set_projectid(::google::protobuf::uint64 value);

  // optional string ServerName = 2;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServerNameFieldNumber = 2;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const char* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  inline void set_allocated_servername(::std::string* servername);

  // @@protoc_insertion_point(class_scope:PTBuf.CProjectServer_ServerName)
 private:
  inline void set_has_projectid();
  inline void clear_has_projectid();
  inline void set_has_servername();
  inline void clear_has_servername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 projectid_;
  ::std::string* servername_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_projectServer_2eproto();
  friend void protobuf_AssignDesc_projectServer_2eproto();
  friend void protobuf_ShutdownFile_projectServer_2eproto();

  void InitAsDefaultInstance();
  static CProjectServer_ServerName* default_instance_;
};
// -------------------------------------------------------------------

class CProjectServer_ServerAddr : public ::google::protobuf::Message {
 public:
  CProjectServer_ServerAddr();
  virtual ~CProjectServer_ServerAddr();

  CProjectServer_ServerAddr(const CProjectServer_ServerAddr& from);

  inline CProjectServer_ServerAddr& operator=(const CProjectServer_ServerAddr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProjectServer_ServerAddr& default_instance();

  void Swap(CProjectServer_ServerAddr* other);

  // implements Message ----------------------------------------------

  CProjectServer_ServerAddr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProjectServer_ServerAddr& from);
  void MergeFrom(const CProjectServer_ServerAddr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ProjectID = 1;
  inline bool has_projectid() const;
  inline void clear_projectid();
  static const int kProjectIDFieldNumber = 1;
  inline ::google::protobuf::uint64 projectid() const;
  inline void set_projectid(::google::protobuf::uint64 value);

  // optional string ServerAddr = 2;
  inline bool has_serveraddr() const;
  inline void clear_serveraddr();
  static const int kServerAddrFieldNumber = 2;
  inline const ::std::string& serveraddr() const;
  inline void set_serveraddr(const ::std::string& value);
  inline void set_serveraddr(const char* value);
  inline void set_serveraddr(const char* value, size_t size);
  inline ::std::string* mutable_serveraddr();
  inline ::std::string* release_serveraddr();
  inline void set_allocated_serveraddr(::std::string* serveraddr);

  // @@protoc_insertion_point(class_scope:PTBuf.CProjectServer_ServerAddr)
 private:
  inline void set_has_projectid();
  inline void clear_has_projectid();
  inline void set_has_serveraddr();
  inline void clear_has_serveraddr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 projectid_;
  ::std::string* serveraddr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_projectServer_2eproto();
  friend void protobuf_AssignDesc_projectServer_2eproto();
  friend void protobuf_ShutdownFile_projectServer_2eproto();

  void InitAsDefaultInstance();
  static CProjectServer_ServerAddr* default_instance_;
};
// -------------------------------------------------------------------

class CProjectServer_ServerType : public ::google::protobuf::Message {
 public:
  CProjectServer_ServerType();
  virtual ~CProjectServer_ServerType();

  CProjectServer_ServerType(const CProjectServer_ServerType& from);

  inline CProjectServer_ServerType& operator=(const CProjectServer_ServerType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProjectServer_ServerType& default_instance();

  void Swap(CProjectServer_ServerType* other);

  // implements Message ----------------------------------------------

  CProjectServer_ServerType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProjectServer_ServerType& from);
  void MergeFrom(const CProjectServer_ServerType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ProjectID = 1;
  inline bool has_projectid() const;
  inline void clear_projectid();
  static const int kProjectIDFieldNumber = 1;
  inline ::google::protobuf::uint64 projectid() const;
  inline void set_projectid(::google::protobuf::uint64 value);

  // optional uint32 ServerType = 2;
  inline bool has_servertype() const;
  inline void clear_servertype();
  static const int kServerTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 servertype() const;
  inline void set_servertype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PTBuf.CProjectServer_ServerType)
 private:
  inline void set_has_projectid();
  inline void clear_has_projectid();
  inline void set_has_servertype();
  inline void clear_has_servertype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 projectid_;
  ::google::protobuf::uint32 servertype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_projectServer_2eproto();
  friend void protobuf_AssignDesc_projectServer_2eproto();
  friend void protobuf_ShutdownFile_projectServer_2eproto();

  void InitAsDefaultInstance();
  static CProjectServer_ServerType* default_instance_;
};
// -------------------------------------------------------------------

class CProjectServer_ServerState : public ::google::protobuf::Message {
 public:
  CProjectServer_ServerState();
  virtual ~CProjectServer_ServerState();

  CProjectServer_ServerState(const CProjectServer_ServerState& from);

  inline CProjectServer_ServerState& operator=(const CProjectServer_ServerState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProjectServer_ServerState& default_instance();

  void Swap(CProjectServer_ServerState* other);

  // implements Message ----------------------------------------------

  CProjectServer_ServerState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProjectServer_ServerState& from);
  void MergeFrom(const CProjectServer_ServerState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ProjectID = 1;
  inline bool has_projectid() const;
  inline void clear_projectid();
  static const int kProjectIDFieldNumber = 1;
  inline ::google::protobuf::uint64 projectid() const;
  inline void set_projectid(::google::protobuf::uint64 value);

  // optional uint32 ServerState = 2;
  inline bool has_serverstate() const;
  inline void clear_serverstate();
  static const int kServerStateFieldNumber = 2;
  inline ::google::protobuf::uint32 serverstate() const;
  inline void set_serverstate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PTBuf.CProjectServer_ServerState)
 private:
  inline void set_has_projectid();
  inline void clear_has_projectid();
  inline void set_has_serverstate();
  inline void clear_has_serverstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 projectid_;
  ::google::protobuf::uint32 serverstate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_projectServer_2eproto();
  friend void protobuf_AssignDesc_projectServer_2eproto();
  friend void protobuf_ShutdownFile_projectServer_2eproto();

  void InitAsDefaultInstance();
  static CProjectServer_ServerState* default_instance_;
};
// -------------------------------------------------------------------

class CProjectServer_ServerIndex : public ::google::protobuf::Message {
 public:
  CProjectServer_ServerIndex();
  virtual ~CProjectServer_ServerIndex();

  CProjectServer_ServerIndex(const CProjectServer_ServerIndex& from);

  inline CProjectServer_ServerIndex& operator=(const CProjectServer_ServerIndex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProjectServer_ServerIndex& default_instance();

  void Swap(CProjectServer_ServerIndex* other);

  // implements Message ----------------------------------------------

  CProjectServer_ServerIndex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProjectServer_ServerIndex& from);
  void MergeFrom(const CProjectServer_ServerIndex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ProjectID = 1;
  inline bool has_projectid() const;
  inline void clear_projectid();
  static const int kProjectIDFieldNumber = 1;
  inline ::google::protobuf::uint64 projectid() const;
  inline void set_projectid(::google::protobuf::uint64 value);

  // optional uint32 ServerIndex = 2;
  inline bool has_serverindex() const;
  inline void clear_serverindex();
  static const int kServerIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 serverindex() const;
  inline void set_serverindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PTBuf.CProjectServer_ServerIndex)
 private:
  inline void set_has_projectid();
  inline void clear_has_projectid();
  inline void set_has_serverindex();
  inline void clear_has_serverindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 projectid_;
  ::google::protobuf::uint32 serverindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_projectServer_2eproto();
  friend void protobuf_AssignDesc_projectServer_2eproto();
  friend void protobuf_ShutdownFile_projectServer_2eproto();

  void InitAsDefaultInstance();
  static CProjectServer_ServerIndex* default_instance_;
};
// -------------------------------------------------------------------

class CProjectServer_WhiteAddr : public ::google::protobuf::Message {
 public:
  CProjectServer_WhiteAddr();
  virtual ~CProjectServer_WhiteAddr();

  CProjectServer_WhiteAddr(const CProjectServer_WhiteAddr& from);

  inline CProjectServer_WhiteAddr& operator=(const CProjectServer_WhiteAddr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProjectServer_WhiteAddr& default_instance();

  void Swap(CProjectServer_WhiteAddr* other);

  // implements Message ----------------------------------------------

  CProjectServer_WhiteAddr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProjectServer_WhiteAddr& from);
  void MergeFrom(const CProjectServer_WhiteAddr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ProjectID = 1;
  inline bool has_projectid() const;
  inline void clear_projectid();
  static const int kProjectIDFieldNumber = 1;
  inline ::google::protobuf::uint64 projectid() const;
  inline void set_projectid(::google::protobuf::uint64 value);

  // optional string WhiteAddr = 2;
  inline bool has_whiteaddr() const;
  inline void clear_whiteaddr();
  static const int kWhiteAddrFieldNumber = 2;
  inline const ::std::string& whiteaddr() const;
  inline void set_whiteaddr(const ::std::string& value);
  inline void set_whiteaddr(const char* value);
  inline void set_whiteaddr(const char* value, size_t size);
  inline ::std::string* mutable_whiteaddr();
  inline ::std::string* release_whiteaddr();
  inline void set_allocated_whiteaddr(::std::string* whiteaddr);

  // @@protoc_insertion_point(class_scope:PTBuf.CProjectServer_WhiteAddr)
 private:
  inline void set_has_projectid();
  inline void clear_has_projectid();
  inline void set_has_whiteaddr();
  inline void clear_has_whiteaddr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 projectid_;
  ::std::string* whiteaddr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_projectServer_2eproto();
  friend void protobuf_AssignDesc_projectServer_2eproto();
  friend void protobuf_ShutdownFile_projectServer_2eproto();

  void InitAsDefaultInstance();
  static CProjectServer_WhiteAddr* default_instance_;
};
// -------------------------------------------------------------------

class CProjectServer_OpenState : public ::google::protobuf::Message {
 public:
  CProjectServer_OpenState();
  virtual ~CProjectServer_OpenState();

  CProjectServer_OpenState(const CProjectServer_OpenState& from);

  inline CProjectServer_OpenState& operator=(const CProjectServer_OpenState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProjectServer_OpenState& default_instance();

  void Swap(CProjectServer_OpenState* other);

  // implements Message ----------------------------------------------

  CProjectServer_OpenState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProjectServer_OpenState& from);
  void MergeFrom(const CProjectServer_OpenState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ProjectID = 1;
  inline bool has_projectid() const;
  inline void clear_projectid();
  static const int kProjectIDFieldNumber = 1;
  inline ::google::protobuf::uint64 projectid() const;
  inline void set_projectid(::google::protobuf::uint64 value);

  // optional uint32 OpenState = 2;
  inline bool has_openstate() const;
  inline void clear_openstate();
  static const int kOpenStateFieldNumber = 2;
  inline ::google::protobuf::uint32 openstate() const;
  inline void set_openstate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PTBuf.CProjectServer_OpenState)
 private:
  inline void set_has_projectid();
  inline void clear_has_projectid();
  inline void set_has_openstate();
  inline void clear_has_openstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 projectid_;
  ::google::protobuf::uint32 openstate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_projectServer_2eproto();
  friend void protobuf_AssignDesc_projectServer_2eproto();
  friend void protobuf_ShutdownFile_projectServer_2eproto();

  void InitAsDefaultInstance();
  static CProjectServer_OpenState* default_instance_;
};
// -------------------------------------------------------------------

class CProjectServer_Members : public ::google::protobuf::Message {
 public:
  CProjectServer_Members();
  virtual ~CProjectServer_Members();

  CProjectServer_Members(const CProjectServer_Members& from);

  inline CProjectServer_Members& operator=(const CProjectServer_Members& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProjectServer_Members& default_instance();

  void Swap(CProjectServer_Members* other);

  // implements Message ----------------------------------------------

  CProjectServer_Members* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProjectServer_Members& from);
  void MergeFrom(const CProjectServer_Members& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ProjectID = 1;
  inline bool has_projectid() const;
  inline void clear_projectid();
  static const int kProjectIDFieldNumber = 1;
  inline ::google::protobuf::uint64 projectid() const;
  inline void set_projectid(::google::protobuf::uint64 value);

  // optional string Members = 2;
  inline bool has_members() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 2;
  inline const ::std::string& members() const;
  inline void set_members(const ::std::string& value);
  inline void set_members(const char* value);
  inline void set_members(const char* value, size_t size);
  inline ::std::string* mutable_members();
  inline ::std::string* release_members();
  inline void set_allocated_members(::std::string* members);

  // @@protoc_insertion_point(class_scope:PTBuf.CProjectServer_Members)
 private:
  inline void set_has_projectid();
  inline void clear_has_projectid();
  inline void set_has_members();
  inline void clear_has_members();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 projectid_;
  ::std::string* members_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_projectServer_2eproto();
  friend void protobuf_AssignDesc_projectServer_2eproto();
  friend void protobuf_ShutdownFile_projectServer_2eproto();

  void InitAsDefaultInstance();
  static CProjectServer_Members* default_instance_;
};
// -------------------------------------------------------------------

class CProjectServerList : public ::google::protobuf::Message {
 public:
  CProjectServerList();
  virtual ~CProjectServerList();

  CProjectServerList(const CProjectServerList& from);

  inline CProjectServerList& operator=(const CProjectServerList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CProjectServerList& default_instance();

  void Swap(CProjectServerList* other);

  // implements Message ----------------------------------------------

  CProjectServerList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CProjectServerList& from);
  void MergeFrom(const CProjectServerList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PTBuf.CProjectServer Objects = 1;
  inline int objects_size() const;
  inline void clear_objects();
  static const int kObjectsFieldNumber = 1;
  inline const ::PTBuf::CProjectServer& objects(int index) const;
  inline ::PTBuf::CProjectServer* mutable_objects(int index);
  inline ::PTBuf::CProjectServer* add_objects();
  inline const ::google::protobuf::RepeatedPtrField< ::PTBuf::CProjectServer >&
      objects() const;
  inline ::google::protobuf::RepeatedPtrField< ::PTBuf::CProjectServer >*
      mutable_objects();

  // @@protoc_insertion_point(class_scope:PTBuf.CProjectServerList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PTBuf::CProjectServer > objects_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_projectServer_2eproto();
  friend void protobuf_AssignDesc_projectServer_2eproto();
  friend void protobuf_ShutdownFile_projectServer_2eproto();

  void InitAsDefaultInstance();
  static CProjectServerList* default_instance_;
};
// ===================================================================


// ===================================================================

// CProjectServer

// optional uint64 ProjectID = 1;
inline bool CProjectServer::has_projectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProjectServer::set_has_projectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProjectServer::clear_has_projectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProjectServer::clear_projectid() {
  projectid_ = GOOGLE_ULONGLONG(0);
  clear_has_projectid();
}
inline ::google::protobuf::uint64 CProjectServer::projectid() const {
  return projectid_;
}
inline void CProjectServer::set_projectid(::google::protobuf::uint64 value) {
  set_has_projectid();
  projectid_ = value;
}

// optional string PlatformName = 2;
inline bool CProjectServer::has_platformname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProjectServer::set_has_platformname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProjectServer::clear_has_platformname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProjectServer::clear_platformname() {
  if (platformname_ != &::google::protobuf::internal::kEmptyString) {
    platformname_->clear();
  }
  clear_has_platformname();
}
inline const ::std::string& CProjectServer::platformname() const {
  return *platformname_;
}
inline void CProjectServer::set_platformname(const ::std::string& value) {
  set_has_platformname();
  if (platformname_ == &::google::protobuf::internal::kEmptyString) {
    platformname_ = new ::std::string;
  }
  platformname_->assign(value);
}
inline void CProjectServer::set_platformname(const char* value) {
  set_has_platformname();
  if (platformname_ == &::google::protobuf::internal::kEmptyString) {
    platformname_ = new ::std::string;
  }
  platformname_->assign(value);
}
inline void CProjectServer::set_platformname(const char* value, size_t size) {
  set_has_platformname();
  if (platformname_ == &::google::protobuf::internal::kEmptyString) {
    platformname_ = new ::std::string;
  }
  platformname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectServer::mutable_platformname() {
  set_has_platformname();
  if (platformname_ == &::google::protobuf::internal::kEmptyString) {
    platformname_ = new ::std::string;
  }
  return platformname_;
}
inline ::std::string* CProjectServer::release_platformname() {
  clear_has_platformname();
  if (platformname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platformname_;
    platformname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectServer::set_allocated_platformname(::std::string* platformname) {
  if (platformname_ != &::google::protobuf::internal::kEmptyString) {
    delete platformname_;
  }
  if (platformname) {
    set_has_platformname();
    platformname_ = platformname;
  } else {
    clear_has_platformname();
    platformname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ChannelName = 3;
inline bool CProjectServer::has_channelname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CProjectServer::set_has_channelname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CProjectServer::clear_has_channelname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CProjectServer::clear_channelname() {
  if (channelname_ != &::google::protobuf::internal::kEmptyString) {
    channelname_->clear();
  }
  clear_has_channelname();
}
inline const ::std::string& CProjectServer::channelname() const {
  return *channelname_;
}
inline void CProjectServer::set_channelname(const ::std::string& value) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(value);
}
inline void CProjectServer::set_channelname(const char* value) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(value);
}
inline void CProjectServer::set_channelname(const char* value, size_t size) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectServer::mutable_channelname() {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  return channelname_;
}
inline ::std::string* CProjectServer::release_channelname() {
  clear_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelname_;
    channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectServer::set_allocated_channelname(::std::string* channelname) {
  if (channelname_ != &::google::protobuf::internal::kEmptyString) {
    delete channelname_;
  }
  if (channelname) {
    set_has_channelname();
    channelname_ = channelname;
  } else {
    clear_has_channelname();
    channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 DeviceType = 4;
inline bool CProjectServer::has_devicetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CProjectServer::set_has_devicetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CProjectServer::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CProjectServer::clear_devicetype() {
  devicetype_ = 0u;
  clear_has_devicetype();
}
inline ::google::protobuf::uint32 CProjectServer::devicetype() const {
  return devicetype_;
}
inline void CProjectServer::set_devicetype(::google::protobuf::uint32 value) {
  set_has_devicetype();
  devicetype_ = value;
}

// optional string Version = 5;
inline bool CProjectServer::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CProjectServer::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CProjectServer::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CProjectServer::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& CProjectServer::version() const {
  return *version_;
}
inline void CProjectServer::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void CProjectServer::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void CProjectServer::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectServer::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* CProjectServer::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectServer::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ServerID = 6;
inline bool CProjectServer::has_serverid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CProjectServer::set_has_serverid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CProjectServer::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CProjectServer::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 CProjectServer::serverid() const {
  return serverid_;
}
inline void CProjectServer::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional string ServerName = 7;
inline bool CProjectServer::has_servername() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CProjectServer::set_has_servername() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CProjectServer::clear_has_servername() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CProjectServer::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& CProjectServer::servername() const {
  return *servername_;
}
inline void CProjectServer::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void CProjectServer::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void CProjectServer::set_servername(const char* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectServer::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* CProjectServer::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectServer::set_allocated_servername(::std::string* servername) {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (servername) {
    set_has_servername();
    servername_ = servername;
  } else {
    clear_has_servername();
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ServerAddr = 8;
inline bool CProjectServer::has_serveraddr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CProjectServer::set_has_serveraddr() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CProjectServer::clear_has_serveraddr() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CProjectServer::clear_serveraddr() {
  if (serveraddr_ != &::google::protobuf::internal::kEmptyString) {
    serveraddr_->clear();
  }
  clear_has_serveraddr();
}
inline const ::std::string& CProjectServer::serveraddr() const {
  return *serveraddr_;
}
inline void CProjectServer::set_serveraddr(const ::std::string& value) {
  set_has_serveraddr();
  if (serveraddr_ == &::google::protobuf::internal::kEmptyString) {
    serveraddr_ = new ::std::string;
  }
  serveraddr_->assign(value);
}
inline void CProjectServer::set_serveraddr(const char* value) {
  set_has_serveraddr();
  if (serveraddr_ == &::google::protobuf::internal::kEmptyString) {
    serveraddr_ = new ::std::string;
  }
  serveraddr_->assign(value);
}
inline void CProjectServer::set_serveraddr(const char* value, size_t size) {
  set_has_serveraddr();
  if (serveraddr_ == &::google::protobuf::internal::kEmptyString) {
    serveraddr_ = new ::std::string;
  }
  serveraddr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectServer::mutable_serveraddr() {
  set_has_serveraddr();
  if (serveraddr_ == &::google::protobuf::internal::kEmptyString) {
    serveraddr_ = new ::std::string;
  }
  return serveraddr_;
}
inline ::std::string* CProjectServer::release_serveraddr() {
  clear_has_serveraddr();
  if (serveraddr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serveraddr_;
    serveraddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectServer::set_allocated_serveraddr(::std::string* serveraddr) {
  if (serveraddr_ != &::google::protobuf::internal::kEmptyString) {
    delete serveraddr_;
  }
  if (serveraddr) {
    set_has_serveraddr();
    serveraddr_ = serveraddr;
  } else {
    clear_has_serveraddr();
    serveraddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ServerType = 9;
inline bool CProjectServer::has_servertype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CProjectServer::set_has_servertype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CProjectServer::clear_has_servertype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CProjectServer::clear_servertype() {
  servertype_ = 0u;
  clear_has_servertype();
}
inline ::google::protobuf::uint32 CProjectServer::servertype() const {
  return servertype_;
}
inline void CProjectServer::set_servertype(::google::protobuf::uint32 value) {
  set_has_servertype();
  servertype_ = value;
}

// optional uint32 ServerState = 10;
inline bool CProjectServer::has_serverstate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CProjectServer::set_has_serverstate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CProjectServer::clear_has_serverstate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CProjectServer::clear_serverstate() {
  serverstate_ = 0u;
  clear_has_serverstate();
}
inline ::google::protobuf::uint32 CProjectServer::serverstate() const {
  return serverstate_;
}
inline void CProjectServer::set_serverstate(::google::protobuf::uint32 value) {
  set_has_serverstate();
  serverstate_ = value;
}

// optional uint32 ServerIndex = 11;
inline bool CProjectServer::has_serverindex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CProjectServer::set_has_serverindex() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CProjectServer::clear_has_serverindex() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CProjectServer::clear_serverindex() {
  serverindex_ = 0u;
  clear_has_serverindex();
}
inline ::google::protobuf::uint32 CProjectServer::serverindex() const {
  return serverindex_;
}
inline void CProjectServer::set_serverindex(::google::protobuf::uint32 value) {
  set_has_serverindex();
  serverindex_ = value;
}

// optional string WhiteAddr = 12;
inline bool CProjectServer::has_whiteaddr() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CProjectServer::set_has_whiteaddr() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CProjectServer::clear_has_whiteaddr() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CProjectServer::clear_whiteaddr() {
  if (whiteaddr_ != &::google::protobuf::internal::kEmptyString) {
    whiteaddr_->clear();
  }
  clear_has_whiteaddr();
}
inline const ::std::string& CProjectServer::whiteaddr() const {
  return *whiteaddr_;
}
inline void CProjectServer::set_whiteaddr(const ::std::string& value) {
  set_has_whiteaddr();
  if (whiteaddr_ == &::google::protobuf::internal::kEmptyString) {
    whiteaddr_ = new ::std::string;
  }
  whiteaddr_->assign(value);
}
inline void CProjectServer::set_whiteaddr(const char* value) {
  set_has_whiteaddr();
  if (whiteaddr_ == &::google::protobuf::internal::kEmptyString) {
    whiteaddr_ = new ::std::string;
  }
  whiteaddr_->assign(value);
}
inline void CProjectServer::set_whiteaddr(const char* value, size_t size) {
  set_has_whiteaddr();
  if (whiteaddr_ == &::google::protobuf::internal::kEmptyString) {
    whiteaddr_ = new ::std::string;
  }
  whiteaddr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectServer::mutable_whiteaddr() {
  set_has_whiteaddr();
  if (whiteaddr_ == &::google::protobuf::internal::kEmptyString) {
    whiteaddr_ = new ::std::string;
  }
  return whiteaddr_;
}
inline ::std::string* CProjectServer::release_whiteaddr() {
  clear_has_whiteaddr();
  if (whiteaddr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = whiteaddr_;
    whiteaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectServer::set_allocated_whiteaddr(::std::string* whiteaddr) {
  if (whiteaddr_ != &::google::protobuf::internal::kEmptyString) {
    delete whiteaddr_;
  }
  if (whiteaddr) {
    set_has_whiteaddr();
    whiteaddr_ = whiteaddr;
  } else {
    clear_has_whiteaddr();
    whiteaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 OpenState = 13;
inline bool CProjectServer::has_openstate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CProjectServer::set_has_openstate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CProjectServer::clear_has_openstate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CProjectServer::clear_openstate() {
  openstate_ = 0u;
  clear_has_openstate();
}
inline ::google::protobuf::uint32 CProjectServer::openstate() const {
  return openstate_;
}
inline void CProjectServer::set_openstate(::google::protobuf::uint32 value) {
  set_has_openstate();
  openstate_ = value;
}

// optional string Members = 14;
inline bool CProjectServer::has_members() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CProjectServer::set_has_members() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CProjectServer::clear_has_members() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CProjectServer::clear_members() {
  if (members_ != &::google::protobuf::internal::kEmptyString) {
    members_->clear();
  }
  clear_has_members();
}
inline const ::std::string& CProjectServer::members() const {
  return *members_;
}
inline void CProjectServer::set_members(const ::std::string& value) {
  set_has_members();
  if (members_ == &::google::protobuf::internal::kEmptyString) {
    members_ = new ::std::string;
  }
  members_->assign(value);
}
inline void CProjectServer::set_members(const char* value) {
  set_has_members();
  if (members_ == &::google::protobuf::internal::kEmptyString) {
    members_ = new ::std::string;
  }
  members_->assign(value);
}
inline void CProjectServer::set_members(const char* value, size_t size) {
  set_has_members();
  if (members_ == &::google::protobuf::internal::kEmptyString) {
    members_ = new ::std::string;
  }
  members_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectServer::mutable_members() {
  set_has_members();
  if (members_ == &::google::protobuf::internal::kEmptyString) {
    members_ = new ::std::string;
  }
  return members_;
}
inline ::std::string* CProjectServer::release_members() {
  clear_has_members();
  if (members_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = members_;
    members_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectServer::set_allocated_members(::std::string* members) {
  if (members_ != &::google::protobuf::internal::kEmptyString) {
    delete members_;
  }
  if (members) {
    set_has_members();
    members_ = members;
  } else {
    clear_has_members();
    members_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ModifyTime = 15;
inline bool CProjectServer::has_modifytime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CProjectServer::set_has_modifytime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CProjectServer::clear_has_modifytime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CProjectServer::clear_modifytime() {
  if (modifytime_ != &::google::protobuf::internal::kEmptyString) {
    modifytime_->clear();
  }
  clear_has_modifytime();
}
inline const ::std::string& CProjectServer::modifytime() const {
  return *modifytime_;
}
inline void CProjectServer::set_modifytime(const ::std::string& value) {
  set_has_modifytime();
  if (modifytime_ == &::google::protobuf::internal::kEmptyString) {
    modifytime_ = new ::std::string;
  }
  modifytime_->assign(value);
}
inline void CProjectServer::set_modifytime(const char* value) {
  set_has_modifytime();
  if (modifytime_ == &::google::protobuf::internal::kEmptyString) {
    modifytime_ = new ::std::string;
  }
  modifytime_->assign(value);
}
inline void CProjectServer::set_modifytime(const char* value, size_t size) {
  set_has_modifytime();
  if (modifytime_ == &::google::protobuf::internal::kEmptyString) {
    modifytime_ = new ::std::string;
  }
  modifytime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectServer::mutable_modifytime() {
  set_has_modifytime();
  if (modifytime_ == &::google::protobuf::internal::kEmptyString) {
    modifytime_ = new ::std::string;
  }
  return modifytime_;
}
inline ::std::string* CProjectServer::release_modifytime() {
  clear_has_modifytime();
  if (modifytime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = modifytime_;
    modifytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectServer::set_allocated_modifytime(::std::string* modifytime) {
  if (modifytime_ != &::google::protobuf::internal::kEmptyString) {
    delete modifytime_;
  }
  if (modifytime) {
    set_has_modifytime();
    modifytime_ = modifytime;
  } else {
    clear_has_modifytime();
    modifytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CProjectServer_PlatformName

// optional uint64 ProjectID = 1;
inline bool CProjectServer_PlatformName::has_projectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProjectServer_PlatformName::set_has_projectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProjectServer_PlatformName::clear_has_projectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProjectServer_PlatformName::clear_projectid() {
  projectid_ = GOOGLE_ULONGLONG(0);
  clear_has_projectid();
}
inline ::google::protobuf::uint64 CProjectServer_PlatformName::projectid() const {
  return projectid_;
}
inline void CProjectServer_PlatformName::set_projectid(::google::protobuf::uint64 value) {
  set_has_projectid();
  projectid_ = value;
}

// optional string PlatformName = 2;
inline bool CProjectServer_PlatformName::has_platformname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProjectServer_PlatformName::set_has_platformname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProjectServer_PlatformName::clear_has_platformname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProjectServer_PlatformName::clear_platformname() {
  if (platformname_ != &::google::protobuf::internal::kEmptyString) {
    platformname_->clear();
  }
  clear_has_platformname();
}
inline const ::std::string& CProjectServer_PlatformName::platformname() const {
  return *platformname_;
}
inline void CProjectServer_PlatformName::set_platformname(const ::std::string& value) {
  set_has_platformname();
  if (platformname_ == &::google::protobuf::internal::kEmptyString) {
    platformname_ = new ::std::string;
  }
  platformname_->assign(value);
}
inline void CProjectServer_PlatformName::set_platformname(const char* value) {
  set_has_platformname();
  if (platformname_ == &::google::protobuf::internal::kEmptyString) {
    platformname_ = new ::std::string;
  }
  platformname_->assign(value);
}
inline void CProjectServer_PlatformName::set_platformname(const char* value, size_t size) {
  set_has_platformname();
  if (platformname_ == &::google::protobuf::internal::kEmptyString) {
    platformname_ = new ::std::string;
  }
  platformname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectServer_PlatformName::mutable_platformname() {
  set_has_platformname();
  if (platformname_ == &::google::protobuf::internal::kEmptyString) {
    platformname_ = new ::std::string;
  }
  return platformname_;
}
inline ::std::string* CProjectServer_PlatformName::release_platformname() {
  clear_has_platformname();
  if (platformname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platformname_;
    platformname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectServer_PlatformName::set_allocated_platformname(::std::string* platformname) {
  if (platformname_ != &::google::protobuf::internal::kEmptyString) {
    delete platformname_;
  }
  if (platformname) {
    set_has_platformname();
    platformname_ = platformname;
  } else {
    clear_has_platformname();
    platformname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CProjectServer_ChannelName

// optional uint64 ProjectID = 1;
inline bool CProjectServer_ChannelName::has_projectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProjectServer_ChannelName::set_has_projectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProjectServer_ChannelName::clear_has_projectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProjectServer_ChannelName::clear_projectid() {
  projectid_ = GOOGLE_ULONGLONG(0);
  clear_has_projectid();
}
inline ::google::protobuf::uint64 CProjectServer_ChannelName::projectid() const {
  return projectid_;
}
inline void CProjectServer_ChannelName::set_projectid(::google::protobuf::uint64 value) {
  set_has_projectid();
  projectid_ = value;
}

// optional string ChannelName = 2;
inline bool CProjectServer_ChannelName::has_channelname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProjectServer_ChannelName::set_has_channelname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProjectServer_ChannelName::clear_has_channelname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProjectServer_ChannelName::clear_channelname() {
  if (channelname_ != &::google::protobuf::internal::kEmptyString) {
    channelname_->clear();
  }
  clear_has_channelname();
}
inline const ::std::string& CProjectServer_ChannelName::channelname() const {
  return *channelname_;
}
inline void CProjectServer_ChannelName::set_channelname(const ::std::string& value) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(value);
}
inline void CProjectServer_ChannelName::set_channelname(const char* value) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(value);
}
inline void CProjectServer_ChannelName::set_channelname(const char* value, size_t size) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectServer_ChannelName::mutable_channelname() {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  return channelname_;
}
inline ::std::string* CProjectServer_ChannelName::release_channelname() {
  clear_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelname_;
    channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectServer_ChannelName::set_allocated_channelname(::std::string* channelname) {
  if (channelname_ != &::google::protobuf::internal::kEmptyString) {
    delete channelname_;
  }
  if (channelname) {
    set_has_channelname();
    channelname_ = channelname;
  } else {
    clear_has_channelname();
    channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CProjectServer_DeviceType

// optional uint64 ProjectID = 1;
inline bool CProjectServer_DeviceType::has_projectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProjectServer_DeviceType::set_has_projectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProjectServer_DeviceType::clear_has_projectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProjectServer_DeviceType::clear_projectid() {
  projectid_ = GOOGLE_ULONGLONG(0);
  clear_has_projectid();
}
inline ::google::protobuf::uint64 CProjectServer_DeviceType::projectid() const {
  return projectid_;
}
inline void CProjectServer_DeviceType::set_projectid(::google::protobuf::uint64 value) {
  set_has_projectid();
  projectid_ = value;
}

// optional uint32 DeviceType = 2;
inline bool CProjectServer_DeviceType::has_devicetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProjectServer_DeviceType::set_has_devicetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProjectServer_DeviceType::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProjectServer_DeviceType::clear_devicetype() {
  devicetype_ = 0u;
  clear_has_devicetype();
}
inline ::google::protobuf::uint32 CProjectServer_DeviceType::devicetype() const {
  return devicetype_;
}
inline void CProjectServer_DeviceType::set_devicetype(::google::protobuf::uint32 value) {
  set_has_devicetype();
  devicetype_ = value;
}

// -------------------------------------------------------------------

// CProjectServer_Version

// optional uint64 ProjectID = 1;
inline bool CProjectServer_Version::has_projectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProjectServer_Version::set_has_projectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProjectServer_Version::clear_has_projectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProjectServer_Version::clear_projectid() {
  projectid_ = GOOGLE_ULONGLONG(0);
  clear_has_projectid();
}
inline ::google::protobuf::uint64 CProjectServer_Version::projectid() const {
  return projectid_;
}
inline void CProjectServer_Version::set_projectid(::google::protobuf::uint64 value) {
  set_has_projectid();
  projectid_ = value;
}

// optional string Version = 2;
inline bool CProjectServer_Version::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProjectServer_Version::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProjectServer_Version::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProjectServer_Version::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& CProjectServer_Version::version() const {
  return *version_;
}
inline void CProjectServer_Version::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void CProjectServer_Version::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void CProjectServer_Version::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectServer_Version::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* CProjectServer_Version::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectServer_Version::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CProjectServer_ServerID

// optional uint64 ProjectID = 1;
inline bool CProjectServer_ServerID::has_projectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProjectServer_ServerID::set_has_projectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProjectServer_ServerID::clear_has_projectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProjectServer_ServerID::clear_projectid() {
  projectid_ = GOOGLE_ULONGLONG(0);
  clear_has_projectid();
}
inline ::google::protobuf::uint64 CProjectServer_ServerID::projectid() const {
  return projectid_;
}
inline void CProjectServer_ServerID::set_projectid(::google::protobuf::uint64 value) {
  set_has_projectid();
  projectid_ = value;
}

// optional uint32 ServerID = 2;
inline bool CProjectServer_ServerID::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProjectServer_ServerID::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProjectServer_ServerID::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProjectServer_ServerID::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 CProjectServer_ServerID::serverid() const {
  return serverid_;
}
inline void CProjectServer_ServerID::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// CProjectServer_ServerName

// optional uint64 ProjectID = 1;
inline bool CProjectServer_ServerName::has_projectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProjectServer_ServerName::set_has_projectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProjectServer_ServerName::clear_has_projectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProjectServer_ServerName::clear_projectid() {
  projectid_ = GOOGLE_ULONGLONG(0);
  clear_has_projectid();
}
inline ::google::protobuf::uint64 CProjectServer_ServerName::projectid() const {
  return projectid_;
}
inline void CProjectServer_ServerName::set_projectid(::google::protobuf::uint64 value) {
  set_has_projectid();
  projectid_ = value;
}

// optional string ServerName = 2;
inline bool CProjectServer_ServerName::has_servername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProjectServer_ServerName::set_has_servername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProjectServer_ServerName::clear_has_servername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProjectServer_ServerName::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& CProjectServer_ServerName::servername() const {
  return *servername_;
}
inline void CProjectServer_ServerName::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void CProjectServer_ServerName::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void CProjectServer_ServerName::set_servername(const char* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectServer_ServerName::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* CProjectServer_ServerName::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectServer_ServerName::set_allocated_servername(::std::string* servername) {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (servername) {
    set_has_servername();
    servername_ = servername;
  } else {
    clear_has_servername();
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CProjectServer_ServerAddr

// optional uint64 ProjectID = 1;
inline bool CProjectServer_ServerAddr::has_projectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProjectServer_ServerAddr::set_has_projectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProjectServer_ServerAddr::clear_has_projectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProjectServer_ServerAddr::clear_projectid() {
  projectid_ = GOOGLE_ULONGLONG(0);
  clear_has_projectid();
}
inline ::google::protobuf::uint64 CProjectServer_ServerAddr::projectid() const {
  return projectid_;
}
inline void CProjectServer_ServerAddr::set_projectid(::google::protobuf::uint64 value) {
  set_has_projectid();
  projectid_ = value;
}

// optional string ServerAddr = 2;
inline bool CProjectServer_ServerAddr::has_serveraddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProjectServer_ServerAddr::set_has_serveraddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProjectServer_ServerAddr::clear_has_serveraddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProjectServer_ServerAddr::clear_serveraddr() {
  if (serveraddr_ != &::google::protobuf::internal::kEmptyString) {
    serveraddr_->clear();
  }
  clear_has_serveraddr();
}
inline const ::std::string& CProjectServer_ServerAddr::serveraddr() const {
  return *serveraddr_;
}
inline void CProjectServer_ServerAddr::set_serveraddr(const ::std::string& value) {
  set_has_serveraddr();
  if (serveraddr_ == &::google::protobuf::internal::kEmptyString) {
    serveraddr_ = new ::std::string;
  }
  serveraddr_->assign(value);
}
inline void CProjectServer_ServerAddr::set_serveraddr(const char* value) {
  set_has_serveraddr();
  if (serveraddr_ == &::google::protobuf::internal::kEmptyString) {
    serveraddr_ = new ::std::string;
  }
  serveraddr_->assign(value);
}
inline void CProjectServer_ServerAddr::set_serveraddr(const char* value, size_t size) {
  set_has_serveraddr();
  if (serveraddr_ == &::google::protobuf::internal::kEmptyString) {
    serveraddr_ = new ::std::string;
  }
  serveraddr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectServer_ServerAddr::mutable_serveraddr() {
  set_has_serveraddr();
  if (serveraddr_ == &::google::protobuf::internal::kEmptyString) {
    serveraddr_ = new ::std::string;
  }
  return serveraddr_;
}
inline ::std::string* CProjectServer_ServerAddr::release_serveraddr() {
  clear_has_serveraddr();
  if (serveraddr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serveraddr_;
    serveraddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectServer_ServerAddr::set_allocated_serveraddr(::std::string* serveraddr) {
  if (serveraddr_ != &::google::protobuf::internal::kEmptyString) {
    delete serveraddr_;
  }
  if (serveraddr) {
    set_has_serveraddr();
    serveraddr_ = serveraddr;
  } else {
    clear_has_serveraddr();
    serveraddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CProjectServer_ServerType

// optional uint64 ProjectID = 1;
inline bool CProjectServer_ServerType::has_projectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProjectServer_ServerType::set_has_projectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProjectServer_ServerType::clear_has_projectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProjectServer_ServerType::clear_projectid() {
  projectid_ = GOOGLE_ULONGLONG(0);
  clear_has_projectid();
}
inline ::google::protobuf::uint64 CProjectServer_ServerType::projectid() const {
  return projectid_;
}
inline void CProjectServer_ServerType::set_projectid(::google::protobuf::uint64 value) {
  set_has_projectid();
  projectid_ = value;
}

// optional uint32 ServerType = 2;
inline bool CProjectServer_ServerType::has_servertype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProjectServer_ServerType::set_has_servertype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProjectServer_ServerType::clear_has_servertype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProjectServer_ServerType::clear_servertype() {
  servertype_ = 0u;
  clear_has_servertype();
}
inline ::google::protobuf::uint32 CProjectServer_ServerType::servertype() const {
  return servertype_;
}
inline void CProjectServer_ServerType::set_servertype(::google::protobuf::uint32 value) {
  set_has_servertype();
  servertype_ = value;
}

// -------------------------------------------------------------------

// CProjectServer_ServerState

// optional uint64 ProjectID = 1;
inline bool CProjectServer_ServerState::has_projectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProjectServer_ServerState::set_has_projectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProjectServer_ServerState::clear_has_projectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProjectServer_ServerState::clear_projectid() {
  projectid_ = GOOGLE_ULONGLONG(0);
  clear_has_projectid();
}
inline ::google::protobuf::uint64 CProjectServer_ServerState::projectid() const {
  return projectid_;
}
inline void CProjectServer_ServerState::set_projectid(::google::protobuf::uint64 value) {
  set_has_projectid();
  projectid_ = value;
}

// optional uint32 ServerState = 2;
inline bool CProjectServer_ServerState::has_serverstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProjectServer_ServerState::set_has_serverstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProjectServer_ServerState::clear_has_serverstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProjectServer_ServerState::clear_serverstate() {
  serverstate_ = 0u;
  clear_has_serverstate();
}
inline ::google::protobuf::uint32 CProjectServer_ServerState::serverstate() const {
  return serverstate_;
}
inline void CProjectServer_ServerState::set_serverstate(::google::protobuf::uint32 value) {
  set_has_serverstate();
  serverstate_ = value;
}

// -------------------------------------------------------------------

// CProjectServer_ServerIndex

// optional uint64 ProjectID = 1;
inline bool CProjectServer_ServerIndex::has_projectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProjectServer_ServerIndex::set_has_projectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProjectServer_ServerIndex::clear_has_projectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProjectServer_ServerIndex::clear_projectid() {
  projectid_ = GOOGLE_ULONGLONG(0);
  clear_has_projectid();
}
inline ::google::protobuf::uint64 CProjectServer_ServerIndex::projectid() const {
  return projectid_;
}
inline void CProjectServer_ServerIndex::set_projectid(::google::protobuf::uint64 value) {
  set_has_projectid();
  projectid_ = value;
}

// optional uint32 ServerIndex = 2;
inline bool CProjectServer_ServerIndex::has_serverindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProjectServer_ServerIndex::set_has_serverindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProjectServer_ServerIndex::clear_has_serverindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProjectServer_ServerIndex::clear_serverindex() {
  serverindex_ = 0u;
  clear_has_serverindex();
}
inline ::google::protobuf::uint32 CProjectServer_ServerIndex::serverindex() const {
  return serverindex_;
}
inline void CProjectServer_ServerIndex::set_serverindex(::google::protobuf::uint32 value) {
  set_has_serverindex();
  serverindex_ = value;
}

// -------------------------------------------------------------------

// CProjectServer_WhiteAddr

// optional uint64 ProjectID = 1;
inline bool CProjectServer_WhiteAddr::has_projectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProjectServer_WhiteAddr::set_has_projectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProjectServer_WhiteAddr::clear_has_projectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProjectServer_WhiteAddr::clear_projectid() {
  projectid_ = GOOGLE_ULONGLONG(0);
  clear_has_projectid();
}
inline ::google::protobuf::uint64 CProjectServer_WhiteAddr::projectid() const {
  return projectid_;
}
inline void CProjectServer_WhiteAddr::set_projectid(::google::protobuf::uint64 value) {
  set_has_projectid();
  projectid_ = value;
}

// optional string WhiteAddr = 2;
inline bool CProjectServer_WhiteAddr::has_whiteaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProjectServer_WhiteAddr::set_has_whiteaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProjectServer_WhiteAddr::clear_has_whiteaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProjectServer_WhiteAddr::clear_whiteaddr() {
  if (whiteaddr_ != &::google::protobuf::internal::kEmptyString) {
    whiteaddr_->clear();
  }
  clear_has_whiteaddr();
}
inline const ::std::string& CProjectServer_WhiteAddr::whiteaddr() const {
  return *whiteaddr_;
}
inline void CProjectServer_WhiteAddr::set_whiteaddr(const ::std::string& value) {
  set_has_whiteaddr();
  if (whiteaddr_ == &::google::protobuf::internal::kEmptyString) {
    whiteaddr_ = new ::std::string;
  }
  whiteaddr_->assign(value);
}
inline void CProjectServer_WhiteAddr::set_whiteaddr(const char* value) {
  set_has_whiteaddr();
  if (whiteaddr_ == &::google::protobuf::internal::kEmptyString) {
    whiteaddr_ = new ::std::string;
  }
  whiteaddr_->assign(value);
}
inline void CProjectServer_WhiteAddr::set_whiteaddr(const char* value, size_t size) {
  set_has_whiteaddr();
  if (whiteaddr_ == &::google::protobuf::internal::kEmptyString) {
    whiteaddr_ = new ::std::string;
  }
  whiteaddr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectServer_WhiteAddr::mutable_whiteaddr() {
  set_has_whiteaddr();
  if (whiteaddr_ == &::google::protobuf::internal::kEmptyString) {
    whiteaddr_ = new ::std::string;
  }
  return whiteaddr_;
}
inline ::std::string* CProjectServer_WhiteAddr::release_whiteaddr() {
  clear_has_whiteaddr();
  if (whiteaddr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = whiteaddr_;
    whiteaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectServer_WhiteAddr::set_allocated_whiteaddr(::std::string* whiteaddr) {
  if (whiteaddr_ != &::google::protobuf::internal::kEmptyString) {
    delete whiteaddr_;
  }
  if (whiteaddr) {
    set_has_whiteaddr();
    whiteaddr_ = whiteaddr;
  } else {
    clear_has_whiteaddr();
    whiteaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CProjectServer_OpenState

// optional uint64 ProjectID = 1;
inline bool CProjectServer_OpenState::has_projectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProjectServer_OpenState::set_has_projectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProjectServer_OpenState::clear_has_projectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProjectServer_OpenState::clear_projectid() {
  projectid_ = GOOGLE_ULONGLONG(0);
  clear_has_projectid();
}
inline ::google::protobuf::uint64 CProjectServer_OpenState::projectid() const {
  return projectid_;
}
inline void CProjectServer_OpenState::set_projectid(::google::protobuf::uint64 value) {
  set_has_projectid();
  projectid_ = value;
}

// optional uint32 OpenState = 2;
inline bool CProjectServer_OpenState::has_openstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProjectServer_OpenState::set_has_openstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProjectServer_OpenState::clear_has_openstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProjectServer_OpenState::clear_openstate() {
  openstate_ = 0u;
  clear_has_openstate();
}
inline ::google::protobuf::uint32 CProjectServer_OpenState::openstate() const {
  return openstate_;
}
inline void CProjectServer_OpenState::set_openstate(::google::protobuf::uint32 value) {
  set_has_openstate();
  openstate_ = value;
}

// -------------------------------------------------------------------

// CProjectServer_Members

// optional uint64 ProjectID = 1;
inline bool CProjectServer_Members::has_projectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CProjectServer_Members::set_has_projectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CProjectServer_Members::clear_has_projectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CProjectServer_Members::clear_projectid() {
  projectid_ = GOOGLE_ULONGLONG(0);
  clear_has_projectid();
}
inline ::google::protobuf::uint64 CProjectServer_Members::projectid() const {
  return projectid_;
}
inline void CProjectServer_Members::set_projectid(::google::protobuf::uint64 value) {
  set_has_projectid();
  projectid_ = value;
}

// optional string Members = 2;
inline bool CProjectServer_Members::has_members() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CProjectServer_Members::set_has_members() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CProjectServer_Members::clear_has_members() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CProjectServer_Members::clear_members() {
  if (members_ != &::google::protobuf::internal::kEmptyString) {
    members_->clear();
  }
  clear_has_members();
}
inline const ::std::string& CProjectServer_Members::members() const {
  return *members_;
}
inline void CProjectServer_Members::set_members(const ::std::string& value) {
  set_has_members();
  if (members_ == &::google::protobuf::internal::kEmptyString) {
    members_ = new ::std::string;
  }
  members_->assign(value);
}
inline void CProjectServer_Members::set_members(const char* value) {
  set_has_members();
  if (members_ == &::google::protobuf::internal::kEmptyString) {
    members_ = new ::std::string;
  }
  members_->assign(value);
}
inline void CProjectServer_Members::set_members(const char* value, size_t size) {
  set_has_members();
  if (members_ == &::google::protobuf::internal::kEmptyString) {
    members_ = new ::std::string;
  }
  members_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CProjectServer_Members::mutable_members() {
  set_has_members();
  if (members_ == &::google::protobuf::internal::kEmptyString) {
    members_ = new ::std::string;
  }
  return members_;
}
inline ::std::string* CProjectServer_Members::release_members() {
  clear_has_members();
  if (members_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = members_;
    members_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CProjectServer_Members::set_allocated_members(::std::string* members) {
  if (members_ != &::google::protobuf::internal::kEmptyString) {
    delete members_;
  }
  if (members) {
    set_has_members();
    members_ = members;
  } else {
    clear_has_members();
    members_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CProjectServerList

// repeated .PTBuf.CProjectServer Objects = 1;
inline int CProjectServerList::objects_size() const {
  return objects_.size();
}
inline void CProjectServerList::clear_objects() {
  objects_.Clear();
}
inline const ::PTBuf::CProjectServer& CProjectServerList::objects(int index) const {
  return objects_.Get(index);
}
inline ::PTBuf::CProjectServer* CProjectServerList::mutable_objects(int index) {
  return objects_.Mutable(index);
}
inline ::PTBuf::CProjectServer* CProjectServerList::add_objects() {
  return objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PTBuf::CProjectServer >&
CProjectServerList::objects() const {
  return objects_;
}
inline ::google::protobuf::RepeatedPtrField< ::PTBuf::CProjectServer >*
CProjectServerList::mutable_objects() {
  return &objects_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PTBuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_projectServer_2eproto__INCLUDED
