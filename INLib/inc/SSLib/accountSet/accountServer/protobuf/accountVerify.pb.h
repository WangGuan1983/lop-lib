// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: accountVerify.proto

#ifndef PROTOBUF_accountVerify_2eproto__INCLUDED
#define PROTOBUF_accountVerify_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "baseDef.pb.h"
// @@protoc_insertion_point(includes)

namespace PTBuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_accountVerify_2eproto();
void protobuf_AssignDesc_accountVerify_2eproto();
void protobuf_ShutdownFile_accountVerify_2eproto();

class CAccountVerify;
class CAccountVerify_PlatformName;
class CAccountVerify_ChannelName;
class CAccountVerify_AccountPwd;
class CAccountVerify_AccountKey;
class CAccountVerify_IsAdult;
class CAccountVerify_DeviceID;
class CAccountVerifyList;

// ===================================================================

class CAccountVerify : public ::google::protobuf::Message {
 public:
  CAccountVerify();
  virtual ~CAccountVerify();

  CAccountVerify(const CAccountVerify& from);

  inline CAccountVerify& operator=(const CAccountVerify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountVerify& default_instance();

  void Swap(CAccountVerify* other);

  // implements Message ----------------------------------------------

  CAccountVerify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountVerify& from);
  void MergeFrom(const CAccountVerify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 AccountID = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIDFieldNumber = 1;
  inline ::google::protobuf::uint64 accountid() const;
  inline void set_accountid(::google::protobuf::uint64 value);

  // optional string PlatformName = 2;
  inline bool has_platformname() const;
  inline void clear_platformname();
  static const int kPlatformNameFieldNumber = 2;
  inline const ::std::string& platformname() const;
  inline void set_platformname(const ::std::string& value);
  inline void set_platformname(const char* value);
  inline void set_platformname(const char* value, size_t size);
  inline ::std::string* mutable_platformname();
  inline ::std::string* release_platformname();
  inline void set_allocated_platformname(::std::string* platformname);

  // optional string ChannelName = 3;
  inline bool has_channelname() const;
  inline void clear_channelname();
  static const int kChannelNameFieldNumber = 3;
  inline const ::std::string& channelname() const;
  inline void set_channelname(const ::std::string& value);
  inline void set_channelname(const char* value);
  inline void set_channelname(const char* value, size_t size);
  inline ::std::string* mutable_channelname();
  inline ::std::string* release_channelname();
  inline void set_allocated_channelname(::std::string* channelname);

  // optional string AccountName = 4;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 4;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional string AccountPwd = 5;
  inline bool has_accountpwd() const;
  inline void clear_accountpwd();
  static const int kAccountPwdFieldNumber = 5;
  inline const ::std::string& accountpwd() const;
  inline void set_accountpwd(const ::std::string& value);
  inline void set_accountpwd(const char* value);
  inline void set_accountpwd(const char* value, size_t size);
  inline ::std::string* mutable_accountpwd();
  inline ::std::string* release_accountpwd();
  inline void set_allocated_accountpwd(::std::string* accountpwd);

  // optional string AccountKey = 6;
  inline bool has_accountkey() const;
  inline void clear_accountkey();
  static const int kAccountKeyFieldNumber = 6;
  inline const ::std::string& accountkey() const;
  inline void set_accountkey(const ::std::string& value);
  inline void set_accountkey(const char* value);
  inline void set_accountkey(const char* value, size_t size);
  inline ::std::string* mutable_accountkey();
  inline ::std::string* release_accountkey();
  inline void set_allocated_accountkey(::std::string* accountkey);

  // optional sint32 IsAdult = 7;
  inline bool has_isadult() const;
  inline void clear_isadult();
  static const int kIsAdultFieldNumber = 7;
  inline ::google::protobuf::int32 isadult() const;
  inline void set_isadult(::google::protobuf::int32 value);

  // optional string DeviceID = 8;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIDFieldNumber = 8;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountVerify)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_platformname();
  inline void clear_has_platformname();
  inline void set_has_channelname();
  inline void clear_has_channelname();
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_accountpwd();
  inline void clear_has_accountpwd();
  inline void set_has_accountkey();
  inline void clear_has_accountkey();
  inline void set_has_isadult();
  inline void clear_has_isadult();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 accountid_;
  ::std::string* platformname_;
  ::std::string* channelname_;
  ::std::string* accountname_;
  ::std::string* accountpwd_;
  ::std::string* accountkey_;
  ::std::string* deviceid_;
  ::google::protobuf::int32 isadult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_accountVerify_2eproto();
  friend void protobuf_AssignDesc_accountVerify_2eproto();
  friend void protobuf_ShutdownFile_accountVerify_2eproto();

  void InitAsDefaultInstance();
  static CAccountVerify* default_instance_;
};
// -------------------------------------------------------------------

class CAccountVerify_PlatformName : public ::google::protobuf::Message {
 public:
  CAccountVerify_PlatformName();
  virtual ~CAccountVerify_PlatformName();

  CAccountVerify_PlatformName(const CAccountVerify_PlatformName& from);

  inline CAccountVerify_PlatformName& operator=(const CAccountVerify_PlatformName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountVerify_PlatformName& default_instance();

  void Swap(CAccountVerify_PlatformName* other);

  // implements Message ----------------------------------------------

  CAccountVerify_PlatformName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountVerify_PlatformName& from);
  void MergeFrom(const CAccountVerify_PlatformName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AccountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional string PlatformName = 2;
  inline bool has_platformname() const;
  inline void clear_platformname();
  static const int kPlatformNameFieldNumber = 2;
  inline const ::std::string& platformname() const;
  inline void set_platformname(const ::std::string& value);
  inline void set_platformname(const char* value);
  inline void set_platformname(const char* value, size_t size);
  inline ::std::string* mutable_platformname();
  inline ::std::string* release_platformname();
  inline void set_allocated_platformname(::std::string* platformname);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountVerify_PlatformName)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_platformname();
  inline void clear_has_platformname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountname_;
  ::std::string* platformname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_accountVerify_2eproto();
  friend void protobuf_AssignDesc_accountVerify_2eproto();
  friend void protobuf_ShutdownFile_accountVerify_2eproto();

  void InitAsDefaultInstance();
  static CAccountVerify_PlatformName* default_instance_;
};
// -------------------------------------------------------------------

class CAccountVerify_ChannelName : public ::google::protobuf::Message {
 public:
  CAccountVerify_ChannelName();
  virtual ~CAccountVerify_ChannelName();

  CAccountVerify_ChannelName(const CAccountVerify_ChannelName& from);

  inline CAccountVerify_ChannelName& operator=(const CAccountVerify_ChannelName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountVerify_ChannelName& default_instance();

  void Swap(CAccountVerify_ChannelName* other);

  // implements Message ----------------------------------------------

  CAccountVerify_ChannelName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountVerify_ChannelName& from);
  void MergeFrom(const CAccountVerify_ChannelName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AccountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional string ChannelName = 2;
  inline bool has_channelname() const;
  inline void clear_channelname();
  static const int kChannelNameFieldNumber = 2;
  inline const ::std::string& channelname() const;
  inline void set_channelname(const ::std::string& value);
  inline void set_channelname(const char* value);
  inline void set_channelname(const char* value, size_t size);
  inline ::std::string* mutable_channelname();
  inline ::std::string* release_channelname();
  inline void set_allocated_channelname(::std::string* channelname);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountVerify_ChannelName)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_channelname();
  inline void clear_has_channelname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountname_;
  ::std::string* channelname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_accountVerify_2eproto();
  friend void protobuf_AssignDesc_accountVerify_2eproto();
  friend void protobuf_ShutdownFile_accountVerify_2eproto();

  void InitAsDefaultInstance();
  static CAccountVerify_ChannelName* default_instance_;
};
// -------------------------------------------------------------------

class CAccountVerify_AccountPwd : public ::google::protobuf::Message {
 public:
  CAccountVerify_AccountPwd();
  virtual ~CAccountVerify_AccountPwd();

  CAccountVerify_AccountPwd(const CAccountVerify_AccountPwd& from);

  inline CAccountVerify_AccountPwd& operator=(const CAccountVerify_AccountPwd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountVerify_AccountPwd& default_instance();

  void Swap(CAccountVerify_AccountPwd* other);

  // implements Message ----------------------------------------------

  CAccountVerify_AccountPwd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountVerify_AccountPwd& from);
  void MergeFrom(const CAccountVerify_AccountPwd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AccountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional string AccountPwd = 2;
  inline bool has_accountpwd() const;
  inline void clear_accountpwd();
  static const int kAccountPwdFieldNumber = 2;
  inline const ::std::string& accountpwd() const;
  inline void set_accountpwd(const ::std::string& value);
  inline void set_accountpwd(const char* value);
  inline void set_accountpwd(const char* value, size_t size);
  inline ::std::string* mutable_accountpwd();
  inline ::std::string* release_accountpwd();
  inline void set_allocated_accountpwd(::std::string* accountpwd);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountVerify_AccountPwd)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_accountpwd();
  inline void clear_has_accountpwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountname_;
  ::std::string* accountpwd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_accountVerify_2eproto();
  friend void protobuf_AssignDesc_accountVerify_2eproto();
  friend void protobuf_ShutdownFile_accountVerify_2eproto();

  void InitAsDefaultInstance();
  static CAccountVerify_AccountPwd* default_instance_;
};
// -------------------------------------------------------------------

class CAccountVerify_AccountKey : public ::google::protobuf::Message {
 public:
  CAccountVerify_AccountKey();
  virtual ~CAccountVerify_AccountKey();

  CAccountVerify_AccountKey(const CAccountVerify_AccountKey& from);

  inline CAccountVerify_AccountKey& operator=(const CAccountVerify_AccountKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountVerify_AccountKey& default_instance();

  void Swap(CAccountVerify_AccountKey* other);

  // implements Message ----------------------------------------------

  CAccountVerify_AccountKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountVerify_AccountKey& from);
  void MergeFrom(const CAccountVerify_AccountKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AccountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional string AccountKey = 2;
  inline bool has_accountkey() const;
  inline void clear_accountkey();
  static const int kAccountKeyFieldNumber = 2;
  inline const ::std::string& accountkey() const;
  inline void set_accountkey(const ::std::string& value);
  inline void set_accountkey(const char* value);
  inline void set_accountkey(const char* value, size_t size);
  inline ::std::string* mutable_accountkey();
  inline ::std::string* release_accountkey();
  inline void set_allocated_accountkey(::std::string* accountkey);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountVerify_AccountKey)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_accountkey();
  inline void clear_has_accountkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountname_;
  ::std::string* accountkey_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_accountVerify_2eproto();
  friend void protobuf_AssignDesc_accountVerify_2eproto();
  friend void protobuf_ShutdownFile_accountVerify_2eproto();

  void InitAsDefaultInstance();
  static CAccountVerify_AccountKey* default_instance_;
};
// -------------------------------------------------------------------

class CAccountVerify_IsAdult : public ::google::protobuf::Message {
 public:
  CAccountVerify_IsAdult();
  virtual ~CAccountVerify_IsAdult();

  CAccountVerify_IsAdult(const CAccountVerify_IsAdult& from);

  inline CAccountVerify_IsAdult& operator=(const CAccountVerify_IsAdult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountVerify_IsAdult& default_instance();

  void Swap(CAccountVerify_IsAdult* other);

  // implements Message ----------------------------------------------

  CAccountVerify_IsAdult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountVerify_IsAdult& from);
  void MergeFrom(const CAccountVerify_IsAdult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AccountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional sint32 IsAdult = 2;
  inline bool has_isadult() const;
  inline void clear_isadult();
  static const int kIsAdultFieldNumber = 2;
  inline ::google::protobuf::int32 isadult() const;
  inline void set_isadult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountVerify_IsAdult)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_isadult();
  inline void clear_has_isadult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountname_;
  ::google::protobuf::int32 isadult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_accountVerify_2eproto();
  friend void protobuf_AssignDesc_accountVerify_2eproto();
  friend void protobuf_ShutdownFile_accountVerify_2eproto();

  void InitAsDefaultInstance();
  static CAccountVerify_IsAdult* default_instance_;
};
// -------------------------------------------------------------------

class CAccountVerify_DeviceID : public ::google::protobuf::Message {
 public:
  CAccountVerify_DeviceID();
  virtual ~CAccountVerify_DeviceID();

  CAccountVerify_DeviceID(const CAccountVerify_DeviceID& from);

  inline CAccountVerify_DeviceID& operator=(const CAccountVerify_DeviceID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountVerify_DeviceID& default_instance();

  void Swap(CAccountVerify_DeviceID* other);

  // implements Message ----------------------------------------------

  CAccountVerify_DeviceID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountVerify_DeviceID& from);
  void MergeFrom(const CAccountVerify_DeviceID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AccountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional string DeviceID = 2;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIDFieldNumber = 2;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountVerify_DeviceID)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* accountname_;
  ::std::string* deviceid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_accountVerify_2eproto();
  friend void protobuf_AssignDesc_accountVerify_2eproto();
  friend void protobuf_ShutdownFile_accountVerify_2eproto();

  void InitAsDefaultInstance();
  static CAccountVerify_DeviceID* default_instance_;
};
// -------------------------------------------------------------------

class CAccountVerifyList : public ::google::protobuf::Message {
 public:
  CAccountVerifyList();
  virtual ~CAccountVerifyList();

  CAccountVerifyList(const CAccountVerifyList& from);

  inline CAccountVerifyList& operator=(const CAccountVerifyList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAccountVerifyList& default_instance();

  void Swap(CAccountVerifyList* other);

  // implements Message ----------------------------------------------

  CAccountVerifyList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAccountVerifyList& from);
  void MergeFrom(const CAccountVerifyList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PTBuf.CAccountVerify Objects = 1;
  inline int objects_size() const;
  inline void clear_objects();
  static const int kObjectsFieldNumber = 1;
  inline const ::PTBuf::CAccountVerify& objects(int index) const;
  inline ::PTBuf::CAccountVerify* mutable_objects(int index);
  inline ::PTBuf::CAccountVerify* add_objects();
  inline const ::google::protobuf::RepeatedPtrField< ::PTBuf::CAccountVerify >&
      objects() const;
  inline ::google::protobuf::RepeatedPtrField< ::PTBuf::CAccountVerify >*
      mutable_objects();

  // @@protoc_insertion_point(class_scope:PTBuf.CAccountVerifyList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PTBuf::CAccountVerify > objects_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_accountVerify_2eproto();
  friend void protobuf_AssignDesc_accountVerify_2eproto();
  friend void protobuf_ShutdownFile_accountVerify_2eproto();

  void InitAsDefaultInstance();
  static CAccountVerifyList* default_instance_;
};
// ===================================================================


// ===================================================================

// CAccountVerify

// optional uint64 AccountID = 1;
inline bool CAccountVerify::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountVerify::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountVerify::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountVerify::clear_accountid() {
  accountid_ = GOOGLE_ULONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::uint64 CAccountVerify::accountid() const {
  return accountid_;
}
inline void CAccountVerify::set_accountid(::google::protobuf::uint64 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional string PlatformName = 2;
inline bool CAccountVerify::has_platformname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountVerify::set_has_platformname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountVerify::clear_has_platformname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountVerify::clear_platformname() {
  if (platformname_ != &::google::protobuf::internal::kEmptyString) {
    platformname_->clear();
  }
  clear_has_platformname();
}
inline const ::std::string& CAccountVerify::platformname() const {
  return *platformname_;
}
inline void CAccountVerify::set_platformname(const ::std::string& value) {
  set_has_platformname();
  if (platformname_ == &::google::protobuf::internal::kEmptyString) {
    platformname_ = new ::std::string;
  }
  platformname_->assign(value);
}
inline void CAccountVerify::set_platformname(const char* value) {
  set_has_platformname();
  if (platformname_ == &::google::protobuf::internal::kEmptyString) {
    platformname_ = new ::std::string;
  }
  platformname_->assign(value);
}
inline void CAccountVerify::set_platformname(const char* value, size_t size) {
  set_has_platformname();
  if (platformname_ == &::google::protobuf::internal::kEmptyString) {
    platformname_ = new ::std::string;
  }
  platformname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountVerify::mutable_platformname() {
  set_has_platformname();
  if (platformname_ == &::google::protobuf::internal::kEmptyString) {
    platformname_ = new ::std::string;
  }
  return platformname_;
}
inline ::std::string* CAccountVerify::release_platformname() {
  clear_has_platformname();
  if (platformname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platformname_;
    platformname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountVerify::set_allocated_platformname(::std::string* platformname) {
  if (platformname_ != &::google::protobuf::internal::kEmptyString) {
    delete platformname_;
  }
  if (platformname) {
    set_has_platformname();
    platformname_ = platformname;
  } else {
    clear_has_platformname();
    platformname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ChannelName = 3;
inline bool CAccountVerify::has_channelname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CAccountVerify::set_has_channelname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CAccountVerify::clear_has_channelname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CAccountVerify::clear_channelname() {
  if (channelname_ != &::google::protobuf::internal::kEmptyString) {
    channelname_->clear();
  }
  clear_has_channelname();
}
inline const ::std::string& CAccountVerify::channelname() const {
  return *channelname_;
}
inline void CAccountVerify::set_channelname(const ::std::string& value) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(value);
}
inline void CAccountVerify::set_channelname(const char* value) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(value);
}
inline void CAccountVerify::set_channelname(const char* value, size_t size) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountVerify::mutable_channelname() {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  return channelname_;
}
inline ::std::string* CAccountVerify::release_channelname() {
  clear_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelname_;
    channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountVerify::set_allocated_channelname(::std::string* channelname) {
  if (channelname_ != &::google::protobuf::internal::kEmptyString) {
    delete channelname_;
  }
  if (channelname) {
    set_has_channelname();
    channelname_ = channelname;
  } else {
    clear_has_channelname();
    channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string AccountName = 4;
inline bool CAccountVerify::has_accountname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CAccountVerify::set_has_accountname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CAccountVerify::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CAccountVerify::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& CAccountVerify::accountname() const {
  return *accountname_;
}
inline void CAccountVerify::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountVerify::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountVerify::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountVerify::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* CAccountVerify::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountVerify::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string AccountPwd = 5;
inline bool CAccountVerify::has_accountpwd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CAccountVerify::set_has_accountpwd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CAccountVerify::clear_has_accountpwd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CAccountVerify::clear_accountpwd() {
  if (accountpwd_ != &::google::protobuf::internal::kEmptyString) {
    accountpwd_->clear();
  }
  clear_has_accountpwd();
}
inline const ::std::string& CAccountVerify::accountpwd() const {
  return *accountpwd_;
}
inline void CAccountVerify::set_accountpwd(const ::std::string& value) {
  set_has_accountpwd();
  if (accountpwd_ == &::google::protobuf::internal::kEmptyString) {
    accountpwd_ = new ::std::string;
  }
  accountpwd_->assign(value);
}
inline void CAccountVerify::set_accountpwd(const char* value) {
  set_has_accountpwd();
  if (accountpwd_ == &::google::protobuf::internal::kEmptyString) {
    accountpwd_ = new ::std::string;
  }
  accountpwd_->assign(value);
}
inline void CAccountVerify::set_accountpwd(const char* value, size_t size) {
  set_has_accountpwd();
  if (accountpwd_ == &::google::protobuf::internal::kEmptyString) {
    accountpwd_ = new ::std::string;
  }
  accountpwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountVerify::mutable_accountpwd() {
  set_has_accountpwd();
  if (accountpwd_ == &::google::protobuf::internal::kEmptyString) {
    accountpwd_ = new ::std::string;
  }
  return accountpwd_;
}
inline ::std::string* CAccountVerify::release_accountpwd() {
  clear_has_accountpwd();
  if (accountpwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountpwd_;
    accountpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountVerify::set_allocated_accountpwd(::std::string* accountpwd) {
  if (accountpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete accountpwd_;
  }
  if (accountpwd) {
    set_has_accountpwd();
    accountpwd_ = accountpwd;
  } else {
    clear_has_accountpwd();
    accountpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string AccountKey = 6;
inline bool CAccountVerify::has_accountkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CAccountVerify::set_has_accountkey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CAccountVerify::clear_has_accountkey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CAccountVerify::clear_accountkey() {
  if (accountkey_ != &::google::protobuf::internal::kEmptyString) {
    accountkey_->clear();
  }
  clear_has_accountkey();
}
inline const ::std::string& CAccountVerify::accountkey() const {
  return *accountkey_;
}
inline void CAccountVerify::set_accountkey(const ::std::string& value) {
  set_has_accountkey();
  if (accountkey_ == &::google::protobuf::internal::kEmptyString) {
    accountkey_ = new ::std::string;
  }
  accountkey_->assign(value);
}
inline void CAccountVerify::set_accountkey(const char* value) {
  set_has_accountkey();
  if (accountkey_ == &::google::protobuf::internal::kEmptyString) {
    accountkey_ = new ::std::string;
  }
  accountkey_->assign(value);
}
inline void CAccountVerify::set_accountkey(const char* value, size_t size) {
  set_has_accountkey();
  if (accountkey_ == &::google::protobuf::internal::kEmptyString) {
    accountkey_ = new ::std::string;
  }
  accountkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountVerify::mutable_accountkey() {
  set_has_accountkey();
  if (accountkey_ == &::google::protobuf::internal::kEmptyString) {
    accountkey_ = new ::std::string;
  }
  return accountkey_;
}
inline ::std::string* CAccountVerify::release_accountkey() {
  clear_has_accountkey();
  if (accountkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountkey_;
    accountkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountVerify::set_allocated_accountkey(::std::string* accountkey) {
  if (accountkey_ != &::google::protobuf::internal::kEmptyString) {
    delete accountkey_;
  }
  if (accountkey) {
    set_has_accountkey();
    accountkey_ = accountkey;
  } else {
    clear_has_accountkey();
    accountkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint32 IsAdult = 7;
inline bool CAccountVerify::has_isadult() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CAccountVerify::set_has_isadult() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CAccountVerify::clear_has_isadult() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CAccountVerify::clear_isadult() {
  isadult_ = 0;
  clear_has_isadult();
}
inline ::google::protobuf::int32 CAccountVerify::isadult() const {
  return isadult_;
}
inline void CAccountVerify::set_isadult(::google::protobuf::int32 value) {
  set_has_isadult();
  isadult_ = value;
}

// optional string DeviceID = 8;
inline bool CAccountVerify::has_deviceid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CAccountVerify::set_has_deviceid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CAccountVerify::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CAccountVerify::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& CAccountVerify::deviceid() const {
  return *deviceid_;
}
inline void CAccountVerify::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void CAccountVerify::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void CAccountVerify::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountVerify::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  return deviceid_;
}
inline ::std::string* CAccountVerify::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountVerify::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CAccountVerify_PlatformName

// optional string AccountName = 1;
inline bool CAccountVerify_PlatformName::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountVerify_PlatformName::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountVerify_PlatformName::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountVerify_PlatformName::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& CAccountVerify_PlatformName::accountname() const {
  return *accountname_;
}
inline void CAccountVerify_PlatformName::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountVerify_PlatformName::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountVerify_PlatformName::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountVerify_PlatformName::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* CAccountVerify_PlatformName::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountVerify_PlatformName::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string PlatformName = 2;
inline bool CAccountVerify_PlatformName::has_platformname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountVerify_PlatformName::set_has_platformname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountVerify_PlatformName::clear_has_platformname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountVerify_PlatformName::clear_platformname() {
  if (platformname_ != &::google::protobuf::internal::kEmptyString) {
    platformname_->clear();
  }
  clear_has_platformname();
}
inline const ::std::string& CAccountVerify_PlatformName::platformname() const {
  return *platformname_;
}
inline void CAccountVerify_PlatformName::set_platformname(const ::std::string& value) {
  set_has_platformname();
  if (platformname_ == &::google::protobuf::internal::kEmptyString) {
    platformname_ = new ::std::string;
  }
  platformname_->assign(value);
}
inline void CAccountVerify_PlatformName::set_platformname(const char* value) {
  set_has_platformname();
  if (platformname_ == &::google::protobuf::internal::kEmptyString) {
    platformname_ = new ::std::string;
  }
  platformname_->assign(value);
}
inline void CAccountVerify_PlatformName::set_platformname(const char* value, size_t size) {
  set_has_platformname();
  if (platformname_ == &::google::protobuf::internal::kEmptyString) {
    platformname_ = new ::std::string;
  }
  platformname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountVerify_PlatformName::mutable_platformname() {
  set_has_platformname();
  if (platformname_ == &::google::protobuf::internal::kEmptyString) {
    platformname_ = new ::std::string;
  }
  return platformname_;
}
inline ::std::string* CAccountVerify_PlatformName::release_platformname() {
  clear_has_platformname();
  if (platformname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platformname_;
    platformname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountVerify_PlatformName::set_allocated_platformname(::std::string* platformname) {
  if (platformname_ != &::google::protobuf::internal::kEmptyString) {
    delete platformname_;
  }
  if (platformname) {
    set_has_platformname();
    platformname_ = platformname;
  } else {
    clear_has_platformname();
    platformname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CAccountVerify_ChannelName

// optional string AccountName = 1;
inline bool CAccountVerify_ChannelName::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountVerify_ChannelName::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountVerify_ChannelName::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountVerify_ChannelName::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& CAccountVerify_ChannelName::accountname() const {
  return *accountname_;
}
inline void CAccountVerify_ChannelName::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountVerify_ChannelName::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountVerify_ChannelName::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountVerify_ChannelName::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* CAccountVerify_ChannelName::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountVerify_ChannelName::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ChannelName = 2;
inline bool CAccountVerify_ChannelName::has_channelname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountVerify_ChannelName::set_has_channelname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountVerify_ChannelName::clear_has_channelname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountVerify_ChannelName::clear_channelname() {
  if (channelname_ != &::google::protobuf::internal::kEmptyString) {
    channelname_->clear();
  }
  clear_has_channelname();
}
inline const ::std::string& CAccountVerify_ChannelName::channelname() const {
  return *channelname_;
}
inline void CAccountVerify_ChannelName::set_channelname(const ::std::string& value) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(value);
}
inline void CAccountVerify_ChannelName::set_channelname(const char* value) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(value);
}
inline void CAccountVerify_ChannelName::set_channelname(const char* value, size_t size) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountVerify_ChannelName::mutable_channelname() {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  return channelname_;
}
inline ::std::string* CAccountVerify_ChannelName::release_channelname() {
  clear_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelname_;
    channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountVerify_ChannelName::set_allocated_channelname(::std::string* channelname) {
  if (channelname_ != &::google::protobuf::internal::kEmptyString) {
    delete channelname_;
  }
  if (channelname) {
    set_has_channelname();
    channelname_ = channelname;
  } else {
    clear_has_channelname();
    channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CAccountVerify_AccountPwd

// optional string AccountName = 1;
inline bool CAccountVerify_AccountPwd::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountVerify_AccountPwd::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountVerify_AccountPwd::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountVerify_AccountPwd::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& CAccountVerify_AccountPwd::accountname() const {
  return *accountname_;
}
inline void CAccountVerify_AccountPwd::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountVerify_AccountPwd::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountVerify_AccountPwd::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountVerify_AccountPwd::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* CAccountVerify_AccountPwd::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountVerify_AccountPwd::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string AccountPwd = 2;
inline bool CAccountVerify_AccountPwd::has_accountpwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountVerify_AccountPwd::set_has_accountpwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountVerify_AccountPwd::clear_has_accountpwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountVerify_AccountPwd::clear_accountpwd() {
  if (accountpwd_ != &::google::protobuf::internal::kEmptyString) {
    accountpwd_->clear();
  }
  clear_has_accountpwd();
}
inline const ::std::string& CAccountVerify_AccountPwd::accountpwd() const {
  return *accountpwd_;
}
inline void CAccountVerify_AccountPwd::set_accountpwd(const ::std::string& value) {
  set_has_accountpwd();
  if (accountpwd_ == &::google::protobuf::internal::kEmptyString) {
    accountpwd_ = new ::std::string;
  }
  accountpwd_->assign(value);
}
inline void CAccountVerify_AccountPwd::set_accountpwd(const char* value) {
  set_has_accountpwd();
  if (accountpwd_ == &::google::protobuf::internal::kEmptyString) {
    accountpwd_ = new ::std::string;
  }
  accountpwd_->assign(value);
}
inline void CAccountVerify_AccountPwd::set_accountpwd(const char* value, size_t size) {
  set_has_accountpwd();
  if (accountpwd_ == &::google::protobuf::internal::kEmptyString) {
    accountpwd_ = new ::std::string;
  }
  accountpwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountVerify_AccountPwd::mutable_accountpwd() {
  set_has_accountpwd();
  if (accountpwd_ == &::google::protobuf::internal::kEmptyString) {
    accountpwd_ = new ::std::string;
  }
  return accountpwd_;
}
inline ::std::string* CAccountVerify_AccountPwd::release_accountpwd() {
  clear_has_accountpwd();
  if (accountpwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountpwd_;
    accountpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountVerify_AccountPwd::set_allocated_accountpwd(::std::string* accountpwd) {
  if (accountpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete accountpwd_;
  }
  if (accountpwd) {
    set_has_accountpwd();
    accountpwd_ = accountpwd;
  } else {
    clear_has_accountpwd();
    accountpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CAccountVerify_AccountKey

// optional string AccountName = 1;
inline bool CAccountVerify_AccountKey::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountVerify_AccountKey::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountVerify_AccountKey::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountVerify_AccountKey::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& CAccountVerify_AccountKey::accountname() const {
  return *accountname_;
}
inline void CAccountVerify_AccountKey::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountVerify_AccountKey::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountVerify_AccountKey::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountVerify_AccountKey::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* CAccountVerify_AccountKey::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountVerify_AccountKey::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string AccountKey = 2;
inline bool CAccountVerify_AccountKey::has_accountkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountVerify_AccountKey::set_has_accountkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountVerify_AccountKey::clear_has_accountkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountVerify_AccountKey::clear_accountkey() {
  if (accountkey_ != &::google::protobuf::internal::kEmptyString) {
    accountkey_->clear();
  }
  clear_has_accountkey();
}
inline const ::std::string& CAccountVerify_AccountKey::accountkey() const {
  return *accountkey_;
}
inline void CAccountVerify_AccountKey::set_accountkey(const ::std::string& value) {
  set_has_accountkey();
  if (accountkey_ == &::google::protobuf::internal::kEmptyString) {
    accountkey_ = new ::std::string;
  }
  accountkey_->assign(value);
}
inline void CAccountVerify_AccountKey::set_accountkey(const char* value) {
  set_has_accountkey();
  if (accountkey_ == &::google::protobuf::internal::kEmptyString) {
    accountkey_ = new ::std::string;
  }
  accountkey_->assign(value);
}
inline void CAccountVerify_AccountKey::set_accountkey(const char* value, size_t size) {
  set_has_accountkey();
  if (accountkey_ == &::google::protobuf::internal::kEmptyString) {
    accountkey_ = new ::std::string;
  }
  accountkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountVerify_AccountKey::mutable_accountkey() {
  set_has_accountkey();
  if (accountkey_ == &::google::protobuf::internal::kEmptyString) {
    accountkey_ = new ::std::string;
  }
  return accountkey_;
}
inline ::std::string* CAccountVerify_AccountKey::release_accountkey() {
  clear_has_accountkey();
  if (accountkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountkey_;
    accountkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountVerify_AccountKey::set_allocated_accountkey(::std::string* accountkey) {
  if (accountkey_ != &::google::protobuf::internal::kEmptyString) {
    delete accountkey_;
  }
  if (accountkey) {
    set_has_accountkey();
    accountkey_ = accountkey;
  } else {
    clear_has_accountkey();
    accountkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CAccountVerify_IsAdult

// optional string AccountName = 1;
inline bool CAccountVerify_IsAdult::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountVerify_IsAdult::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountVerify_IsAdult::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountVerify_IsAdult::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& CAccountVerify_IsAdult::accountname() const {
  return *accountname_;
}
inline void CAccountVerify_IsAdult::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountVerify_IsAdult::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountVerify_IsAdult::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountVerify_IsAdult::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* CAccountVerify_IsAdult::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountVerify_IsAdult::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint32 IsAdult = 2;
inline bool CAccountVerify_IsAdult::has_isadult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountVerify_IsAdult::set_has_isadult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountVerify_IsAdult::clear_has_isadult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountVerify_IsAdult::clear_isadult() {
  isadult_ = 0;
  clear_has_isadult();
}
inline ::google::protobuf::int32 CAccountVerify_IsAdult::isadult() const {
  return isadult_;
}
inline void CAccountVerify_IsAdult::set_isadult(::google::protobuf::int32 value) {
  set_has_isadult();
  isadult_ = value;
}

// -------------------------------------------------------------------

// CAccountVerify_DeviceID

// optional string AccountName = 1;
inline bool CAccountVerify_DeviceID::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountVerify_DeviceID::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAccountVerify_DeviceID::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAccountVerify_DeviceID::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& CAccountVerify_DeviceID::accountname() const {
  return *accountname_;
}
inline void CAccountVerify_DeviceID::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountVerify_DeviceID::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void CAccountVerify_DeviceID::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountVerify_DeviceID::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* CAccountVerify_DeviceID::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountVerify_DeviceID::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string DeviceID = 2;
inline bool CAccountVerify_DeviceID::has_deviceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountVerify_DeviceID::set_has_deviceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAccountVerify_DeviceID::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAccountVerify_DeviceID::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& CAccountVerify_DeviceID::deviceid() const {
  return *deviceid_;
}
inline void CAccountVerify_DeviceID::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void CAccountVerify_DeviceID::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void CAccountVerify_DeviceID::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAccountVerify_DeviceID::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  return deviceid_;
}
inline ::std::string* CAccountVerify_DeviceID::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAccountVerify_DeviceID::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CAccountVerifyList

// repeated .PTBuf.CAccountVerify Objects = 1;
inline int CAccountVerifyList::objects_size() const {
  return objects_.size();
}
inline void CAccountVerifyList::clear_objects() {
  objects_.Clear();
}
inline const ::PTBuf::CAccountVerify& CAccountVerifyList::objects(int index) const {
  return objects_.Get(index);
}
inline ::PTBuf::CAccountVerify* CAccountVerifyList::mutable_objects(int index) {
  return objects_.Mutable(index);
}
inline ::PTBuf::CAccountVerify* CAccountVerifyList::add_objects() {
  return objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PTBuf::CAccountVerify >&
CAccountVerifyList::objects() const {
  return objects_;
}
inline ::google::protobuf::RepeatedPtrField< ::PTBuf::CAccountVerify >*
CAccountVerifyList::mutable_objects() {
  return &objects_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PTBuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_accountVerify_2eproto__INCLUDED
