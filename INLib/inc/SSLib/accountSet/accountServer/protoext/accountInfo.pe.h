// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

#ifndef PROTOEXT_CAccountInfo__INCLUDED
#define PROTOEXT_CAccountInfo__INCLUDED

#include <BCLib/utility/singleton.h>
#include <BCLib/utility/hashMap.h>
#include "accountInfo.pb.h"

namespace PTExt
{

class CAccountInfo
{
public:
    CAccountInfo();
    CAccountInfo(const PTBuf::CAccountInfo& ptBuf);
    virtual ~CAccountInfo();

    PTBuf::CAccountInfo& getBuf();
    void dumpInfo();

    static bool isValidity(PTBuf::CAccountInfo& ptBuf);
    static bool makeValidity(PTBuf::CAccountInfo& ptBuf);
    static bool canUpdate(PTBuf::CAccountInfo& oldBuf, PTBuf::CAccountInfo& newBuf);

private:
    PTBuf::CAccountInfo m_ptBuf;
};

// Use EntityID Key
class CAccountInfoOwner
{
    BCLIB_SINGLETON_DECLARE(CAccountInfoOwner);

public:
    typedef BCLib::Utility::CHashMap<BCLib::uint64, PTExt::CAccountInfo> THashMap;

protected:
    CAccountInfoOwner();
    virtual ~CAccountInfoOwner();

public:
    bool addObject(BCLib::uint64 key, const PTBuf::CAccountInfo& ptBuf);
    bool addObject(BCLib::uint64 key, const PTExt::CAccountInfo& ptBuf);
    PTExt::CAccountInfo* getObject(BCLib::uint64 entityID);
    bool delObject(BCLib::uint64 entityID);

    THashMap& getMap(){ return m_hashMap; }
    void dumpInfo(BCLib::uint64 entityID);

private:
    THashMap m_hashMap;
};

// Use Oneself Key
class CAccountInfoList
{
public:
    CAccountInfoList();
    CAccountInfoList(const PTBuf::CAccountInfoList& ptList);
    virtual ~CAccountInfoList();

    PTBuf::CAccountInfoList& getList();
    void dumpInfo();

private:
    PTBuf::CAccountInfoList m_List;
};

// Only define CAccountInfoList singleton
class CAccountInfoListCtrl : public CAccountInfoList
{
    BCLIB_SINGLETON_DECLARE(CAccountInfoListCtrl);

protected:
    CAccountInfoListCtrl();
    virtual ~CAccountInfoListCtrl();
};

// Use EntityID Key
class CAccountInfoListOwner
{
    BCLIB_SINGLETON_DECLARE(CAccountInfoListOwner);

public:
    typedef BCLib::Utility::CHashMap<BCLib::uint64, PTExt::CAccountInfoList> THashMap;

protected:
    CAccountInfoListOwner();
    virtual ~CAccountInfoListOwner();

public:
    bool addObject(BCLib::uint64 entityID, const PTBuf::CAccountInfoList& ptList);
    bool addObject(BCLib::uint64 entityID, const PTExt::CAccountInfoList& ptList);
    PTExt::CAccountInfoList* getObject(BCLib::uint64 entityID);
    bool delObject(BCLib::uint64 entityID);

    THashMap& getMap(){ return m_hashMap; }
    void dumpInfo(BCLib::uint64 entityID);

private:
    THashMap m_hashMap;
};

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_SENTENCE_INSERT_CAccountInfo(_PTBUF_)    \
    sqlSentence.str("");    \
    sqlSentence << "INSERT INTO " << strTBName.c_str() << " ";    \
    sqlSentence << "( ";    \
    sqlSentence << "AccountID, ";    \
    sqlSentence << "GroupList, ";    \
    sqlSentence << "ProjectList ";    \
    sqlSentence << ") ";    \
    sqlSentence << "VALUES ";    \
    sqlSentence << "( ";    \
    sqlSentence << "'" << _PTBUF_.accountid() << "', ";    \
    sqlSentence << "'" << _PTBUF_.grouplist() << "', ";    \
    sqlSentence << "'" << _PTBUF_.projectlist() << "' ";    \
    sqlSentence << ");";

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_SENTENCE_SELECT_CAccountInfo(_PTBUF_)    \
    sqlSentence.str("");    \
    sqlSentence << "SELECT * FROM " << strTBName.c_str() << " ";    \
    sqlSentence << "WHERE AccountID = '" << _PTBUF_.accountid() << "'; ";

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_SENTENCE_UPDATE_CAccountInfo(_PTBUF_)    \
    sqlSentence.str("");    \
    sqlSentence << "UPDATE " << strTBName.c_str() << " SET ";    \
    sqlSentence << "GroupList = '" << _PTBUF_.grouplist() << "', ";    \
    sqlSentence << "ProjectList = '" << _PTBUF_.projectlist() << "' ";    \
    sqlSentence << "WHERE AccountID = '" << _PTBUF_.accountid() << "'; ";

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_SENTENCE_DELETE_CAccountInfo(_PTBUF_)    \
    sqlSentence.str("");    \
    sqlSentence << "DELETE FROM " << strTBName.c_str() << " ";    \
    sqlSentence << "WHERE AccountID = '" << _PTBUF_.accountid() << "'; ";

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ExecuteReader_CAccountInfo(_PTBUF_)    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadUint64(_PTBUF_, accountid);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, grouplist);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, projectlist);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, modifytime);

} // namespace PTExt

#endif // PROTOEXT_CAccountInfo__INCLUDED
