// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

#ifndef PROTOEXT_CGroupInfo__INCLUDED
#define PROTOEXT_CGroupInfo__INCLUDED

#include <BCLib/utility/singleton.h>
#include <BCLib/utility/hashMap.h>
#include "groupInfo.pb.h"

namespace PTExt
{

class CGroupInfo
{
public:
    CGroupInfo();
    CGroupInfo(const PTBuf::CGroupInfo& ptBuf);
    virtual ~CGroupInfo();

    PTBuf::CGroupInfo& getBuf();
    void dumpInfo();

    static bool isValidity(PTBuf::CGroupInfo& ptBuf);
    static bool makeValidity(PTBuf::CGroupInfo& ptBuf);
    static bool canUpdate(PTBuf::CGroupInfo& oldBuf, PTBuf::CGroupInfo& newBuf);

private:
    PTBuf::CGroupInfo m_ptBuf;
};

// Use EntityID Key
class CGroupInfoOwner
{
    BCLIB_SINGLETON_DECLARE(CGroupInfoOwner);

public:
    typedef BCLib::Utility::CHashMap<BCLib::uint64, PTExt::CGroupInfo> THashMap;

protected:
    CGroupInfoOwner();
    virtual ~CGroupInfoOwner();

public:
    bool addObject(BCLib::uint64 key, const PTBuf::CGroupInfo& ptBuf);
    bool addObject(BCLib::uint64 key, const PTExt::CGroupInfo& ptBuf);
    PTExt::CGroupInfo* getObject(BCLib::uint64 entityID);
    bool delObject(BCLib::uint64 entityID);

    THashMap& getMap(){ return m_hashMap; }
    void dumpInfo(BCLib::uint64 entityID);

private:
    THashMap m_hashMap;
};

// Use Oneself Key
class CGroupInfoList
{
public:
    CGroupInfoList();
    CGroupInfoList(const PTBuf::CGroupInfoList& ptList);
    virtual ~CGroupInfoList();

    PTBuf::CGroupInfoList& getList();
    void dumpInfo();

private:
    PTBuf::CGroupInfoList m_List;
};

// Only define CGroupInfoList singleton
class CGroupInfoListCtrl : public CGroupInfoList
{
    BCLIB_SINGLETON_DECLARE(CGroupInfoListCtrl);

protected:
    CGroupInfoListCtrl();
    virtual ~CGroupInfoListCtrl();
};

// Use EntityID Key
class CGroupInfoListOwner
{
    BCLIB_SINGLETON_DECLARE(CGroupInfoListOwner);

public:
    typedef BCLib::Utility::CHashMap<BCLib::uint64, PTExt::CGroupInfoList> THashMap;

protected:
    CGroupInfoListOwner();
    virtual ~CGroupInfoListOwner();

public:
    bool addObject(BCLib::uint64 entityID, const PTBuf::CGroupInfoList& ptList);
    bool addObject(BCLib::uint64 entityID, const PTExt::CGroupInfoList& ptList);
    PTExt::CGroupInfoList* getObject(BCLib::uint64 entityID);
    bool delObject(BCLib::uint64 entityID);

    THashMap& getMap(){ return m_hashMap; }
    void dumpInfo(BCLib::uint64 entityID);

private:
    THashMap m_hashMap;
};

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_SENTENCE_INSERT_CGroupInfo(_PTBUF_)    \
    sqlSentence.str("");    \
    sqlSentence << "INSERT INTO " << strTBName.c_str() << " ";    \
    sqlSentence << "( ";    \
    sqlSentence << "GroupName, ";    \
    sqlSentence << "AccountID, ";    \
    sqlSentence << "GroupType, ";    \
    sqlSentence << "GroupState, ";    \
    sqlSentence << "Permission, ";    \
    sqlSentence << "Members ";    \
    sqlSentence << ") ";    \
    sqlSentence << "VALUES ";    \
    sqlSentence << "( ";    \
    sqlSentence << "'" << _PTBUF_.groupname() << "', ";    \
    sqlSentence << "'" << _PTBUF_.accountid() << "', ";    \
    sqlSentence << "'" << _PTBUF_.grouptype() << "', ";    \
    sqlSentence << "'" << _PTBUF_.groupstate() << "', ";    \
    sqlSentence << "'" << _PTBUF_.permission() << "', ";    \
    sqlSentence << "'" << _PTBUF_.members() << "' ";    \
    sqlSentence << ");";

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_SENTENCE_SELECT_CGroupInfo(_PTBUF_)    \
    sqlSentence.str("");    \
    sqlSentence << "SELECT * FROM " << strTBName.c_str() << " ";    \
    sqlSentence << "WHERE GroupName = '" << _PTBUF_.groupname() << "'; ";

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_SENTENCE_UPDATE_CGroupInfo(_PTBUF_)    \
    sqlSentence.str("");    \
    sqlSentence << "UPDATE " << strTBName.c_str() << " SET ";    \
    sqlSentence << "AccountID = '" << _PTBUF_.accountid() << "', ";    \
    sqlSentence << "GroupType = '" << _PTBUF_.grouptype() << "', ";    \
    sqlSentence << "GroupState = '" << _PTBUF_.groupstate() << "', ";    \
    sqlSentence << "Permission = '" << _PTBUF_.permission() << "', ";    \
    sqlSentence << "Members = '" << _PTBUF_.members() << "' ";    \
    sqlSentence << "WHERE GroupName = '" << _PTBUF_.groupname() << "'; ";

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_SENTENCE_DELETE_CGroupInfo(_PTBUF_)    \
    sqlSentence.str("");    \
    sqlSentence << "DELETE FROM " << strTBName.c_str() << " ";    \
    sqlSentence << "WHERE GroupName = '" << _PTBUF_.groupname() << "'; ";

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ExecuteReader_CGroupInfo(_PTBUF_)    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadUint64(_PTBUF_, groupid);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, groupname);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadUint64(_PTBUF_, accountid);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadUint32(_PTBUF_, grouptype);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadUint32(_PTBUF_, groupstate);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, permission);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, members);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, modifytime);

} // namespace PTExt

#endif // PROTOEXT_CGroupInfo__INCLUDED
