// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

#ifndef PROTOEXT_CAccountAuth__INCLUDED
#define PROTOEXT_CAccountAuth__INCLUDED

#include <BCLib/utility/singleton.h>
#include <BCLib/utility/hashMap.h>
#include "accountAuth.pb.h"

namespace PTExt
{

class CAccountAuth
{
public:
    CAccountAuth();
    CAccountAuth(const PTBuf::CAccountAuth& ptBuf);
    virtual ~CAccountAuth();

    PTBuf::CAccountAuth& getBuf();
    void dumpInfo();

    static bool isValidity(PTBuf::CAccountAuth& ptBuf);
    static bool makeValidity(PTBuf::CAccountAuth& ptBuf);
    static bool canUpdate(PTBuf::CAccountAuth& oldBuf, PTBuf::CAccountAuth& newBuf);

private:
    PTBuf::CAccountAuth m_ptBuf;
};

// Use EntityID Key
class CAccountAuthOwner
{
    BCLIB_SINGLETON_DECLARE(CAccountAuthOwner);

public:
    typedef BCLib::Utility::CHashMap<BCLib::uint64, PTExt::CAccountAuth> THashMap;

protected:
    CAccountAuthOwner();
    virtual ~CAccountAuthOwner();

public:
    bool addObject(BCLib::uint64 key, const PTBuf::CAccountAuth& ptBuf);
    bool addObject(BCLib::uint64 key, const PTExt::CAccountAuth& ptBuf);
    PTExt::CAccountAuth* getObject(BCLib::uint64 entityID);
    bool delObject(BCLib::uint64 entityID);

    THashMap& getMap(){ return m_hashMap; }
    void dumpInfo(BCLib::uint64 entityID);

private:
    THashMap m_hashMap;
};

// Use Oneself Key
class CAccountAuthList
{
public:
    CAccountAuthList();
    CAccountAuthList(const PTBuf::CAccountAuthList& ptList);
    virtual ~CAccountAuthList();

    PTBuf::CAccountAuthList& getList();
    void dumpInfo();

private:
    PTBuf::CAccountAuthList m_List;
};

// Only define CAccountAuthList singleton
class CAccountAuthListCtrl : public CAccountAuthList
{
    BCLIB_SINGLETON_DECLARE(CAccountAuthListCtrl);

protected:
    CAccountAuthListCtrl();
    virtual ~CAccountAuthListCtrl();
};

// Use EntityID Key
class CAccountAuthListOwner
{
    BCLIB_SINGLETON_DECLARE(CAccountAuthListOwner);

public:
    typedef BCLib::Utility::CHashMap<BCLib::uint64, PTExt::CAccountAuthList> THashMap;

protected:
    CAccountAuthListOwner();
    virtual ~CAccountAuthListOwner();

public:
    bool addObject(BCLib::uint64 entityID, const PTBuf::CAccountAuthList& ptList);
    bool addObject(BCLib::uint64 entityID, const PTExt::CAccountAuthList& ptList);
    PTExt::CAccountAuthList* getObject(BCLib::uint64 entityID);
    bool delObject(BCLib::uint64 entityID);

    THashMap& getMap(){ return m_hashMap; }
    void dumpInfo(BCLib::uint64 entityID);

private:
    THashMap m_hashMap;
};

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_SENTENCE_INSERT_CAccountAuth(_PTBUF_)    \
    sqlSentence.str("");    \
    sqlSentence << "INSERT INTO " << strTBName.c_str() << " ";    \
    sqlSentence << "( ";    \
    sqlSentence << "AccountName, ";    \
    sqlSentence << "AccountPwd, ";    \
    sqlSentence << "AccountOrigin, ";    \
    sqlSentence << "AccountState, ";    \
    sqlSentence << "Permission, ";    \
    sqlSentence << "Nickname, ";    \
    sqlSentence << "Email, ";    \
    sqlSentence << "EmailAuth, ";    \
    sqlSentence << "MobilePhone, ";    \
    sqlSentence << "MobilePhoneAuth, ";    \
    sqlSentence << "IDCard, ";    \
    sqlSentence << "IDCardAuth, ";    \
    sqlSentence << "Birthday, ";    \
    sqlSentence << "RegisterIP, ";    \
    sqlSentence << "RegisterTime, ";    \
    sqlSentence << "LoginIP, ";    \
    sqlSentence << "LoginTime, ";    \
    sqlSentence << "LimitIP ";    \
    sqlSentence << ") ";    \
    sqlSentence << "VALUES ";    \
    sqlSentence << "( ";    \
    sqlSentence << "'" << _PTBUF_.accountname() << "', ";    \
    sqlSentence << "'" << _PTBUF_.accountpwd() << "', ";    \
    sqlSentence << "'" << _PTBUF_.accountorigin() << "', ";    \
    sqlSentence << "'" << _PTBUF_.accountstate() << "', ";    \
    sqlSentence << "'" << _PTBUF_.permission() << "', ";    \
    sqlSentence << "'" << _PTBUF_.nickname() << "', ";    \
    sqlSentence << "'" << _PTBUF_.email() << "', ";    \
    sqlSentence << "'" << _PTBUF_.emailauth() << "', ";    \
    sqlSentence << "'" << _PTBUF_.mobilephone() << "', ";    \
    sqlSentence << "'" << _PTBUF_.mobilephoneauth() << "', ";    \
    sqlSentence << "'" << _PTBUF_.idcard() << "', ";    \
    sqlSentence << "'" << _PTBUF_.idcardauth() << "', ";    \
    sqlSentence << "'" << _PTBUF_.birthday() << "', ";    \
    sqlSentence << "'" << _PTBUF_.registerip() << "', ";    \
    sqlSentence << "'" << _PTBUF_.registertime() << "', ";    \
    sqlSentence << "'" << _PTBUF_.loginip() << "', ";    \
    sqlSentence << "'" << _PTBUF_.logintime() << "', ";    \
    sqlSentence << "'" << _PTBUF_.limitip() << "' ";    \
    sqlSentence << ");";

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_SENTENCE_SELECT_CAccountAuth(_PTBUF_)    \
    sqlSentence.str("");    \
    sqlSentence << "SELECT * FROM " << strTBName.c_str() << " ";    \
    sqlSentence << "WHERE AccountName = '" << _PTBUF_.accountname() << "'; ";

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_SENTENCE_UPDATE_CAccountAuth(_PTBUF_)    \
    sqlSentence.str("");    \
    sqlSentence << "UPDATE " << strTBName.c_str() << " SET ";    \
    sqlSentence << "AccountPwd = '" << _PTBUF_.accountpwd() << "', ";    \
    sqlSentence << "AccountState = '" << _PTBUF_.accountstate() << "', ";    \
    sqlSentence << "Permission = '" << _PTBUF_.permission() << "', ";    \
    sqlSentence << "Nickname = '" << _PTBUF_.nickname() << "', ";    \
    sqlSentence << "Email = '" << _PTBUF_.email() << "', ";    \
    sqlSentence << "EmailAuth = '" << _PTBUF_.emailauth() << "', ";    \
    sqlSentence << "MobilePhone = '" << _PTBUF_.mobilephone() << "', ";    \
    sqlSentence << "MobilePhoneAuth = '" << _PTBUF_.mobilephoneauth() << "', ";    \
    sqlSentence << "IDCard = '" << _PTBUF_.idcard() << "', ";    \
    sqlSentence << "IDCardAuth = '" << _PTBUF_.idcardauth() << "', ";    \
    sqlSentence << "Birthday = '" << _PTBUF_.birthday() << "', ";    \
    sqlSentence << "LoginIP = '" << _PTBUF_.loginip() << "', ";    \
    sqlSentence << "LoginTime = '" << _PTBUF_.logintime() << "', ";    \
    sqlSentence << "LimitIP = '" << _PTBUF_.limitip() << "' ";    \
    sqlSentence << "WHERE AccountName = '" << _PTBUF_.accountname() << "'; ";

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_SENTENCE_DELETE_CAccountAuth(_PTBUF_)    \
    sqlSentence.str("");    \
    sqlSentence << "DELETE FROM " << strTBName.c_str() << " ";    \
    sqlSentence << "WHERE AccountName = '" << _PTBUF_.accountname() << "'; ";

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ExecuteReader_CAccountAuth(_PTBUF_)    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadUint64(_PTBUF_, accountid);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, accountname);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, accountpwd);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadUint32(_PTBUF_, accountorigin);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadUint32(_PTBUF_, accountstate);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadUint64(_PTBUF_, permission);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, nickname);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, email);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadUint32(_PTBUF_, emailauth);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, mobilephone);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadUint32(_PTBUF_, mobilephoneauth);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, idcard);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadUint32(_PTBUF_, idcardauth);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, registerip);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, loginip);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, limitip);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, modifytime);

} // namespace PTExt

#endif // PROTOEXT_CAccountAuth__INCLUDED
