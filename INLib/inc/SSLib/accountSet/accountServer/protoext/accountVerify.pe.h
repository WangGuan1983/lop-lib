// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

#ifndef PROTOEXT_CAccountVerify__INCLUDED
#define PROTOEXT_CAccountVerify__INCLUDED

#include <BCLib/utility/singleton.h>
#include <BCLib/utility/hashMap.h>
#include "accountVerify.pb.h"

namespace PTExt
{

class CAccountVerify
{
public:
    CAccountVerify();
    CAccountVerify(const PTBuf::CAccountVerify& ptBuf);
    virtual ~CAccountVerify();

    PTBuf::CAccountVerify& getBuf();
    void dumpInfo();

    static bool isValidity(PTBuf::CAccountVerify& ptBuf);
    static bool makeValidity(PTBuf::CAccountVerify& ptBuf);
    static bool canUpdate(PTBuf::CAccountVerify& oldBuf, PTBuf::CAccountVerify& newBuf);

private:
    PTBuf::CAccountVerify m_ptBuf;
};

// Use EntityID Key
class CAccountVerifyOwner
{
    BCLIB_SINGLETON_DECLARE(CAccountVerifyOwner);

public:
    typedef BCLib::Utility::CHashMap<BCLib::uint64, PTExt::CAccountVerify> THashMap;

protected:
    CAccountVerifyOwner();
    virtual ~CAccountVerifyOwner();

public:
    bool addObject(BCLib::uint64 key, const PTBuf::CAccountVerify& ptBuf);
    bool addObject(BCLib::uint64 key, const PTExt::CAccountVerify& ptBuf);
    PTExt::CAccountVerify* getObject(BCLib::uint64 entityID);
    bool delObject(BCLib::uint64 entityID);

    THashMap& getMap(){ return m_hashMap; }
    void dumpInfo(BCLib::uint64 entityID);

private:
    THashMap m_hashMap;
};

// Use Oneself Key
class CAccountVerifyList
{
public:
    CAccountVerifyList();
    CAccountVerifyList(const PTBuf::CAccountVerifyList& ptList);
    virtual ~CAccountVerifyList();

    PTBuf::CAccountVerifyList& getList();
    void dumpInfo();

    bool addObject(const PTBuf::CAccountVerify& ptBuf);
    const PTBuf::CAccountVerify* getObject(BCLib::uint64 accountID);
    bool delObject(BCLib::uint64 accountID);

    void makeValidity();
    void makeValidity(PTBuf::CAccountVerifyList& ptBuf);

private:
    PTBuf::CAccountVerifyList m_List;
};

// Only define CAccountVerifyList singleton
class CAccountVerifyListCtrl : public CAccountVerifyList
{
    BCLIB_SINGLETON_DECLARE(CAccountVerifyListCtrl);

protected:
    CAccountVerifyListCtrl();
    virtual ~CAccountVerifyListCtrl();
};

// Use EntityID Key
class CAccountVerifyListOwner
{
    BCLIB_SINGLETON_DECLARE(CAccountVerifyListOwner);

public:
    typedef BCLib::Utility::CHashMap<BCLib::uint64, PTExt::CAccountVerifyList> THashMap;

protected:
    CAccountVerifyListOwner();
    virtual ~CAccountVerifyListOwner();

public:
    bool addObject(BCLib::uint64 entityID, const PTBuf::CAccountVerifyList& ptList);
    bool addObject(BCLib::uint64 entityID, const PTExt::CAccountVerifyList& ptList);
    PTExt::CAccountVerifyList* getObject(BCLib::uint64 entityID);
    bool delObject(BCLib::uint64 entityID);

    THashMap& getMap(){ return m_hashMap; }
    void dumpInfo(BCLib::uint64 entityID);

private:
    THashMap m_hashMap;
};

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_SENTENCE_INSERT_CAccountVerify(_PTBUF_)    \
    sqlSentence.str("");    \
    sqlSentence << "INSERT INTO " << strTBName.c_str() << " ";    \
    sqlSentence << "( ";    \
    sqlSentence << "PlatformName, ";    \
    sqlSentence << "ChannelName, ";    \
    sqlSentence << "AccountName, ";    \
    sqlSentence << "AccountPwd, ";    \
    sqlSentence << "AccountKey, ";    \
    sqlSentence << "IsAdult, ";    \
    sqlSentence << "DeviceID ";    \
    sqlSentence << ") ";    \
    sqlSentence << "VALUES ";    \
    sqlSentence << "( ";    \
    sqlSentence << "'" << _PTBUF_.platformname() << "', ";    \
    sqlSentence << "'" << _PTBUF_.channelname() << "', ";    \
    sqlSentence << "'" << _PTBUF_.accountname() << "', ";    \
    sqlSentence << "'" << _PTBUF_.accountpwd() << "', ";    \
    sqlSentence << "'" << _PTBUF_.accountkey() << "', ";    \
    sqlSentence << "'" << _PTBUF_.isadult() << "', ";    \
    sqlSentence << "'" << _PTBUF_.deviceid() << "' ";    \
    sqlSentence << ");";

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_SENTENCE_SELECT_CAccountVerify(_PTBUF_)    \
    sqlSentence.str("");    \
    sqlSentence << "SELECT * FROM " << strTBName.c_str() << " ";    \
    sqlSentence << "WHERE AccountName = '" << _PTBUF_.accountname() << "'; ";

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_SENTENCE_UPDATE_CAccountVerify(_PTBUF_)    \
    sqlSentence.str("");    \
    sqlSentence << "UPDATE " << strTBName.c_str() << " SET ";    \
    sqlSentence << "PlatformName = '" << _PTBUF_.platformname() << "', ";    \
    sqlSentence << "ChannelName = '" << _PTBUF_.channelname() << "', ";    \
    sqlSentence << "AccountPwd = '" << _PTBUF_.accountpwd() << "', ";    \
    sqlSentence << "AccountKey = '" << _PTBUF_.accountkey() << "', ";    \
    sqlSentence << "IsAdult = '" << _PTBUF_.isadult() << "', ";    \
    sqlSentence << "DeviceID = '" << _PTBUF_.deviceid() << "' ";    \
    sqlSentence << "WHERE AccountName = '" << _PTBUF_.accountname() << "'; ";

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_SENTENCE_DELETE_CAccountVerify(_PTBUF_)    \
    sqlSentence.str("");    \
    sqlSentence << "DELETE FROM " << strTBName.c_str() << " ";    \
    sqlSentence << "WHERE AccountName = '" << _PTBUF_.accountname() << "'; ";

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ExecuteReader_CAccountVerify(_PTBUF_)    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadUint64(_PTBUF_, accountid);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, platformname);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, channelname);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, accountname);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, accountpwd);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, accountkey);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, deviceid);

} // namespace PTExt

#endif // PROTOEXT_CAccountVerify__INCLUDED
