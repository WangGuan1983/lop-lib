// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

#ifndef PROTOEXT_CProjectServer__INCLUDED
#define PROTOEXT_CProjectServer__INCLUDED

#include <BCLib/utility/singleton.h>
#include <BCLib/utility/hashMap.h>
#include "projectServer.pb.h"

namespace PTExt
{

class CProjectServer
{
public:
    CProjectServer();
    CProjectServer(const PTBuf::CProjectServer& ptBuf);
    virtual ~CProjectServer();

    PTBuf::CProjectServer& getBuf();
    void dumpInfo();

    static bool isValidity(PTBuf::CProjectServer& ptBuf);
    static bool makeValidity(PTBuf::CProjectServer& ptBuf);
    static bool canUpdate(PTBuf::CProjectServer& oldBuf, PTBuf::CProjectServer& newBuf);

private:
    PTBuf::CProjectServer m_ptBuf;
};

// Use EntityID Key
class CProjectServerOwner
{
    BCLIB_SINGLETON_DECLARE(CProjectServerOwner);

public:
    typedef BCLib::Utility::CHashMap<BCLib::uint64, PTExt::CProjectServer> THashMap;

protected:
    CProjectServerOwner();
    virtual ~CProjectServerOwner();

public:
    bool addObject(BCLib::uint64 key, const PTBuf::CProjectServer& ptBuf);
    bool addObject(BCLib::uint64 key, const PTExt::CProjectServer& ptBuf);
    PTExt::CProjectServer* getObject(BCLib::uint64 entityID);
    bool delObject(BCLib::uint64 entityID);

    THashMap& getMap(){ return m_hashMap; }
    void dumpInfo(BCLib::uint64 entityID);

private:
    THashMap m_hashMap;
};

// Use Oneself Key
class CProjectServerList
{
public:
    CProjectServerList();
    CProjectServerList(const PTBuf::CProjectServerList& ptList);
    virtual ~CProjectServerList();

    PTBuf::CProjectServerList& getList();
    void dumpInfo();

private:
    PTBuf::CProjectServerList m_List;
};

// Only define CProjectServerList singleton
class CProjectServerListCtrl : public CProjectServerList
{
    BCLIB_SINGLETON_DECLARE(CProjectServerListCtrl);

protected:
    CProjectServerListCtrl();
    virtual ~CProjectServerListCtrl();
};

// Use EntityID Key
class CProjectServerListOwner
{
    BCLIB_SINGLETON_DECLARE(CProjectServerListOwner);

public:
    typedef BCLib::Utility::CHashMap<BCLib::uint64, PTExt::CProjectServerList> THashMap;

protected:
    CProjectServerListOwner();
    virtual ~CProjectServerListOwner();

public:
    bool addObject(BCLib::uint64 entityID, const PTBuf::CProjectServerList& ptList);
    bool addObject(BCLib::uint64 entityID, const PTExt::CProjectServerList& ptList);
    PTExt::CProjectServerList* getObject(BCLib::uint64 entityID);
    bool delObject(BCLib::uint64 entityID);

    THashMap& getMap(){ return m_hashMap; }
    void dumpInfo(BCLib::uint64 entityID);

private:
    THashMap m_hashMap;
};

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_SENTENCE_INSERT_CProjectServer(_PTBUF_)    \
    sqlSentence.str("");    \
    sqlSentence << "INSERT INTO " << strTBName.c_str() << " ";    \
    sqlSentence << "( ";    \
    sqlSentence << "ProjectID, ";    \
    sqlSentence << "PlatformName, ";    \
    sqlSentence << "ChannelName, ";    \
    sqlSentence << "DeviceType, ";    \
    sqlSentence << "Version, ";    \
    sqlSentence << "ServerID, ";    \
    sqlSentence << "ServerName, ";    \
    sqlSentence << "ServerAddr, ";    \
    sqlSentence << "ServerType, ";    \
    sqlSentence << "ServerState, ";    \
    sqlSentence << "ServerIndex, ";    \
    sqlSentence << "WhiteAddr, ";    \
    sqlSentence << "OpenState, ";    \
    sqlSentence << "Members ";    \
    sqlSentence << ") ";    \
    sqlSentence << "VALUES ";    \
    sqlSentence << "( ";    \
    sqlSentence << "'" << _PTBUF_.projectid() << "', ";    \
    sqlSentence << "'" << _PTBUF_.platformname() << "', ";    \
    sqlSentence << "'" << _PTBUF_.channelname() << "', ";    \
    sqlSentence << "'" << _PTBUF_.devicetype() << "', ";    \
    sqlSentence << "'" << _PTBUF_.version() << "', ";    \
    sqlSentence << "'" << _PTBUF_.serverid() << "', ";    \
    sqlSentence << "'" << _PTBUF_.servername() << "', ";    \
    sqlSentence << "'" << _PTBUF_.serveraddr() << "', ";    \
    sqlSentence << "'" << _PTBUF_.servertype() << "', ";    \
    sqlSentence << "'" << _PTBUF_.serverstate() << "', ";    \
    sqlSentence << "'" << _PTBUF_.serverindex() << "', ";    \
    sqlSentence << "'" << _PTBUF_.whiteaddr() << "', ";    \
    sqlSentence << "'" << _PTBUF_.openstate() << "', ";    \
    sqlSentence << "'" << _PTBUF_.members() << "' ";    \
    sqlSentence << ");";

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_SENTENCE_SELECT_CProjectServer(_PTBUF_)    \
    sqlSentence.str("");    \
    sqlSentence << "SELECT * FROM " << strTBName.c_str() << " ";    \
    sqlSentence << "WHERE ProjectID = '" << _PTBUF_.projectid() << "'; ";

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_SENTENCE_UPDATE_CProjectServer(_PTBUF_)    \
    sqlSentence.str("");    \
    sqlSentence << "UPDATE " << strTBName.c_str() << " SET ";    \
    sqlSentence << "PlatformName = '" << _PTBUF_.platformname() << "', ";    \
    sqlSentence << "ChannelName = '" << _PTBUF_.channelname() << "', ";    \
    sqlSentence << "DeviceType = '" << _PTBUF_.devicetype() << "', ";    \
    sqlSentence << "Version = '" << _PTBUF_.version() << "', ";    \
    sqlSentence << "ServerID = '" << _PTBUF_.serverid() << "', ";    \
    sqlSentence << "ServerName = '" << _PTBUF_.servername() << "', ";    \
    sqlSentence << "ServerAddr = '" << _PTBUF_.serveraddr() << "', ";    \
    sqlSentence << "ServerType = '" << _PTBUF_.servertype() << "', ";    \
    sqlSentence << "ServerState = '" << _PTBUF_.serverstate() << "', ";    \
    sqlSentence << "ServerIndex = '" << _PTBUF_.serverindex() << "', ";    \
    sqlSentence << "WhiteAddr = '" << _PTBUF_.whiteaddr() << "', ";    \
    sqlSentence << "OpenState = '" << _PTBUF_.openstate() << "', ";    \
    sqlSentence << "Members = '" << _PTBUF_.members() << "' ";    \
    sqlSentence << "WHERE ProjectID = '" << _PTBUF_.projectid() << "'; ";

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_SENTENCE_DELETE_CProjectServer(_PTBUF_)    \
    sqlSentence.str("");    \
    sqlSentence << "DELETE FROM " << strTBName.c_str() << " ";    \
    sqlSentence << "WHERE ProjectID = '" << _PTBUF_.projectid() << "'; ";

#define CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ExecuteReader_CProjectServer(_PTBUF_)    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadUint64(_PTBUF_, projectid);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, platformname);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, channelname);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadUint32(_PTBUF_, devicetype);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, version);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadUint32(_PTBUF_, serverid);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, servername);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, serveraddr);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadUint32(_PTBUF_, servertype);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadUint32(_PTBUF_, serverstate);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadUint32(_PTBUF_, serverindex);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, whiteaddr);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadUint32(_PTBUF_, openstate);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, members);    \
    CDATABASETASK_SUBCLASS_DEFINE_REPLY_SQL_ReadString(_PTBUF_, modifytime);

} // namespace PTExt

#endif // PROTOEXT_CProjectServer__INCLUDED
